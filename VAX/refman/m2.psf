%!PS-Adobe-2.0
%%Title: m2.tru
%%DocumentFonts: (atend)
%%Creator: Joel McCormack,WRL,8536675,8515546 and Scribe 7(1700)
%%CreationDate: 26 June 1990 13:53
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {SV restore showpage} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale /showpage {} def} bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
24 /Times-Roman AF
20914 14606 MT
(The WRL Modula-2)SH
23681 16778 MT
(User's Manual)SH
11 SS 
28977 41634 MT
(DRAFT)SH
27847 44388 MT
(26 June 1990)SH
19589 58480 MT
(Copyright)SH
/Symbol SF
24326 XM
(\323)SH
/Times-Roman SF
25470 XM
(1990 Digital)
275 W( Equipment Corporation)SH
ES
%%Page: 1 2
BS
0 SI
10 /Times-Bold AF
47380 4270 MT
(1)SH
14 /Times-Roman AF
27319 11760 MT
(Introduction)SH
11 SS 
13680 15249 MT
(This is a programmer's reference manual, not a language definition, not a)SH
13680 16626 MT
(compiler-writer's manual, not a programmer's tutorial.  It's meant to help)SH
13680 18003 MT
(you write programs in WRL Modula-2, which is mostly a superset of)SH
13680 19380 MT
(Modula-2 as described by Niklaus Wirth in)SH
/Times-Italic SF
33017 XM
(Programming in Modula-2)SH
/Times-Roman SF
45208 XM
([3].)SH
13680 21308 MT
(I'm making no attempt to avoid circularity.  I don't expect to have any linear)SH
13680 22685 MT
(readers who go from page 1 to page 151.  Therefore I feel free to use words)SH
13680 24062 MT
(and phrases on page 1 that don't get defined till ``later'' in the manuscript.)SH
30505 25990 MT
(*)SH
13680 27918 MT
(This document doesn't \050by any means\051 contain everything you need to know)SH
13680 29295 MT
(about programming in Modula-2.  In particular, this document only describes)SH
13680 30672 MT
(the special ``pseudo-modules'' built into the compiler, and completely)SH
13680 32049 MT
(ignores the modules defined in)SH
10 /Courier AF
27519 XM
(/usr/local/defs)SH
11 /Times-Roman AF
(.)SH
30505 33977 MT
(*)SH
13680 36028 MT
(To print the manpage for the compiler, type:)SH
10 /Courier AF
16776 37683 MT
(man mod | lpr -Pname)SH
11 /Times-Roman AF
13680 39469 MT
(where ``)SH
10 /Courier AF
(name)SH
11 /Times-Roman AF
('' is the name of the nearest printer.)SH
13680 41520 MT
(To print the document for dbx, which has been extended to work with)SH
13680 42897 MT
(Modula-2 code, type:)SH
10 /Courier AF
16776 44552 MT
(man dbx | lpr -Pname)SH
11 /Times-Roman AF
30505 46603 MT
(*)SH
13680 48531 MT
(In this manual, ``supplied'' means not requiring import.  Supplied identifiers)SH
13680 49908 MT
(are also known as ``pervasive,'' ``predefined,'' ``built-in,'' and ``standard,'')SH
13680 51285 MT
(among different Modula-2 books.)SH
13680 53213 MT
(I sometimes slip and say)SH
10 /Courier AF
24771 XM
(M.def)SH
11 /Times-Roman AF
28046 XM
(for ``definition module)SH
10 /Courier AF
38463 XM
(M)SH
11 /Times-Roman AF
('' and)SH
10 /Courier AF
41933 XM
(M.mod)SH
11 /Times-Roman AF
45208 XM
(for)SH
13680 54590 MT
(``implementation module)SH
10 /Courier AF
25168 XM
(M)SH
11 /Times-Roman AF
('' or ``main module)SH
10 /Courier AF
34748 XM
(M)SH
11 /Times-Roman AF
(.'' But it's the module)SH
13680 55967 MT
(name, not the file name, that counts.  In fact the module name and the file)SH
13680 57344 MT
(name can be completely different.  ``Program module'' and ``main module'')SH
13680 58721 MT
(are synonymous.)SH
30505 60649 MT
(*)SH
13680 62577 MT
(The phrase ``standard Modula-2'' usually refers to the language sketched out)SH
13680 63954 MT
(in Niklaus Wirth's)SH
/Times-Italic SF
22143 XM
(Programming in Modula-2, Third Corrected Edition)SH
/Times-Roman SF
45580 XM
(as)SH
13680 65331 MT
(interpreted by me.  Extensions, changes, and restrictions to standard)SH
13680 66708 MT
(Modula-2 are marked in the text as:)SH
/Times-Bold SF
13680 68636 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(Inline procedure are non-standard.)SH
ES
%%Page: 2 3
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(2)SH
40275 XM
(Introduction)SH
11 /Times-Roman AF
11520 7955 MT
(Since the type)SH
10 /Courier AF
18027 XM
(CARDINAL)SH
11 /Times-Roman AF
23102 XM
(is defined differently in standard Modula-2 and)SH
11520 9332 MT
(WRL Modula-2, I always say ``standard)SH
10 /Courier AF
29571 XM
(CARDINAL)SH
11 /Times-Roman AF
('' in the extension)SH
11520 10709 MT
(notices to mean the full 32-bit type that is not compatible with)SH
10 /Courier AF
39202 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
28345 12760 MT
(*)SH
11520 14688 MT
(Notes about things that should be different but aren't, implementation issues,)SH
11520 16065 MT
(questions about the organization of this document, etc. are set off like:)SH
/Courier SF
11520 17993 MT
([[)SH
/Times-Roman SF
13500 XM
(There really shouldn't be any notes like this one if this were a)SH
11520 19370 MT
(professional manual, and if I were willing to lie.  But it isn't, and in keeping)SH
11520 20747 MT
(with tradition, I'm brutally honest about bugs in the implementations.)SH
/Courier SF
42827 XM
(]])SH
/Times-Roman SF
28345 22675 MT
(*)SH
11520 24603 MT
(Typography: This document is not well typeset.  Until somebody invents a)SH
11520 25980 MT
(way of doing good typesetting automatically, good typesetting in advance of)SH
11520 27357 MT
(good words is a waste of time.  After a while the words may or may not get)SH
11520 28734 MT
(good enough to warrant spending time on the typography.)SH
28345 30662 MT
(*)SH
11520 32590 MT
(Acknowledgements:)SH
11520 34518 MT
(It would be folly to contemplate a project of this kind without Scribe to)SH
11520 35895 MT
(supply paginated table of contents, automatic maintenance of)SH
11520 37272 MT
(cross-reference, automatic updating of index.)SH
11520 39200 MT
(Cast of thousands ...  This is a joint effort by all the m2+ programmers at)SH
11520 40577 MT
(SRC. Paul)
275 W( and Violetta.  JDD.  Greg.  Butler.  Roy.  Lyle.  Jim.  JRE.)SH
11520 41954 MT
(TomR. Karen. Sheng-Yang. Especially)
275 W( Mark.)SH
11520 44005 MT
(And me?  Here's a passage from)SH
/Times-Italic SF
26147 XM
(Mr. Scobie's)
275 W( Riddle,)SH
/Times-Roman SF
35739 XM
(by Elizabeth Jolley.)SH
11520 45382 MT
(The speaker is the dotty writer Miss Hailey, who wants to use in her next)SH
11520 46759 MT
(book an event from Mr. Scobie's life:)SH
10 SS 
13520 48550 MT
(``Ah,'' she put her hands up to her head.  ``The endless rewriting, the)SH
13520 49655 MT
(linking of events, the approach to drama, the dramatic moment and the)SH
13520 50760 MT
(resolution. But,'')
250 W( she paused as if at a dramatic moment in her own life,)SH
13520 51865 MT
(``it is so rewarding, the rewriting, the choosing of)SH
/Times-Italic SF
33656 XM
(le mot juste, la petite)SH
13520 52970 MT
(phrase.)SH
/Times-Roman SF
16992 XM
(You're absooty sure you don't mind?'')SH
13520 54626 MT
(Mr. Scobie replied, in spite of some uneasiness, that he did not mind.)SH
11 SS 
11520 56677 MT
(That was Mary-Claire van Leunen, who modestly identified everyone but)SH
11520 58054 MT
(herself. She)
275 W( wrote the Modula-2+ manual, on which the following is based.)SH
11520 59431 MT
(Had she not done so, there's no way I'd have tried to do a complete)SH
11520 60808 MT
(document for the WRL compiler.  I'm deeply indebted \050and very)SH
11520 62185 MT
(appreciative\051.)SH
11520 64113 MT
(Mike Powell wrote the original Modula-2 compiler in Pascal to generate)SH
11520 65490 MT
(code for the VAX and Titan.  Joel McCormack converted the source of the)SH
11520 66867 MT
(compiler to Modula-2, made it compile Pascal as well, fixed bugs, and sped)SH
11520 68244 MT
(up compilation.  Chuck Doucette ported the VAX version to VMS.  Len)SH
11520 69621 MT
(Lattanzi wrote the code generator for MIPS p-code.)SH
11520 71549 MT
(- Joel McCormack)SH
ES
%%Page: 3 4
BS
0 SI
10 /Times-Bold AF
47380 4270 MT
(3)SH
14 /Times-Roman AF
23624 11760 MT
(1. Tokens and Comments)SH
11 SS 
13680 15249 MT
(A ``token'' is a keyword, an identifier, a literal number, a literal character, a)SH
13680 16626 MT
(string, or an operator or delimiter.)SH
13680 18554 MT
(Blanks, tabs, formfeeds, and newlines can't occur within tokens except in)SH
13680 19931 MT
(quoted literal strings.  There you can use all four, but you have to use an)SH
13680 21308 MT
(escape sequence to describe newlines.  Elsewhere, blanks, tabs, formfeeds,)SH
13680 22685 MT
(and newlines are ignored except to separate two consecutive tokens.)SH
12 SS 
13680 26966 MT
(1.1. Keywords)SH
10 /Courier AF
16700 28876 MT
(@ALIGN)SH
27093 XM
(FROM)SH
37486 XM
(@PASCAL)SH
16700 30072 MT
(AND)SH
27093 XM
(@GLOBAL)SH
37486 XM
(POINTER)SH
16700 31268 MT
(ARRAY)SH
27093 XM
(IF)SH
37486 XM
(PROCEDURE)SH
16700 32464 MT
(@ASM)SH
27093 XM
(IMPLEMENTATION)SH
37486 XM
(QUALIFIED)SH
16700 33660 MT
(BEGIN)SH
27093 XM
(IMPORT)SH
37486 XM
(RECORD)SH
16700 34856 MT
(BY)SH
27093 XM
(IN)SH
37486 XM
(REPEAT)SH
16700 36052 MT
(@C)SH
27093 XM
(@INLINE)SH
37486 XM
(RETURN)SH
16700 37248 MT
(CASE)SH
27093 XM
(@LEFTTORIGHT)SH
37486 XM
(@RIGHTTOLEFT)SH
16700 38444 MT
(CONST)SH
27093 XM
(@LOCAL)SH
37486 XM
(SET)SH
16700 39640 MT
(DEFINITION)SH
27093 XM
(LOOP)SH
37486 XM
(@SHARED)SH
16700 40836 MT
(DIV)SH
27093 XM
(MOD)SH
37486 XM
(@SIZE)SH
16700 42032 MT
(DO)SH
27093 XM
(MODULE)SH
37486 XM
(SUBARRAY)SH
16700 43228 MT
(DYNARRAY)SH
27093 XM
(@NILCHECK)SH
37486 XM
(THEN)SH
16700 44424 MT
(ELSE)SH
27093 XM
(@NOCHECK)SH
37486 XM
(TO)SH
16700 45620 MT
(ELSIF)SH
27093 XM
(@NOCOUNT)SH
37486 XM
(TYPE)SH
16700 46816 MT
(END)SH
27093 XM
(@NOINIT)SH
37486 XM
(UNTIL)SH
16700 48012 MT
(EXIT)SH
27093 XM
(NOT)SH
37486 XM
(VAR)SH
16700 49208 MT
(EXPORT)SH
27093 XM
(OF)SH
37486 XM
(WHILE)SH
16700 50404 MT
(@EXTERNAL)SH
27093 XM
(OR)SH
37486 XM
(WITH)SH
16700 51600 MT
(FOR)SH
11 /Times-Roman AF
13680 54548 MT
(Case is not significant in keywords-)SH
29375 XM
(-)SH
29641 XM
(-)SH
10 /Courier AF
(Begin)SH
11 /Times-Roman AF
33282 XM
(and)SH
10 /Courier AF
35145 XM
(BEGIN)SH
11 /Times-Roman AF
38420 XM
(and)SH
10 /Courier AF
40283 XM
(begin)SH
11 /Times-Roman AF
43558 XM
(are the)SH
13680 55925 MT
(same keyword.)SH
/Times-Bold SF
13680 57853 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2 case is significant in keywords, and you)SH
13680 59230 MT
(must spell all keywords in upper case.)SH
12 SS 
13680 63511 MT
(1.2. Identifiers)SH
11 SS 
13680 65552 MT
(``Identifiers'' are sequences of alphabetic letters, digits, dollar signs, and)SH
13680 66929 MT
(underscores. The)
275 W( first character of an identifier must be a letter or an)SH
13680 68306 MT
(underscore. Examples:)275 W
10 /Courier AF
16176 69961 MT
(x scanChain Modula2 Apply GetSymbol _exit VMS$name)600 W
ES
%%Page: 4 5
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(4)SH
35886 XM
(Tokens and Comments)SH
11 /Times-Roman AF
11520 7955 MT
(Case is significant in user-defined identifiers-)SH
31489 XM
(-)SH
31755 XM
(-)SH
10 /Courier AF
(jam)SH
11 /Times-Roman AF
34196 XM
(and)SH
10 /Courier AF
36059 XM
(Jam)SH
11 /Times-Roman AF
38134 XM
(and)SH
10 /Courier AF
39997 XM
(JAM)SH
11 /Times-Roman AF
42072 XM
(and)SH
10 /Courier AF
11520 9332 MT
(jAM)SH
11 /Times-Roman AF
13595 XM
(are different identifiers.  Pragmatic note about choosing identifiers at)SH
11520 10709 MT
(page 132.)SH
/Times-Bold SF
11520 12760 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Using underscore or dollar sign in an identifier is non-standard.)SH
11520 14137 MT
(These characters are permitted to make it easier to interface to other)SH
11520 15514 MT
(languages.)SH
12 SS 
11520 19795 MT
(1.3. Literal Numbers)SH
11 SS 
11520 21836 MT
(There are no negative literal numbers.  Literal numbers represent)SH
11520 23213 MT
(nonnegative integers or real numbers.)SH
11520 25141 MT
(To construct a literal decimal integer, you use the digits ``)SH
10 /Courier AF
(0)SH
11 /Times-Roman AF
('' through ``)SH
10 /Courier AF
(9)SH
11 /Times-Roman AF
(''.)SH
11520 27069 MT
(To construct a literal octal integer, you use the digits ``)SH
10 /Courier AF
(0)SH
11 /Times-Roman AF
('' through ``)SH
10 /Courier AF
(7)SH
11 /Times-Roman AF
('' and)SH
11520 28446 MT
(follow them with the letter ``)SH
10 /Courier AF
(b)SH
11 /Times-Roman AF
('' or ``)SH
10 /Courier AF
(B)SH
11 /Times-Roman AF
(''.)SH
11520 30374 MT
(To construct a literal hex integer, you use the digits ``)SH
10 /Courier AF
(0)SH
11 /Times-Roman AF
('' through ``)SH
10 /Courier AF
(f)SH
11 /Times-Roman AF
('')SH
11520 31751 MT
(\050lower-case or upper-case for the alpha digits\051 and follow them with the letter)SH
11520 33128 MT
(``)SH
10 /Courier AF
(h)SH
11 /Times-Roman AF
('' or ``)SH
10 /Courier AF
(H)SH
11 /Times-Roman AF
(''. To)
275 W( differentiate literal hex numbers from identifiers, no hex)SH
11520 34505 MT
(number is allowed to start with an alpha digit; you have to use a dummy zero)SH
11520 35882 MT
(if your hex number would have started with ``)SH
10 /Courier AF
(a)SH
11 /Times-Roman AF
('' through ``)SH
10 /Courier AF
(f)SH
11 /Times-Roman AF
(''. Examples:)275 W
10 /Courier AF
14016 37537 MT
(1980 3764B 7bcH)
600 W( 177B 3fH 0ffH)SH
11 /Times-Roman AF
11520 39465 MT
(To construct a literal \050decimal\051 real, you must always use a decimal point and)SH
11520 40842 MT
(at least one digit to the left of the decimal point.  A real number may contain)SH
11520 42219 MT
(a decimal scale factor: the letter ``)SH
10 /Courier AF
(e)SH
11 /Times-Roman AF
('' or ``)SH
10 /Courier AF
(E)SH
11 /Times-Roman AF
('', pronounced either ``times ten)SH
11520 43596 MT
(to the power of'' or \050more often\051 ``E''.  Examples:)SH
10 /Courier AF
14016 45251 MT
(12.3 45.67E-8 0.8)1200 W
11 /Times-Bold AF
11520 47179 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(In standard Modula-2 you must use upper-case letters in)SH
11520 48556 MT
(numbers.)SH
12 SS 
11520 52837 MT
(1.4. Literal Characters)SH
11 SS 
11520 54878 MT
(To construct a literal octal character, you use the digits ``)SH
10 /Courier AF
(0)SH
11 /Times-Roman AF
('' through ``)SH
10 /Courier AF
(7)SH
11 /Times-Roman AF
('')SH
11520 56255 MT
(and follow them with the letter ``)SH
10 /Courier AF
(c)SH
11 /Times-Roman AF
('' or ``)SH
10 /Courier AF
(C)SH
11 /Times-Roman AF
(''; this specifies the character)SH
11520 57632 MT
(whose ASCII code is the octal value.  You should use the constants defined)SH
11520 59009 MT
(in the library module)SH
10 /Courier AF
21052 XM
(ASCII)SH
11 /Times-Roman AF
24327 XM
(rather than use octal characters directly.  For)SH
11520 60386 MT
(example, use)SH
10 /Courier AF
17537 XM
(ASCII.ESC)SH
11 /Times-Roman AF
23212 XM
(rather than)SH
10 /Courier AF
28220 XM
(033C)SH
11 /Times-Roman AF
(. \050It's)
275 W( okay to write)SH
10 /Courier AF
39631 XM
(0C)SH
11 /Times-Roman AF
41106 XM
(for the)SH
11520 61763 MT
(null character.\051)SH
/Times-Bold SF
11520 63691 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(In standard Modula-2 you must use an upper-case ``)SH
10 /Courier AF
(C)SH
11 /Times-Roman AF
('' to)SH
11520 65068 MT
(indicate an octal character.)SH
11520 66996 MT
(A literal string that contains exactly one character behaves like a literal)SH
11520 68373 MT
(character in many contexts.)SH
ES
%%Page: 5 6
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Literal Characters)SH
47380 XM
(5)SH
12 /Times-Roman AF
13680 8023 MT
(1.5. Literal Strings)SH
11 SS 
13680 10064 MT
(Literal strings are sequences of characters enclosed in single or double)SH
13680 11441 MT
(quotes.)SH
13680 13369 MT
(The ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('' character is an escape mechanism for including special characters)SH
13680 14746 MT
(in literal strings, and for creating very long strings that extend over more than)SH
13680 16123 MT
(one line.  If you want to use a ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('' in a string, you must escape it with a)SH
13680 17500 MT
(``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('':)SH
10 /Courier AF
16176 19155 MT
("\134\134")SH
11 /Times-Roman AF
13680 21083 MT
(If you want to write a literal string on several lines, you have to terminate)SH
13680 22460 MT
(each line but the last with a ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
(''; neither the ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('' nor the newline will be)SH
13680 23837 MT
(part of the resulting string.  If you want a string to include a newline, you)SH
13680 25214 MT
(have to use the escape sequence ``)SH
10 /Courier AF
(\134n)SH
11 /Times-Roman AF
(''.)SH
13680 27142 MT
(If you want to use a ``)SH
10 /Courier AF
(")SH
11 /Times-Roman AF
('' in a literal string, you must escape it with a ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('' or)SH
13680 28519 MT
(delimit the string with ``)SH
10 /Courier AF
(')SH
11 /Times-Roman AF
(''; if you want to use a ``)SH
10 /Courier AF
(')SH
11 /Times-Roman AF
('' in a literal string, you)SH
13680 29896 MT
(must escape it with a ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('' or delimit the string with ``)SH
10 /Courier AF
(")SH
11 /Times-Roman AF
('':)SH
10 /Courier AF
16176 31551 MT
("\134"")SH
16176 32582 MT
('"')SH
16176 33613 MT
('\134'')SH
16176 34644 MT
("'")SH
11 /Times-Roman AF
13680 36695 MT
(Here are all of the escape sequences available to you in literal strings:)SH
10 /Courier AF
16080 38646 MT
(\134n)SH
11 /Times-Roman AF
18720 XM
(newline \050linefeed\051)SH
10 /Courier AF
16080 39842 MT
(\134t)SH
11 /Times-Roman AF
18720 XM
(tab)SH
10 /Courier AF
16080 41038 MT
(\134r)SH
11 /Times-Roman AF
18720 XM
(carriage return)SH
10 /Courier AF
16080 42234 MT
(\134f)SH
11 /Times-Roman AF
18720 XM
(form feed)SH
10 /Courier AF
16080 43430 MT
(\134b)SH
11 /Times-Roman AF
18720 XM
(backspace)SH
10 /Courier AF
16080 44626 MT
(\134v)SH
11 /Times-Roman AF
18720 XM
(vertical tab)SH
10 /Courier AF
16080 45822 MT
(\134\134)SH
11 /Times-Roman AF
18720 XM
(backslash)SH
10 /Courier AF
16080 47018 MT
(\134")SH
11 /Times-Roman AF
18720 XM
(double quote)SH
10 /Courier AF
16080 48214 MT
(\134')SH
11 /Times-Roman AF
18720 XM
(single quote)SH
13680 50265 MT
(A ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('' followed by up to three octal digits specifies the character whose)SH
13680 51642 MT
(ASCII code is that octal value \050e.g.)SH
10 /Courier AF
29411 XM
(\134014)SH
11 /Times-Roman AF
32086 XM
(for form feed,)SH
10 /Courier AF
38498 XM
(\134033)SH
11 /Times-Roman AF
41173 XM
(for escape\051.)SH
13680 53019 MT
(Unless you absolutely)SH
/Times-Italic SF
23671 XM
(must)SH
/Times-Roman SF
26024 XM
(have an octal control character in the middle of a)SH
13680 54396 MT
(multi-character literal string, you should use the)SH
10 /Courier AF
35064 XM
(ASCII)SH
11 /Times-Roman AF
38339 XM
(interface instead.)SH
13680 56447 MT
(Examples:)SH
10 /Courier AF
16176 58102 MT
("a")SH
16176 59133 MT
("Don't Worry!")SH
16176 60164 MT
("codeword \134"Barbarossa\134"")SH
16176 61195 MT
('"Who\134's Michel?" I asked the next morning.')SH
ES
%%Page: 6 7
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(6)SH
35886 XM
(Tokens and Comments)SH
12 /Times-Roman AF
11520 8023 MT
(1.5.1. Null Termination)SH
11 SS 
11520 10064 MT
(To descend suddenly from the level of the language to the level of)SH
11520 11441 MT
(representation:)SH
11520 13369 MT
(When you assign a literal string to a fixed-length array of)SH
10 /Courier AF
37025 XM
(CHAR)SH
11 /Times-Roman AF
(, or pass a)SH
11520 14746 MT
(literal string to a fixed-length array or open array of)SH
10 /Courier AF
34548 XM
(CHAR)SH
11 /Times-Roman AF
37223 XM
(formal parameter,)SH
11520 16123 MT
(one null byte is appended to the end of the string.  If you have a five-byte)SH
11520 17500 MT
(buffer:)SH
10 /Courier AF
14016 19155 MT
(buf = ARRAY [0..4] OF CHAR)SH
11 /Times-Roman AF
11520 20941 MT
(then a four-character literal string stored in the buffer gets a null byte tacked)SH
11520 22318 MT
(on:)SH
10 /Courier AF
14016 23973 MT
(buf := "1234";)SH
11520 25759 MT
(buf[4] = "\134000")SH
11 /Times-Roman AF
(. But)
275 W( if you try to store a five-character literal string)SH
10 /Courier AF
14016 27414 MT
(buf := "12345";)SH
11 /Times-Roman AF
11520 29200 MT
(the compiler will signal an error.)SH
/Times-Bold SF
11520 31251 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Standard Modula-2 allows you to assign a literal string into an)SH
11520 32628 MT
(array that does not have room for the null.)SH
11520 34556 MT
(End of descent.)SH
12 SS 
11520 38837 MT
(1.6. Operators and Delimiters)SH
11 SS 
11520 40878 MT
(The special characters and character pairs are:)SH
10 /Courier AF
14540 42698 MT
(+)SH
22335 XM
(#)SH
30130 XM
(;)SH
37925 XM
(&)SH
14540 43894 MT
(-)SH
22335 XM
(<>)SH
30130 XM
(\050)SH
37925 XM
(\051)SH
14540 45090 MT
(*)SH
22335 XM
(<)SH
30130 XM
([)SH
37925 XM
(])SH
14540 46286 MT
(/)SH
22335 XM
(>)SH
30130 XM
({)SH
37925 XM
(})SH
14540 47482 MT
(:=)SH
22335 XM
(<=)SH
30130 XM
(^)SH
37925 XM
(~)SH
14540 48678 MT
(.)SH
22335 XM
(>=)SH
30130 XM
(..)SH
37925 XM
(|)SH
14540 49874 MT
(=)SH
22335 XM
(,)SH
30130 XM
(:)SH
12 /Times-Roman AF
11520 55351 MT
(1.7. Comments)SH
11 SS 
11520 57392 MT
(Comments can be inserted between any two tokens in a program.  They are)SH
11520 58769 MT
(arbitrary character sequences opened by ``)SH
10 /Courier AF
(\050*)SH
11 /Times-Roman AF
('' and closed by ``)SH
10 /Courier AF
(*\051)SH
11 /Times-Roman AF
(''.)SH
11520 60146 MT
(Comments can be nested:)SH
10 /Courier AF
14016 61801 MT
(\050* Like \050* this *\051 *\051)SH
11 /Times-Roman AF
11520 63587 MT
(and can extend over more than one line:)SH
10 /Courier AF
14016 65242 MT
(\050*)SH
14616 66273 MT
(like this)SH
14016 67304 MT
(*\051)SH
11 /Times-Roman AF
11520 69232 MT
(For information on comment directives that control runtime checking, see)SH
11520 70609 MT
(Section 20.2, page 126.)SH
ES
%%Page: 7 8
BS
0 SI
10 /Times-Bold AF
47380 4270 MT
(7)SH
14 /Times-Roman AF
23216 11760 MT
(2. Names and Name Scope)SH
11 SS 
13680 15249 MT
(The keywords of the language are reserved words in Modula-2; they are)SH
13680 16626 MT
(available everywhere and at all times, and you may not redefine them.  See)SH
13680 18003 MT
(Section 1.1, page 3, for the full list.)SH
12 SS 
13680 22284 MT
(2.1. Supplied Identifiers)SH
10 /Courier AF
15190 24194 MT
(ABS)SH
23362 XM
(DISPOSE)SH
31534 XM
(LAST)SH
39706 XM
(ODD)SH
15190 25390 MT
(ASSERT)SH
23362 XM
(EXCL)SH
31534 XM
(LOCAL)SH
39706 XM
(ORD)SH
15190 26586 MT
(BITSET)SH
23362 XM
(FALSE)SH
31534 XM
(LONGFLOAT)SH
39706 XM
(PROC)SH
15190 27782 MT
(BOOLEAN)SH
23362 XM
(FIRST)SH
31534 XM
(LONGREAL)SH
39706 XM
(REAL)SH
15190 28978 MT
(CAP)SH
23362 XM
(FLOAT)SH
31534 XM
(LOW)SH
39706 XM
(TRUE)SH
15190 30174 MT
(CARDINAL)SH
23362 XM
(HALT)SH
31534 XM
(MAX)SH
39706 XM
(TRUNC)SH
15190 31370 MT
(CHAR)SH
23362 XM
(HIGH)SH
31534 XM
(MIN)SH
39706 XM
(UNSIGNED)SH
15190 32566 MT
(CHR)SH
23362 XM
(INC)SH
31534 XM
(NEW)SH
39706 XM
(VAL)SH
15190 33762 MT
(DEC)SH
23362 XM
(INCL)SH
31534 XM
(NIL)SH
15190 34958 MT
(DESCRIPTOR)SH
23362 XM
(INTEGER)SH
31534 XM
(NUMBER)SH
11 /Times-Roman AF
13680 37906 MT
(Case is not significant in supplied identifiers-)SH
33562 XM
(-)SH
33828 XM
(-)SH
10 /Courier AF
(Integer)SH
11 /Times-Roman AF
38669 XM
(and)SH
10 /Courier AF
40532 XM
(INTEGER)SH
11 /Times-Roman AF
45007 XM
(and)SH
10 /Courier AF
13680 39283 MT
(integer)SH
11 /Times-Roman AF
18155 XM
(are the same identifier.)SH
13680 41211 MT
(Supplied identifiers are automatically imported into every module.  You may)SH
13680 42588 MT
(redefine a supplied identifier, but only the case-sensitive spelling you use)SH
13680 43965 MT
(will be redefined.  All other spellings will still refer to the supplied meaning)SH
13680 45342 MT
(of the identifier:)SH
10 /Courier AF
16176 46997 MT
(VAR ord : CHAR;)SH
16176 48028 MT
(BEGIN)SH
18576 49059 MT
(ord := "A";)SH
18576 50090 MT
(IO.WriteF\050IO.output, 'ord = "%c", ORD\050ord\051 = %d\134n',)SH
31176 51121 MT
(ord, ORD\050ord\051\051;)SH
11 /Times-Roman AF
13680 52907 MT
(Style note telling you not to redefine supplied identifiers in Section 21.4,)SH
13680 54284 MT
(page 132.)SH
/Times-Bold SF
13680 56212 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2 case is significant in supplied identifiers,)SH
13680 57589 MT
(and you must spell all supplied identifiers in upper case.  Further, you can)SH
13680 58966 MT
(redefine a supplied identifier only in a procedure, not in a module.)SH
12 SS 
13680 63247 MT
(2.2. Name Scope)SH
11 SS 
13680 65288 MT
(A scope is a section of program text in which a set of names is defined; each)SH
13680 66665 MT
(name is bound to an object.  Modula-2 scopes nest: that is, if you have two)SH
13680 68042 MT
(different scopes, either one contains the other or the two are disjoint.  The)SH
13680 69419 MT
(meaning of a name at any given point is always determined by the smallest)SH
13680 70796 MT
(enclosing scope in which the name is defined.)SH
ES
%%Page: 8 9
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(8)SH
35471 XM
(Names and Name Scope)SH
11 /Times-Roman AF
11520 7955 MT
(A scope is a name table attached to each block-)SH
32279 XM
(-)SH
32545 XM
(-a block is a module or a)SH
11520 9332 MT
(procedure. A)
275 W( name gets looked up in the name table of the block in which it)SH
11520 10709 MT
(occurs; if there's no entry for the name, then the name gets looked up in the)SH
11520 12086 MT
(name table of the block enclosing that block.  Etc.  The meaning of any name)SH
11520 13463 MT
(is unambiguous; usually it is also clear.)SH
11520 15514 MT
(A good way to think about procedure declarations is that the enclosing block)SH
11520 16891 MT
(includes the name of the procedure and the procedure's own scope starts)SH
11520 18268 MT
(right after its name.  In other words, you could actually \050ugh\051 name a)SH
11520 19645 MT
(procedure and one of its formal parameters the same name:)SH
10 /Courier AF
14016 21300 MT
(PROCEDURE P\050P : INTEGER\051;)SH
11 /Times-Roman AF
11520 23086 MT
(A procedure's formal parameters are entered in the name table for the)SH
11520 24463 MT
(procedure, not the enclosing block.  Their scope extends to the end of the)SH
11520 25840 MT
(procedure.)SH
11520 27768 MT
(An implementation module automatically gets all the declared and imported)SH
11520 29145 MT
(names from its definition module.)SH
/Times-Bold SF
11520 31073 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Standard Modula-2 does not automatically import into the)SH
11520 32450 MT
(implementation module what is imported into the definition module.  You)SH
11520 33827 MT
(must explicitly import these identifiers into the implementation module.)SH
12 SS 
11520 38108 MT
(2.3. Qualified Names)SH
11 SS 
11520 40159 MT
(Qualified names look like this:)SH
10 /Courier AF
14016 41814 MT
(record.field)SH
14016 42845 MT
(Module.Procedure)SH
11 /Times-Roman AF
11520 44631 MT
(In other words, interpret the right-hand name in the context of the object)SH
11520 46008 MT
(named by the left-hand name.)SH
11520 48059 MT
(Record declarations produce qualified names.  Suppose you declare a record)SH
11520 49436 MT
(type)SH
10 /Courier AF
13689 XM
(R)SH
11 /Times-Roman AF
(, some types that use the record type, and one variable of each type:)SH
10 /Courier AF
14016 51091 MT
(TYPE)SH
16416 52122 MT
(R = RECORD)SH
18816 53153 MT
(f1 : INTEGER;)SH
18816 54184 MT
(f2 : BOOLEAN;)SH
16416 55215 MT
(END;)SH
16416 56246 MT
(P = POINTER TO R;)SH
16416 57277 MT
(A = ARRAY [0..9] OF R;)SH
16416 58308 MT
(N = RECORD)SH
18816 59339 MT
(nr1 : INTEGER;)SH
18816 60370 MT
(nr2 : R;)SH
16416 61401 MT
(END;)SH
14016 62432 MT
(VAR)SH
16416 63463 MT
(r : R;)SH
16416 64494 MT
(p : P;)SH
16416 65525 MT
(a : A;)SH
16416 66556 MT
(n : N;)SH
11 /Times-Roman AF
11520 68342 MT
(Now you can use)SH
10 /Courier AF
19400 XM
(r.f1)SH
11 /Times-Roman AF
(. But)
275 W( that's not all-)SH
30256 XM
(-)SH
30522 XM
(-you can also interpret the name)SH
11520 69719 MT
(of a record field in any context that produces a reference to the record type.)SH
11520 71096 MT
(So you can also talk about)SH
10 /Courier AF
23374 XM
(p^.f1)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
26924 XM
(a[3].f1)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
33537 XM
(n.nr2.f1)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 9 10
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Qualified Names)SH
47380 XM
(9)SH
11 /Times-Roman AF
13680 7955 MT
(Module declarations produce qualified names, too.  Using the form)SH
10 /Courier AF
16176 9610 MT
(IMPORT M;)SH
11 /Times-Roman AF
13680 11396 MT
(is quite comparable to defining a variable of a record type.  All the names)SH
13680 12773 MT
(declared in the definition module)SH
10 /Courier AF
28557 XM
(M)SH
11 /Times-Roman AF
29432 XM
(are now available to you as long as you)SH
13680 14150 MT
(qualify them with the prefix)SH
10 /Courier AF
26297 XM
(M)SH
11 /Times-Roman AF
27172 XM
(and the dot:)SH
10 /Courier AF
16176 15805 MT
(M.T)SH
16176 16836 MT
(M.Proc)SH
11 /Times-Roman AF
13680 18622 MT
(etc.)SH
12 SS 
13680 22903 MT
(2.4. Declaration)SH
11 SS 
13680 24944 MT
(One way to get a name into the name table of a block is to declare it.  When)SH
13680 26321 MT
(you declare a name, the scope of the definition extends from the declaration)SH
13680 27698 MT
(to the end of the block in which the declaration occurs; you can think of a)SH
13680 29075 MT
(declaration as adding a name to the name table for the block in which it)SH
13680 30452 MT
(occurs.)SH
13680 32503 MT
(There are five kinds of declaration: constant, type, variable, procedure, and)SH
13680 33880 MT
(module declarations.  In EBNF \050see Appendix II, page 145\051:)SH
10 /Courier AF
16176 35535 MT
(declaration = CONST)
SH( {ident)
1800 W( "=" ConstExpr)
SH( ";"})10200 W
23376 36566 MT
(| TYPE)
SH( {ident)
2400 W( "=" type)
SH( ";"})13200 W
23376 37597 MT
(| VAR)
SH( {ident)
3000 W( ":" type [":=" initial])
SH( ";"})4200 W
23376 38628 MT
(| PROCEDURE ident [FormalParams] [":" qualident] ";")SH
23376 39659 MT
(| MODULE)
SH( ident)
1800 W( ";")18600 W
11 /Times-Roman AF
13680 42276 MT
(Each of these kinds of declaration has its own special flavor.)SH
13680 44227 MT
(For constants, see)SH
23040 XM
(Section 3.2, page 17.)SH
13680 45423 MT
(For types, see)SH
23040 XM
(Section 5.2, page 21.)SH
13680 46619 MT
(For variables, see)SH
23040 XM
(Section 6, page 39.)SH
13680 47815 MT
(For procedures, see)SH
23040 XM
(Section 12.1, page 59.)SH
13680 49011 MT
(For modules, see)SH
23040 XM
(Section 14, page 73.)SH
13680 51062 MT
(Examples:)SH
10 /Courier AF
16176 52717 MT
(CONST)SH
18576 53748 MT
(A = 613;)SH
18576 54779 MT
(B = ASCII.CharSet {"A".."Z", "a".."z"};)SH
16176 56841 MT
(TYPE)SH
18576 57872 MT
(Index =)
600 W( [0..15];)SH
18576 58903 MT
(Handle = POINTER TO Object;)SH
18576 59934 MT
(Object = RECORD)SH
20976 60965 MT
(key : INTEGER;)SH
20976 61996 MT
(left, right : Handle;)SH
18576 63027 MT
(END;)SH
16176 65089 MT
(VAR)SH
18576 66120 MT
(f :)
3600 W( IO.File;)SH
18576 67151 MT
(x, y, z : INTEGER;)SH
16176 69213 MT
(PROCEDURE Scan\050f : IO.File; chars : ASCII.CharSet\051;)SH
16176 71275 MT
(MODULE RandomAlgorithms;)SH
ES
%%Page: 10 11
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(10)SH
35471 XM
(Names and Name Scope)SH
11 /Times-Roman AF
11520 7955 MT
(It is an error to declare the same name twice in one block.)SH
11520 9883 MT
(It is OK to redefine a name from an enclosing block as long as you haven't)SH
11520 11260 MT
(yet used it in the current block.)SH
/Courier SF
11520 13188 MT
([[)SH
/Times-Roman SF
13500 XM
(Unfortunately, the compiler does not detect such an error, even though it)SH
11520 14565 MT
(really isn't that hard to put in.  So many bugs.  So little time.)SH
/Courier SF
38857 XM
(]])SH
/Times-Roman SF
11520 16616 MT
(The effect of declaring an enumeration type is to add to the name table for)SH
11520 17993 MT
(the block not only the name of the type but also the names of all the)SH
11520 19370 MT
(constants. I.e.,)
275 W( after you do:)SH
10 /Courier AF
14016 21025 MT
(TYPE)SH
16416 22056 MT
(Color = \050Red, Green, Blue\051;)SH
11 /Times-Roman AF
11520 23842 MT
(the names)SH
10 /Courier AF
16224 XM
(Red)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
18574 XM
(Green)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
23987 XM
(Blue)SH
11 /Times-Roman AF
26662 XM
(are available for the rest of the block \050as)SH
11520 25219 MT
(well as the name)SH
10 /Courier AF
19156 XM
(Color)SH
11 /Times-Roman AF
(\051. Enumeration)
275 W( constant names are not attached to)SH
11520 26596 MT
(the enumeration name the way that the names of the fields of a record are)SH
11520 27973 MT
(attached to the name of the record.  So you cannot do:)SH
10 /Courier AF
14016 29628 MT
(TYPE)SH
16416 30659 MT
(Color = \050Red, Green, Blue\051;)SH
16416 31690 MT
(Feeling = \050Sad, Sorry, Blue\051;)SH
11 /Times-Roman AF
11520 33476 MT
(That's seen as an attempt to redefine a constant and produces a compile-time)SH
11520 34853 MT
(error.)SH
11520 36904 MT
(The effect of declaring a record type is to define a set of field names that are)SH
11520 38281 MT
(meaningful)SH
/Times-Italic SF
16805 XM
(only)SH
/Times-Roman SF
18974 XM
(in the context of a variable of that type by using a)SH
11520 39658 MT
(field-selection dot.  I.e. after you do:)SH
10 /Courier AF
14016 41313 MT
(TYPE)SH
16416 42344 MT
(R1 = RECORD)SH
18816 43375 MT
(f1 : INTEGER;)SH
18816 44406 MT
(f2 : BOOLEAN;)SH
16416 45437 MT
(END;)SH
16416 46468 MT
(R2 = RECORD)SH
18816 47499 MT
(f1 : BOOLEAN;)SH
18816 48530 MT
(f2 : CHAR;)SH
16416 49561 MT
(END;)SH
11 /Times-Roman AF
11520 51347 MT
(you can then do:)SH
10 /Courier AF
14016 53002 MT
(VAR)SH
16416 54033 MT
(r1 : R1;)SH
16416 55064 MT
(r2 : R2;)SH
11 /Times-Roman AF
11520 56850 MT
(and thereafter use the names)SH
10 /Courier AF
24315 XM
(r1.f1)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
27865 XM
(r1.f2)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
31415 XM
(r2.f1)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
36828 XM
(r2.f2)SH
11 /Times-Roman AF
(. \050See)275 W
11520 58227 MT
(Section 2.3, page 8.\051)SH
12 SS 
11520 62508 MT
(2.5. Forward Reference)SH
11 SS 
11520 64559 MT
(Generally it's an error to use a name before you've declared it, but there are)SH
11520 65936 MT
(two exceptions:)SH
6 /Symbol AF
13719 67887 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(You can use the name of a type in constructing a new pointer)SH
14270 69264 MT
(type to the type and then declare the type.)SH
6 /Symbol AF
13719 71192 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(You can use a procedure and then declare it.)SH
ES
%%Page: 11 12
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Forward Reference)SH
46880 XM
(11)SH
11 /Times-Roman AF
13680 7955 MT
(Here's a typical example of forward reference in defining a pointer type:)SH
10 /Courier AF
16176 9610 MT
(TYPE)SH
18576 10641 MT
(IntList =)
1800 W( POINTER TO IntListRec;)SH
18576 11672 MT
(IntListRec = RECORD)SH
20976 12703 MT
(first : INTEGER;)SH
20976 13734 MT
(rest :)
600 W( IntList;)SH
18576 14765 MT
(END;)SH
11 /Times-Roman AF
13680 16816 MT
(The ability to make forward type references is specific to the)SH
10 /Courier AF
40709 XM
(POINTER TO)SH
11 /Times-Roman AF
13680 18193 MT
(type constructor.  So, for instance, the following is not allowed:)SH
10 /Courier AF
16176 19848 MT
(TYPE)SH
18576 20879 MT
(FileArray =)
600 W( ARRAY [0..9] OF FileNumber;)SH
18576 21910 MT
(FileNumber = CARDINAL;)SH
11 /Times-Roman AF
13680 23961 MT
(Forward references to procedures are always allowed.  You can call a)SH
13680 25338 MT
(procedure, assign it as a procedure variable, or pass it as a procedure)SH
13680 26715 MT
(parameter before declaring it.  You can arrange the procedures of a module)SH
13680 28092 MT
(in any order you wish.)SH
12 SS 
13680 32373 MT
(2.6. Import)SH
11 SS 
13680 34424 MT
(Another way to get a name besides declaring it is to import it from some)SH
13680 35801 MT
(other module where somebody else has declared it for you.  There are three)SH
13680 37178 MT
(forms of import:)SH
10 /Courier AF
16176 38833 MT
(IMPORT M;)SH
16176 39864 MT
(FROM M IMPORT X;)SH
16176 40895 MT
(FROM M IMPORT *;)SH
13680 42681 MT
(M)SH
11 /Times-Roman AF
14555 XM
(in each case is the definition module)SH
10 /Courier AF
30898 XM
(M)SH
11 /Times-Roman AF
31773 XM
(from somewhere out in the world.)SH
13680 44058 MT
(\050The manpage for the compiler describes the search rules used to find it.\051)SH
13680 46109 MT
(When you use the form:)SH
10 /Courier AF
16176 47764 MT
(IMPORT M;)SH
11 /Times-Roman AF
13680 49550 MT
(you show that you're planning to use names from module)SH
10 /Courier AF
39342 XM
(M)SH
11 /Times-Roman AF
(. Only)
275 W( the name)SH
10 /Courier AF
13680 50927 MT
(M)SH
11 /Times-Roman AF
14555 XM
(is inserted in the current scope; to use any of the names declared in)SH
10 /Courier AF
44305 XM
(M)SH
11 /Times-Roman AF
(, you)SH
13680 52304 MT
(must qualify them:)SH
10 /Courier AF
16176 53959 MT
(M.PrintIt)SH
16176 54990 MT
(M.Color)SH
11 /Times-Roman AF
13680 56776 MT
(You get access only to names declared and exported from)SH
10 /Courier AF
39396 XM
(M)SH
11 /Times-Roman AF
('s definition)SH
13680 58153 MT
(module. You)
275 W( don't get access to names declared in the corresponding)SH
13680 59530 MT
(implementation module.)SH
13680 61581 MT
(When you use the form:)SH
10 /Courier AF
16176 63236 MT
(FROM M IMPORT X;)SH
11 /Times-Roman AF
13680 65022 MT
(only the name)SH
10 /Courier AF
20187 XM
(X)SH
11 /Times-Roman AF
21062 XM
(from module)SH
10 /Courier AF
27050 XM
(M)SH
11 /Times-Roman AF
27925 XM
(is inserted in the current scope; the name)SH
10 /Courier AF
46191 XM
(M)SH
11 /Times-Roman AF
47066 XM
(is)SH
13680 66399 MT
(not inserted.  Whatever)SH
10 /Courier AF
24217 XM
(X)SH
11 /Times-Roman AF
25092 XM
(meant in the context of the definition module)SH
10 /Courier AF
45256 XM
(M)SH
11 /Times-Roman AF
46131 XM
(it)SH
13680 67776 MT
(now means in your current block.  You refer to)SH
10 /Courier AF
34663 XM
(X)SH
11 /Times-Roman AF
35538 XM
(simply as)SH
10 /Courier AF
40000 XM
(X)SH
11 /Times-Roman AF
40875 XM
(\050)SH
10 /Courier AF
(M.X)SH
11 /Times-Roman AF
43316 XM
(won't)SH
13680 69153 MT
(work.\051 You)
275 W( must list explicitly every name you wish to use unqualified:)SH
10 /Courier AF
16176 70808 MT
(FROM IO IMPORT input, output, terminal;)SH
ES
%%Page: 12 13
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(12)SH
35471 XM
(Names and Name Scope)SH
11 /Times-Roman AF
11520 7955 MT
(When you use the form:)SH
10 /Courier AF
14016 9610 MT
(FROM M IMPORT *;)SH
11 /Times-Roman AF
11520 11396 MT
(all the names exported from module)SH
10 /Courier AF
27710 XM
(M)SH
11 /Times-Roman AF
28585 XM
(are inserted in the current scope; the)SH
11520 12773 MT
(name)SH
10 /Courier AF
14177 XM
(M)SH
11 /Times-Roman AF
15052 XM
(is not inserted.  You refer to the imported identifiers directly:)SH
10 /Courier AF
14016 14428 MT
(FROM IO IMPORT *;)SH
14016 15459 MT
(BEGIN)SH
16416 16490 MT
(WriteF\050output, "All identifiers in IO are available\134n"\051;)SH
11 /Times-Roman AF
11520 18541 MT
(Style notes on qualified vs. unqualified names, and why you should avoid)SH
11520 19918 MT
(using)SH
10 /Courier AF
14179 XM
(FROM ... IMPORT *)SH
11 /Times-Roman AF
(, in Section 21.5, page 132.)SH
/Times-Bold SF
11520 21846 MT
(Extension:)SH
10 /Courier AF
16807 XM
(FROM ... IMPORT *)SH
11 /Times-Roman AF
27282 XM
(is non-standard.)SH
11520 23897 MT
(The scope of the constants of an enumeration type is the same as the scope of)SH
11520 25274 MT
(the type.  That is, if you do:)SH
10 /Courier AF
14016 26929 MT
(FROM M IMPORT E;)SH
11 /Times-Roman AF
11520 28715 MT
(and)SH
10 /Courier AF
13383 XM
(M)SH
11 /Times-Roman AF
14258 XM
(declared)SH
10 /Courier AF
18257 XM
(E)SH
11 /Times-Roman AF
19132 XM
(as an enumeration type that consisted of)SH
10 /Courier AF
37063 XM
(A)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
38213 XM
(B)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
41226 XM
(C)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
14016 30370 MT
(E = \050A, B, C\051;)SH
11 /Times-Roman AF
11520 32156 MT
(then)SH
10 /Courier AF
13689 XM
(A)SH
11 /Times-Roman AF
14564 XM
(and)SH
10 /Courier AF
16427 XM
(B)SH
11 /Times-Roman AF
17302 XM
(and)SH
10 /Courier AF
19165 XM
(C)SH
11 /Times-Roman AF
20040 XM
(get dragged in along with)SH
10 /Courier AF
31557 XM
(E)SH
11 /Times-Roman AF
(, and you can say)SH
10 /Courier AF
40037 XM
(A)SH
11 /Times-Roman AF
40912 XM
(just as)SH
11520 33533 MT
(well as)SH
10 /Courier AF
14880 XM
(E)SH
11 /Times-Roman AF
(.)SH
11520 35584 MT
(When you import the name of a record type, you can then use that name as a)SH
11520 36961 MT
(context for talking about any of its fields.  For instance, suppose the)SH
11520 38338 MT
(definition of)SH
10 /Courier AF
17264 XM
(TimeZone)SH
11 /Times-Roman AF
22339 XM
(in the)SH
10 /Courier AF
25089 XM
(Time)SH
11 /Times-Roman AF
27764 XM
(interface says:)SH
10 /Courier AF
14016 39993 MT
(TYPE)SH
16416 41024 MT
(TimeZone = RECORD)SH
18816 42055 MT
(minutesWest :)
600 W( INTEGER;)SH
18816 43086 MT
(dstAlgorithm : INTEGER;)SH
16416 44117 MT
(END;)SH
11 /Times-Roman AF
11520 45903 MT
(If you do:)SH
10 /Courier AF
14016 47558 MT
(FROM Time IMPORT TimeZone;)SH
14016 48589 MT
(VAR)SH
16416 49620 MT
(x : TimeZone;)SH
11 /Times-Roman AF
11520 51406 MT
(you can then talk about)SH
10 /Courier AF
22059 XM
(x.minutesWest)SH
11 /Times-Roman AF
30134 XM
(with no further ado.)SH
12 SS 
11520 55687 MT
(2.7. Declaration versus Import)SH
11 SS 
11520 57728 MT
(When you import from another module, you get only the identifiers it)SH
11520 59105 MT
(declares, not the ones it imports.)SH
11520 61156 MT
(So when you are writing a definition module, if you want to pass a constant)SH
11520 62533 MT
(or type identifier on to people who import you, you must use the form:)SH
10 /Courier AF
14016 64188 MT
(IMPORT M;)SH
14016 65219 MT
(CONST)SH
16416 66250 MT
(W = M.W;)SH
14016 67281 MT
(TYPE)SH
16416 68312 MT
(X = M.X;)SH
11 /Times-Roman AF
11520 70363 MT
(You cannot pass a variable or procedure identifier through to another)SH
11520 71740 MT
(module.)SH
ES
%%Page: 13 14
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Declaration versus Import)SH
46880 XM
(13)SH
12 /Times-Roman AF
13680 8023 MT
(2.8.)SH
11 /Courier AF
15780 XM
(WITH)SH
12 /Times-Roman AF
18720 XM
(Statements)SH
11 SS 
13680 10074 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 11729 MT
(statement = ...)SH
22176 12760 MT
(| WITH designator DO statements END)SH
13680 15377 MT
(WITH)SH
11 /Times-Roman AF
16355 XM
(statements are useful for filling up records.  Suppose for example that I)SH
13680 16754 MT
(have:)SH
10 /Courier AF
16176 18409 MT
(TYPE)SH
18576 19440 MT
(P = POINTER TO R;)SH
18576 20471 MT
(R = RECORD)SH
20976 21502 MT
(key :)
1200 W( INTEGER;)SH
20976 22533 MT
(left :)
600 W( P;)SH
20976 23564 MT
(right : P;)SH
18576 24595 MT
(END;)SH
16176 26657 MT
(VAR)SH
18576 27688 MT
(r : R;)SH
11 /Times-Roman AF
13680 29474 MT
(Then the usual way of talking about the fields of r is to call them)SH
10 /Courier AF
42427 XM
(r.key)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
13680 30851 MT
(r.left)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
19693 XM
(r.right)SH
11 /Times-Roman AF
(. In)
275 W( a)SH
10 /Courier AF
26672 XM
(WITH)SH
11 /Times-Roman AF
29347 XM
(statement, however, I can talk about them)SH
13680 32228 MT
(unqualified:)SH
10 /Courier AF
16176 33883 MT
(WITH r DO)SH
18576 34914 MT
(key :=)
1200 W( 0;)SH
18576 35945 MT
(left :=)
600 W( NIL;)SH
18576 36976 MT
(right := NIL;)SH
16176 38007 MT
(END;)SH
11 /Times-Roman AF
13680 40058 MT
(Wirth says that the)SH
10 /Courier AF
22234 XM
(WITH)SH
11 /Times-Roman AF
24909 XM
(statement:)SH
10 SS 
15680 41849 MT
(specifies a record variable and a statement sequence.  In these statements)SH
15680 42954 MT
(the qualification of field identifiers may be omitted, if they are to refer to)SH
15680 44059 MT
(the variable specified in the with clause.  If the designator denotes a)SH
15680 45164 MT
(component of a structured variable, the selector is evaluated once \050before)SH
15680 46269 MT
(the statement sequence\051.  The with statement opens a new scope.)SH
11 SS 
13680 48320 MT
(The point is that bit about ``the selector is evaluated once.''  Continuing the)SH
13680 49697 MT
(example above:)SH
10 /Courier AF
16176 51352 MT
(VAR)SH
18576 52383 MT
(a : ARRAY [1..10] OF R;)SH
18576 53414 MT
(i : [1..10];)SH
16176 54445 MT
(BEGIN)SH
18576 55476 MT
(i := 3;)SH
18576 56507 MT
(WITH a[i] DO)SH
20976 57538 MT
(IO.WriteF\050IO.output, "%d\134n", key\051;)SH
20976 58569 MT
(INC\050i\051;)SH
20976 59600 MT
(IO.WriteF\050IO.output, "%d\134n", key\051;)SH
18576 60631 MT
(END;)SH
11 /Times-Roman AF
13680 62417 MT
(The second occurrence of)SH
10 /Courier AF
25282 XM
(key)SH
11 /Times-Roman AF
27357 XM
(has the same value as the first; the)SH
10 /Courier AF
42691 XM
(i)SH
11 /Times-Roman AF
43566 XM
(got)SH
13680 63794 MT
(evaluated at the top of the)SH
10 /Courier AF
25348 XM
(WITH)SH
11 /Times-Roman AF
28023 XM
(and no amount of incrementing or)SH
13680 65171 MT
(decrementing thereafter makes the slightest bit of difference.)SH
13680 67222 MT
(See the style note on)SH
10 /Courier AF
23059 XM
(WITH)SH
11 /Times-Roman AF
25734 XM
(statements, Section 21.6, page 133.)SH
ES
%%Page: 14 15
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(14)SH
35471 XM
(Names and Name Scope)SH
12 /Times-Roman AF
11520 8023 MT
(2.9. Nested Modules)SH
11 SS 
11520 10074 MT
(When you declare a nested module, the module name is available to the)SH
11520 11451 MT
(surrounding scope.  By using qualified names, you can access all of the)SH
11520 12828 MT
(identifiers that the module exports.  If a nested module uses unqualified)SH
11520 14205 MT
(export, then all of its exported identifiers are available directly:)SH
10 /Courier AF
14016 15860 MT
(MODULE Outer;)SH
16416 16891 MT
(MODULE Inner1;)SH
18816 17922 MT
(EXPORT a, b, c;)SH
18816 18953 MT
(VAR a, b, c : INTEGER;)SH
16416 19984 MT
(END Inner1;)SH
16416 22046 MT
(MODULE Inner2;)SH
18816 23077 MT
(EXPORT QUALIFIED x, y, z;)SH
18816 24108 MT
(VAR x, y, z : BOOLEAN;)SH
16416 25139 MT
(END Inner2;)SH
14016 26170 MT
(BEGIN)SH
16416 27201 MT
(a := 3;)
SH( \050*)
7800 W( This is okay *\051)SH
16416 28232 MT
(Inner1.b := 1990;)
SH( \050*)
1800 W( so is this *\051)SH
16416 29263 MT
(x := FALSE;)
SH( \050*)
5400 W( This isn't allowed *\051)SH
16416 30294 MT
(Inner2.z := TRUE;)
SH( \050*)
1800 W( but this is *\051)SH
14016 31325 MT
(END Outer.)SH
11 /Times-Roman AF
11520 33376 MT
(See Section 14.5, page 76 for more information about nested modules.)SH
ES
%%Page: 15 16
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(15)SH
14 /Times-Roman AF
19909 11760 MT
(3. Constants and Constant Expressions)SH
11 SS 
13680 15249 MT
(For the ``types'' of constants, see Section 16.3, page 88.  For type-checking)SH
13680 16626 MT
(involving constants, see Chapter 16, page 87.)SH
12 SS 
13680 20907 MT
(3.1. Constant Expressions)SH
11 SS 
13680 22958 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 24613 MT
(ConstExpr =)
3600 W( SimpleConstExpr [relation SimpleConstExpr])SH
16176 25644 MT
(SimpleConstExpr = ["+" | "-"] ConstTerm {AddOperator ConstTerm})SH
16176 26675 MT
(ConstTerm =)
3600 W( ConstFactor {MulOperator ConstFactor})SH
16176 27706 MT
(ConstFactor =)
2400 W( number)SH
25776 28737 MT
(| octalChar)SH
25776 29768 MT
(| string)SH
25776 30799 MT
(| ConstSet)SH
25776 31830 MT
(| qualident [ConstParameters])SH
25776 32861 MT
(| "\050" ConstExpr "\051")SH
25776 33892 MT
(| NOT ConstFactor)SH
16176 34923 MT
(ConstSet =)4200 W
19176 35954 MT
([qualident] "{" [ConstElement {"," ConstElement}] "}")SH
16176 36985 MT
(ConstElement =)
1800 W( ConstExpr [".." ConstExpr])SH
16176 38016 MT
(ConstParameters = "\050" [ConstExpr {"," ConstExpr}] "\051")SH
11 /Times-Roman AF
13680 40633 MT
(Lots of declarations in Modula-2 require constant expressions, so you need to)SH
13680 42010 MT
(know how to construct one.  The class of constant expressions is a restricted)SH
13680 43387 MT
(set of all expressions, which the compiler is able to evaluate at compile time.)SH
13680 45315 MT
(The simplest kinds of constant expressions are constants:)SH
6 /Symbol AF
15879 47266 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Literal numbers are constants.  See Section 1.3, page 4.)SH
6 /Symbol AF
15879 49194 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Literal strings are constants.  See Section 1.5, page 5.)SH
6 /Symbol AF
15879 51122 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Elements of enumerations are constants.  \050)SH
10 /Courier AF
(CHAR)SH
11 /Times-Roman AF
37768 XM
(and)SH
10 /Courier AF
39631 XM
(BOOLEAN)SH
11 /Times-Roman AF
16430 52499 MT
(are supplied enumerations; their elements are constants.\051)SH
6 /Symbol AF
15879 54427 MT
(\267)SH
10 /Courier AF
16430 XM
(NIL)SH
11 /Times-Roman AF
18505 XM
(is a constant.)SH
6 /Symbol AF
15879 56355 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Procedure names are constants.  \050A procedure name followed by)SH
16430 57732 MT
(parentheses is a procedure call, which is entirely different.\051)SH
6 /Symbol AF
15879 59783 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Literal sets are constants.  You write a literal set by writing the)SH
16430 61160 MT
(name of the set type followed by ``)SH
10 /Courier AF
({)SH
11 /Times-Roman AF
('' followed by a list of set)SH
16430 62537 MT
(elements followed by ``)SH
10 /Courier AF
(})SH
11 /Times-Roman AF
(''. If)
275 W( the set type is the supplied type)SH
10 /Courier AF
16430 63914 MT
(BITSET)SH
11 /Times-Roman AF
(, you can omit its name.  You can specify a consecutive)SH
16430 65291 MT
(range of set elements by writing the first element of the range,)SH
16430 66668 MT
(followed by ``)SH
10 /Courier AF
(..)SH
11 /Times-Roman AF
('' \050pronounced ``dot-dot''\051, followed by the last)SH
16430 68045 MT
(element of the range.  Examples:)SH
10 /Courier AF
18926 69700 MT
(ASCII.CharSet {"0".."9", "A".."Z"};)SH
18926 70731 MT
({0..SYSTEM.BITSPERWORD-1};)SH
ES
%%Page: 16 17
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(16)SH
30079 XM
(Constants and Constant Expressions)SH
11 /Times-Roman AF
11520 7955 MT
(You can apply these operators \050subject to type constraints described in)SH
11520 9332 MT
(Section 8.2, page 44 and Section 16.5, page 90\051 to constant expressions and)SH
11520 10709 MT
(still come up with constant expressions:)SH
14540 12660 MT
(the relations)SH
10 /Courier AF
15640 13856 MT
(= # <> < > <= >= IN)600 W
11 /Times-Roman AF
14540 15052 MT
(the unary operators)SH
10 /Courier AF
15640 16248 MT
(+ - NOT ~)600 W
11 /Times-Roman AF
14540 17444 MT
(the add \050binary infix\051 operators)SH
10 /Courier AF
15640 18640 MT
(+ - OR)600 W
11 /Times-Roman AF
14540 19836 MT
(the mul \050binary infix\051 operators)SH
10 /Courier AF
15640 21032 MT
(* / DIV MOD AND &)600 W
11 /Times-Roman AF
11520 23083 MT
(You can apply these supplied procedures \050subject to type constraints)SH
11520 24460 MT
(described in Chapter 13, page 63\051 to constant expressions and still come up)SH
11520 25837 MT
(with constant expressions:)SH
10 /Courier AF
14540 27657 MT
(ABS)SH
14540 28853 MT
(CAP)SH
14540 30049 MT
(CHR)SH
14540 31245 MT
(FIRST)SH
14540 32441 MT
(FLOAT)SH
14540 33637 MT
(HIGH)SH
11 /Times-Roman AF
27140 XM
(\050with fixed-size arrays\051)SH
10 /Courier AF
14540 34833 MT
(LAST)SH
14540 36029 MT
(LONGFLOAT)SH
14540 37225 MT
(LOW)SH
14540 38421 MT
(MIN)SH
14540 39617 MT
(MAX)SH
14540 40813 MT
(NUMBER)SH
11 /Times-Roman AF
27140 XM
(\050with fixed-size arrays\051)SH
10 /Courier AF
14540 42009 MT
(ODD)SH
14540 43205 MT
(ORD)SH
14540 44401 MT
(TRUNC)SH
14540 45597 MT
(VAL)SH
14540 46793 MT
(SYSTEM.BITSIZE)SH
11 /Times-Roman AF
27140 XM
(\050except open and subarrays\051)SH
10 /Courier AF
14540 47989 MT
(SYSTEM.TBITSIZE)SH
14540 49185 MT
(SYSTEM.BYTESIZE)SH
11 /Times-Roman AF
27140 XM
(\050except open and subarrays\051)SH
10 /Courier AF
14540 50381 MT
(SYSTEM.TBYTESIZE)SH
14540 51577 MT
(SYSTEM.SIZE)SH
11 /Times-Roman AF
27140 XM
(\050except open and subarrays\051)SH
10 /Courier AF
14540 52773 MT
(SYSTEM.TSIZE)SH
14540 53969 MT
(SYSTEM.WORDSIZE)SH
11 /Times-Roman AF
27140 XM
(\050except open and subarrays\051)SH
10 /Courier AF
14540 55165 MT
(SYSTEM.TWORDSIZE)SH
11 /Times-Roman AF
11520 57216 MT
(You can apply a type transfer to a constant expression and still come up with)SH
11520 58593 MT
(a constant expression.)SH
/Times-Bold SF
11520 60644 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Constant functions in constant expressions are non-standard in)SH
11520 62021 MT
(older editions of Wirth's book, but seem to be allowed in the Third Edition.)SH
11520 63398 MT
(Type transfers in constant expressions seem to be allowed as well.)SH
11520 65449 MT
(Here are some consequences of the rules we've just enunciated:)SH
6 /Symbol AF
13719 67400 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(The only pointer-valued constant expression is)SH
10 /Courier AF
35104 XM
(NIL)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
13719 69328 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(There are no array-valued or record-valued constant expressions.)SH
ES
%%Page: 17 18
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Constant Expressions)SH
46880 XM
(17)SH
12 /Times-Roman AF
13680 8023 MT
(3.2. Declaring Constants)SH
11 SS 
13680 10074 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 11729 MT
(declaration = ...)SH
23376 12760 MT
(| CONST {ident "=" ConstExpr ";"})SH
11 /Times-Roman AF
13680 15377 MT
(A constant declaration defines a constant:)SH
10 /Courier AF
16176 17032 MT
(CONST)SH
18576 18063 MT
(HashTableEntries = 200;)SH
18576 19094 MT
(Limit =)
1200 W( 2*N -1;)SH
18576 20125 MT
(Digits =)
600 W( CharSet {"0".."9"};)SH
18576 21156 MT
(AllBits = {0..SYSTEM.BITSPERWORD-1};)SH
18576 22187 MT
(Message = "Hello, world.\134n")SH
11 /Times-Roman AF
13680 24238 MT
(There's a style note about declaring constants in Section 21.7, page 133.)SH
13680 26289 MT
(Declaring an enumeration type implicitly declares the constants that are)SH
13680 27666 MT
(elements of the type.  The type declaration)SH
10 /Courier AF
16176 29321 MT
(TYPE)SH
18576 30352 MT
(Meals = \050Breakfast, Lunch, Dinner\051;)SH
11 /Times-Roman AF
13680 32138 MT
(declares the constants)SH
10 /Courier AF
23545 XM
(Breakfast)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
29495 XM
(Lunch)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
34908 XM
(Dinner)SH
11 /Times-Roman AF
38783 XM
(\050which in turn)SH
13680 33515 MT
(makes them available for use in constant expressions\051.)SH
ES
%%Page: 18 19
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(18)SH
30079 XM
(Constants and Constant Expressions)SH
ES
%%Page: 19 20
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(19)SH
14 /Times-Roman AF
25705 11760 MT
(4. Supplied Types)SH
11 SS 
13680 15249 MT
(The point of a type is to define the structure of variables of that type, to limit)SH
13680 16626 MT
(the values that variables of that type can assume, and to limit the operations)SH
13680 18003 MT
(that can be applied to variables of that type.)SH
13680 19931 MT
(Modula-2 defines several supplied types, which are described in this chapter.)SH
13680 21308 MT
(The language also defines a few special types in the pseudo-module)SH
10 /Courier AF
43827 XM
(SYSTEM)SH
11 /Times-Roman AF
(,)SH
13680 22685 MT
(described in Section 15.1, page 79.  All other types are constructed with the)SH
13680 24062 MT
(type-constructors described in Chapter 5, page 21.)SH
13680 26113 MT
(Complete list of the supplied types:)SH
10 /Courier AF
16700 27933 MT
(BITSET)SH
32290 XM
(LONGREAL)SH
16700 29129 MT
(BOOLEAN)SH
32290 XM
(PROC)SH
16700 30325 MT
(CARDINAL)SH
32290 XM
(REAL)SH
16700 31521 MT
(CHAR)SH
32290 XM
(UNSIGNED)SH
16700 32717 MT
(INTEGER)SH
11 /Times-Roman AF
13680 35964 MT
(For details on the physical representation of each type, see Section 18.2, page)SH
13680 37341 MT
(98.)SH
12 SS 
13680 41622 MT
(4.1. Supplied Numeric Types)SH
10 /Courier AF
13680 43663 MT
(INTEGER)SH
11 /Times-Roman AF
22480 XM
(Signed interpretation of a word.  For us,)SH
9 SS 
32966 44521 MT
(31)SH
10 /Courier AF
22480 44884 MT
(FIRST\050INTEGER\051)SH
11 /Times-Roman AF
31155 XM
(= -2)SH
34141 XM
(= -2,147,483,648 and)SH
9 SS 
32000 45742 MT
(31)SH
10 /Courier AF
22480 46105 MT
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
30555 XM
(= 2)SH
33175 XM
(- 1 = 2,147,483,647.)SH
10 /Courier AF
13680 48056 MT
(CARDINAL)SH
11 /Times-Roman AF
22480 XM
(The subrange)SH
10 /Courier AF
28710 XM
([0..LAST\050INTEGER\051])SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
40335 XM
(CARDINAL)SH
11 /Times-Roman AF
45410 XM
(is)SH
22480 49252 MT
(compatible \050see Section 16.5.1, page 90\051 with)SH
10 /Courier AF
42886 XM
(INTEGER)SH
11 /Times-Roman AF
22480 50448 MT
(and)SH
10 /Courier AF
24343 XM
(UNSIGNED)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 52399 MT
(UNSIGNED)SH
11 /Times-Roman AF
22480 XM
(Unsigned interpretation of a word.  For us,)SH
9 SS 
45458 53257 MT
(32)SH
10 /Courier AF
22480 53620 MT
(FIRST\050UNSIGNED\051)SH
11 /Times-Roman AF
31755 XM
(= 0 and)SH
10 /Courier AF
35338 XM
(LAST\050UNSIGNED\051)SH
11 /Times-Roman AF
44013 XM
(= 2)SH
46358 XM
(-1)SH
22480 54816 MT
(= 4,294,967,295.)SH
10 /Courier AF
30525 XM
(UNSIGNED)SH
11 /Times-Roman AF
35600 XM
(is not compatible \050see)SH
22480 56012 MT
(Section 16.5.1, page 90\051 with)SH
10 /Courier AF
35678 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 57963 MT
(REAL)SH
11 /Times-Roman AF
22480 XM
(Floating point number.  See Section 18.2.6, page 99 for)SH
22480 59159 MT
(an explanation of how real-number types are)SH
22480 60355 MT
(implemented.)SH
10 /Courier AF
13680 62306 MT
(LONGREAL)SH
11 /Times-Roman AF
22480 XM
(Double-precision floating point number.  See Section)SH
22480 63502 MT
(18.2.7, page 100 for an explanation of how real-number)SH
22480 64698 MT
(types are implemented.)SH
/Times-Bold SF
13680 66649 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(Standard Modula-2 provides the type)SH
10 /Courier AF
35616 XM
(CARDINAL)SH
11 /Times-Roman AF
40691 XM
(as an unsigned)SH
13680 68026 MT
(interpretation of an entire word, and)SH
10 /Courier AF
29837 XM
(CARDINAL)SH
11 /Times-Roman AF
34912 XM
(is not compatible with)SH
10 /Courier AF
13680 69403 MT
(INTEGER)SH
11 /Times-Roman AF
(. WRL)
275 W( Modula-2's)SH
10 /Courier AF
26831 XM
(UNSIGNED)SH
11 /Times-Roman AF
31906 XM
(has these semantics instead.)SH
ES
%%Page: 20 21
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(20)SH
39134 XM
(Supplied Types)SH
12 /Times-Roman AF
11520 8023 MT
(4.2. Other Supplied Types)SH
10 /Courier AF
11520 10064 MT
(BITSET)SH
11 /Times-Roman AF
20320 XM
(The set)SH
10 /Courier AF
23802 XM
(SET OF [0..SYSTEM.BITSPERWORD-1])SH
11 /Times-Roman AF
(,)SH
20320 11260 MT
(which fits in one word.  When you're writing a)SH
10 /Courier AF
41305 XM
(BITSET)SH
11 /Times-Roman AF
20320 12456 MT
(constructor, you're allowed to omit the type name)SH
10 /Courier AF
20320 13652 MT
(BITSET)SH
11 /Times-Roman AF
24195 XM
(before the curly bracket:)SH
10 /Courier AF
22816 15307 MT
({3,7,9})SH
11 /Times-Roman AF
20320 17093 MT
(is equivalent to:)SH
10 /Courier AF
22816 18748 MT
(BITSET {3,7,9})SH
11520 20699 MT
(BOOLEAN)SH
11 /Times-Roman AF
20320 XM
(The enumeration)SH
10 /Courier AF
28078 XM
(\050FALSE, TRUE\051)SH
11 /Times-Roman AF
(. So)275 W
10 /Courier AF
22816 22354 MT
(ORD\050FALSE\051 = 0)SH
22816 23385 MT
(ORD\050TRUE\051 =)
600 W( 1)SH
11520 25336 MT
(CHAR)SH
11 /Times-Roman AF
20320 XM
(The character set provided by the implementation \050which)SH
20320 26532 MT
(Wirth calls the ``used computer system''; I like the)SH
20320 27728 MT
(phrase\051-)SH
23822 XM
(-)SH
24088 XM
(-256 of them for us.  0 to 127 are the ASCII)SH
20320 28924 MT
(character set.)SH
10 /Courier AF
26670 XM
(CHAR)SH
11 /Times-Roman AF
29345 XM
(behaves like an enumeration type)SH
20320 30120 MT
(with oddly-named constants.  The)SH
10 /Courier AF
35534 XM
(ASCII)SH
11 /Times-Roman AF
38809 XM
(interface)SH
20320 31316 MT
(contains constant definitions for all of the ASCII control)SH
20320 32512 MT
(characters.)SH
10 /Courier AF
11520 34463 MT
(PROC)SH
11 /Times-Roman AF
20320 XM
(The parameterless procedure type)SH
10 /Courier AF
35466 XM
(PROCEDURE\050\051)SH
11 /Times-Roman AF
(.)SH
12 SS 
11520 38744 MT
(4.3. Kinds of Supplied Types)SH
11 SS 
11520 40785 MT
(Types fall into four catagories: a type can be numeric or non-numeric, and)SH
11520 42162 MT
(independently from this a type can be ordinal or non-ordinal.)SH
11520 44090 MT
(A numeric type represents a set of numbers on which arithmetic and)SH
11520 45467 MT
(comparison operations are defined.  The)SH
10 /Courier AF
29509 XM
(INTEGER)SH
11 /Times-Roman AF
33984 XM
(and)SH
10 /Courier AF
35847 XM
(UNSIGNED)SH
11 /Times-Roman AF
40922 XM
(types, and)SH
11520 46844 MT
(subranges of these types, are subsets of the set of all integers.  The)SH
10 /Courier AF
41026 XM
(REAL)SH
11 /Times-Roman AF
43701 XM
(and)SH
10 /Courier AF
11520 48221 MT
(LONGREAL)SH
11 /Times-Roman AF
16595 XM
(types are approximations to the set of real numbers.)SH
11520 50149 MT
(An ordinal type has an explicit or implicit integer representation, upon which)SH
11520 51526 MT
(successor \050)SH
10 /Courier AF
(INC)SH
11 /Times-Roman AF
(\051, predecessor \050)SH
10 /Courier AF
(DEC)SH
11 /Times-Roman AF
(\051, and comparison operations are defined.)SH
11520 52903 MT
(Numeric ordinal types have an explicit integer representation.  Non-numeric)SH
11520 54280 MT
(ordinal types \050)SH
10 /Courier AF
(CHAR)SH
11 /Times-Roman AF
(, enumerations, and subranges of these types\051 have an)SH
11520 55657 MT
(implicit integer representation; the supplied procedures)SH
10 /Courier AF
36080 XM
(ORD)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
38430 XM
(CHR)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
42643 XM
(VAL)SH
11 /Times-Roman AF
11520 57034 MT
(can be used to convert to and from this underlying representation.)SH
11520 59085 MT
(Here are the kinds of the supplied types.  Every time we add a type)SH
11520 60462 MT
(constructor we'll explain where it fits into this classification:)SH
10 /Courier AF
21120 62117 MT
(numeric non-numeric)6600 W
11520 63148 MT
(--------------------------------------------------------------)SH
11520 64179 MT
(ordinal INTEGER)
4800 W( BOOLEAN)6600 W
21120 65210 MT
(CARDINAL CHAR)6000 W
21120 66241 MT
(UNSIGNED)SH
11520 68303 MT
(non-ordinal REAL)
2400 W( BITSET)8400 W
21120 69334 MT
(LONGREAL PROC)6000 W
ES
%%Page: 21 22
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(21)SH
14 /Times-Roman AF
24577 11760 MT
(5. Constructing Types)SH
12 SS 
13680 16041 MT
(5.1. The Type Constructors)SH
11 SS 
13680 18092 MT
(To create your own types, you use type constructors.  In EBNF:)SH
10 /Courier AF
16176 19747 MT
(type = qualident)SH
19176 20778 MT
(| EnumerationType)SH
19176 21809 MT
(| SubrangeType)SH
19176 22840 MT
(| FixedArrayType)SH
19176 23871 MT
(| DynamicArrayType)SH
19176 24902 MT
(| OpenArrayType)SH
19176 25933 MT
(| SubarrayType)SH
19176 26964 MT
(| RecordType)SH
19176 27995 MT
(| SetType)SH
19176 29026 MT
(| PointerType)SH
19176 30057 MT
(| ProcedureType)SH
19176 31088 MT
(| RepresentationType)SH
11 /Times-Roman AF
13680 33705 MT
(Opaque types don't show up here; see Section 14.3, page 75.  The type)SH
13680 35082 MT
(constructors)SH
10 /Courier AF
19331 XM
(@SIZE)SH
11 /Times-Roman AF
22606 XM
(and)SH
10 /Courier AF
24469 XM
(@ALIGN)SH
11 /Times-Roman AF
28344 XM
(are described in Section 18.3, page 104.)SH
12 SS 
13680 39363 MT
(5.2. Declaring Types)SH
11 SS 
13680 41414 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 43069 MT
(declaration = ...)SH
23376 44100 MT
(| TYPE {ident "=" type ";"})SH
11 /Times-Roman AF
13680 46717 MT
(Each occurrence of a type constructor produces a new type.  For example:)SH
10 /Courier AF
16176 48372 MT
(TYPE)SH
18576 49403 MT
(TypeA = ARRAY [0..3] OF INTEGER;)SH
18576 50434 MT
(TypeB = ARRAY [0..3] OF INTEGER;)SH
16176 51465 MT
(VAR)SH
18576 52496 MT
(instanceA : TypeA;)SH
18576 53527 MT
(instanceB : TypeB;)SH
16176 54558 MT
(BEGIN)SH
18576 55589 MT
(instanceB := instanceA;)
SH( \050*)
1800 W( illegal *\051)SH
11 /Times-Roman AF
13680 57375 MT
(The assignment is illegal because)SH
10 /Courier AF
28679 XM
(TypeA)SH
11 /Times-Roman AF
31954 XM
(and)SH
10 /Courier AF
33817 XM
(TypeB)SH
11 /Times-Roman AF
37092 XM
(are different types.  One)SH
13680 58752 MT
(feels, ``But they're the same.''  But they're not.  So you have to give a name)SH
13680 60129 MT
(to any constructed type that you want to use more than once.)SH
13680 62180 MT
(Normally, you define a name for a type with a declaration of the form:)SH
10 /Courier AF
16176 63835 MT
(TYPE)SH
18576 64866 MT
(name = type;)SH
11 /Times-Roman AF
13680 66652 MT
(If the right-hand side is a type name, the name on the left-hand side is just a)SH
13680 68029 MT
(synonym for that type; the two names can be used interchangeably.  If the)SH
13680 69406 MT
(right-hand side is a type constructor, the name on the left-hand side names a)SH
13680 70783 MT
(new type.)SH
ES
%%Page: 22 23
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(22)SH
37303 XM
(Constructing Types)SH
12 /Times-Roman AF
11520 8023 MT
(5.3. Subranges)SH
11 SS 
11520 10074 MT
(Syntax in EBNF:)SH
10 /Courier AF
14016 11729 MT
(SubrangeType = [qualident] "[" ConstExpr ".." ConstExpr "]")SH
11 /Times-Roman AF
11520 14346 MT
(You can make a new type that is a subrange of an ordinal type by specifying)SH
11520 15723 MT
(the lowest and the highest value in the subrange:)SH
10 /Courier AF
14016 17378 MT
(TYPE)SH
16416 18409 MT
(Index =)
1200 W( [0..N-1];)SH
16416 19440 MT
(Cap =)
2400 W( ["A".."Z"];)SH
16416 20471 MT
(Workday = [Monday..Friday];)SH
16416 21502 MT
(Showdog = [FIRST\050Dog\051..Poodle];)SH
11 /Times-Roman AF
11520 23553 MT
(The lower bound must not be greater than the upper bound, so empty)SH
11520 24930 MT
(subranges are illegal.  Both bounds must be constant expressions.)SH
11520 26858 MT
(The declared limits of a numeric subrange determine the basetype of the)SH
11520 28235 MT
(subrange. If)
275 W( the lower limit is negative, the basetype is)SH
10 /Courier AF
36111 XM
(INTEGER)SH
11 /Times-Roman AF
(. If)
275 W( the)SH
11520 29612 MT
(upper limit is larger then)SH
10 /Courier AF
22671 XM
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
(, the basetype is)SH
10 /Courier AF
37772 XM
(UNSIGNED)SH
11 /Times-Roman AF
(. If)275 W
11520 30989 MT
(neither condition is true, the basetype is both)SH
10 /Courier AF
31531 XM
(INTEGER)SH
11 /Times-Roman AF
36006 XM
(and)SH
10 /Courier AF
37869 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, and)SH
11520 32366 MT
(the subrange is compatible with both types.  If both conditions are true the)SH
11520 33743 MT
(compiler reports an error, as the subrange is too large to fit into a word.)SH
/Times-Bold SF
11520 35671 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(In standard Modula-2, if the upper limit is not greater that)SH
10 /Courier AF
11520 37048 MT
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
19595 XM
(then the subrange has a basetype of)SH
10 /Courier AF
35446 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
11520 39099 MT
(You can override the default basetype by specifying a basetype for a)SH
11520 40476 MT
(subrange:)SH
10 /Courier AF
14016 42131 MT
(TYPE)SH
16416 43162 MT
(SmallUnsigned = UNSIGNED [0..255];)SH
11 /Times-Roman AF
11520 45213 MT
(The resulting type is an ordinal type, numeric if the basetype is numeric,)SH
11520 46590 MT
(non-numeric if the basetype is non-numeric:)SH
10 /Courier AF
21120 48245 MT
(numeric non-numeric)6600 W
11520 49276 MT
(--------------------------------------------------------------)SH
11520 50307 MT
(ordinal INTEGER)
4800 W( BOOLEAN)6600 W
21120 51338 MT
(CARDINAL CHAR)6000 W
21120 52369 MT
(UNSIGNED non-numeric)
6000 W( subrange)SH
21120 53400 MT
(numeric subrange)SH
11520 55462 MT
(non-ordinal REAL)
2400 W( BITSET)8400 W
21120 56493 MT
(LONGREAL PROC)6000 W
11 /Times-Roman AF
11520 59110 MT
(If runtime checking is enabled, the compiler checks to be sure that any value)SH
11520 60487 MT
(assigned to a variable of subrange type lies within the range bounds.  Such)SH
11520 61864 MT
(runtime checking includes arguments to)SH
10 /Courier AF
29391 XM
(CONST)SH
11 /Times-Roman AF
32666 XM
(and value parameters when)SH
11520 63241 MT
(you call a procedure.)SH
11520 65292 MT
(Style note in Section 21.9, page 134.)SH
ES
%%Page: 23 24
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Subranges)SH
46880 XM
(23)SH
12 /Times-Roman AF
13680 8023 MT
(5.4. Enumerations)SH
11 SS 
13680 10074 MT
(In EBNF:)SH
10 /Courier AF
16176 11729 MT
(EnumerationType =)SH
18576 12760 MT
("\050" EnumerationConst {"," EnumerationConst} "\051")SH
16176 13791 MT
(EnumerationConst = ident ["=" ConstExpr])SH
11 /Times-Roman AF
13680 16408 MT
(An enumeration is a list of identifiers.  These identifiers are used as)SH
13680 17785 MT
(constants. The)
275 W( identifiers are numbered from left to right, starting with 0.)SH
13680 19162 MT
(Because an enumeration always contains at least one identifier, empty)SH
13680 20539 MT
(enumerations are illegal.  For scope rules, see Section 2.4, page 10.)SH
13680 22590 MT
(Examples of constructing enumeration types:)SH
10 /Courier AF
16176 24245 MT
(TYPE)SH
18576 25276 MT
(Color = \050Red, Blue, Yellow\051;)SH
18576 26307 MT
(Suit =)
600 W( \050Club, Diamond, Heart, Spade\051;)SH
11 /Times-Roman AF
13680 28358 MT
(The resulting type is a non-numeric ordinal type.)SH
13680 30286 MT
(Since enumerations are ordinal types, you can use relational operators on)SH
13680 31663 MT
(them, and you can convert to and from the underlying numeric representation)SH
13680 33040 MT
(using the supplied procedures)SH
10 /Courier AF
27060 XM
(ORD)SH
11 /Times-Roman AF
29135 XM
(\050Section 13.2.5, page 67\051 and)SH
10 /Courier AF
42331 XM
(VAL)SH
11 /Times-Roman AF
13680 34417 MT
(\050Section 13.2.7, page 67\051.  For instance:)SH
10 /Courier AF
16176 36072 MT
(TYPE)SH
18576 37103 MT
(Color = \050Red, Green, Blue\051;)SH
16176 38134 MT
(VAR)SH
18576 39165 MT
(c, d : Color;)SH
16176 40196 MT
(BEGIN)SH
18576 41227 MT
(c := Blue;)SH
18576 42258 MT
(d := Red;)SH
18576 43289 MT
(IF c = d THEN IO.WriteF\050IO.output, "Same color.\134n"\051;)SH
18576 44320 MT
(IF c < d THEN IO.WriteF\050IO.output, "Earlier color.\134n"\051;)SH
18576 45351 MT
(IO.WriteF\050IO.output, "Ord of c is %d.\134n", ORD\050c\051\051;)SH
18576 46382 MT
(IO.WriteF\050IO.output, "Color of 1 is %n.\134n", VAL\050Color, 1\051\051;)SH
11 /Times-Roman AF
13680 48433 MT
(You can override the automatic numbering of enumerations by specifying the)SH
13680 49810 MT
(value)SH
10 /Courier AF
16337 XM
(ORD)SH
11 /Times-Roman AF
18412 XM
(should return for any or all enumerated names:)SH
10 /Courier AF
16176 51465 MT
(TYPE)SH
18576 52496 MT
(RGBColor = \050Red = 0ff0000H, Green = 00ff00H, Blue = 0000ffH\051;)SH
18576 53527 MT
(Result = \050Failed = -1, OK\051;)SH
11 /Times-Roman AF
13680 55313 MT
(An enumerated name that doesn't have an ordinal value specified gets a)SH
13680 56690 MT
(value one larger than its predecessor-)SH
29979 XM
(-)SH
30245 XM
(-)SH
10 /Courier AF
(ORD\050OK\051)SH
11 /Times-Roman AF
35086 XM
(= 0 in the example above.)SH
13680 58741 MT
(A non-contiguous enumeration contains \050at least\051 one pair of enumeration)SH
13680 60118 MT
(constants declared in sequential textual order, but the second constant doesn't)SH
13680 61495 MT
(have an ordinal value exactly one larger than the first constant.  You cannot)SH
13680 62872 MT
(use the supplied procedures)SH
10 /Courier AF
26142 XM
(INC)SH
11 /Times-Roman AF
28217 XM
(and)SH
10 /Courier AF
30080 XM
(DEC)SH
11 /Times-Roman AF
32155 XM
(on variables with a non-contiguous)SH
13680 64249 MT
(enumeration basetype.)SH
ES
%%Page: 24 25
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(24)SH
37303 XM
(Constructing Types)SH
11 /Times-Roman AF
11520 7955 MT
(If you use)SH
10 /Courier AF
16193 XM
(VAL)SH
11 /Times-Roman AF
18268 XM
(to convert numbers to an enumerated type in which you have)SH
11520 9332 MT
(specified values for the enumeration constants, you should convert only)SH
11520 10709 MT
(numbers that have a corresponding enumeration constant:)SH
10 /Courier AF
14016 12364 MT
(TYPE)SH
16416 13395 MT
(RGBColor = \050Red = 0ff0000H, Green = 00ff00H, Blue = 0000ffH\051;)SH
14016 14426 MT
(VAR)SH
16416 15457 MT
(color : RGBColor;)SH
14016 16488 MT
(BEGIN)SH
16416 17519 MT
(color := VAL\050RGBColor, 0ffH\051;)
SH( \050*)
1800 W( color := Blue *\051)SH
16416 18550 MT
(color := VAL\050RGBColor, 2\051;)
SH( \050*)
3600 W( illegal but undetected *\051)SH
11 /Times-Bold AF
11520 20601 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Specifying enumeration constant values is non-standard.)SH
12 SS 
11520 24882 MT
(5.5. Fixed-Size Arrays)SH
11 SS 
11520 26933 MT
(In EBNF:)SH
10 /Courier AF
14016 28588 MT
(FixedArrayType = ARRAY OrdinalType {"," OrdinalType} OF type)SH
14016 29619 MT
(OrdinalType =)
1800 W( qualident | EnumerationType | SubrangeType)SH
11 /Times-Roman AF
11520 32236 MT
(A fixed-size array consists of a fixed number of elements that are all of the)SH
11520 33613 MT
(same type.  The declaration of the array type specifies the types of the)SH
11520 34990 MT
(elements and the indices.  Each index type must be an ordinal type, but the)SH
11520 36367 MT
(element type can be any type.)SH
11520 38295 MT
(The resulting type is a non-numeric non-ordinal type.)SH
11520 40346 MT
(Examples of constructing fixed-size array types:)SH
10 /Courier AF
14016 42001 MT
(TYPE)SH
16416 43032 MT
(ChildOfTheWeek = ARRAY Week OF Child;)SH
16416 44063 MT
(QueenForADay =)
1200 W( ARRAY Weekday OF Housewife;)SH
16416 45094 MT
(PhoneList =)
3000 W( ARRAY Person, [0..3] OF CHAR;)SH
11 /Times-Roman AF
11520 47145 MT
(A declaration of the form:)SH
10 /Courier AF
14016 48800 MT
(ARRAY T1, T2, ... , Tn OF T)SH
11 /Times-Roman AF
11520 50586 MT
(with)SH
10 /Courier AF
13751 XM
(n)SH
11 /Times-Roman AF
14626 XM
(index types)SH
10 /Courier AF
19942 XM
(T1)SH
11 /Times-Roman AF
21417 XM
(...)SH
10 /Courier AF
22517 XM
(Tn)SH
11 /Times-Roman AF
23992 XM
(is an abbreviation for the construction)SH
10 /Courier AF
14016 52241 MT
(ARRAY T1 OF ARRAY T2 OF ... ARRAY Tn OF T)SH
11 /Times-Roman AF
11520 54027 MT
(In other words, an)SH
10 /Courier AF
19797 XM
(n)SH
11 /Times-Roman AF
(-dimensional matrix.)SH
11520 56078 MT
(To talk about an element of an array, you subscript the array.  You write the)SH
11520 57455 MT
(name of the array followed by ``)SH
10 /Courier AF
([)SH
11 /Times-Roman AF
('' followed by the index of the element)SH
9 SS 
29338 58469 MT
(th)SH
11 SS 
11520 58832 MT
(followed by ``)SH
10 /Courier AF
(])SH
11 /Times-Roman AF
(''; i.e. to talk about the)SH
10 /Courier AF
28738 XM
(i)SH
11 /Times-Roman AF
30313 XM
(element of array)SH
10 /Courier AF
37794 XM
(a)SH
11 /Times-Roman AF
(, write:)SH
10 /Courier AF
14016 60487 MT
(a[i])SH
11 /Times-Roman AF
11520 62538 MT
(For subscripting to type-check, the subscript expression must be assignable)SH
11520 63915 MT
(to a variable of the index type; see Section 16.6, page 93.)SH
11520 65966 MT
(An expression of the form)SH
10 /Courier AF
23341 XM
(a[e1, e2, ... , en])SH
11 /Times-Roman AF
35016 XM
(stands for)SH
10 /Courier AF
11520 67343 MT
(a[e1][e2]...[en])SH
11 /Times-Roman AF
(.)SH
11520 69394 MT
(If runtime checking is enabled, the compiler checks to be sure that any value)SH
11520 70771 MT
(used as an array subscript lies within the bounds of the index type.)SH
ES
%%Page: 25 26
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Fixed-Size Arrays)SH
46880 XM
(25)SH
11 /Times-Roman AF
13680 7955 MT
(To talk about the fourth element of)SH
10 /Courier AF
29351 XM
(offset)SH
11 /Times-Roman AF
(, where:)SH
10 /Courier AF
16176 9610 MT
(TYPE)SH
18576 10641 MT
(Offset = ARRAY [8..12] OF INTEGER;)SH
16176 11672 MT
(VAR)SH
18576 12703 MT
(offset : Offset;)SH
11 /Times-Roman AF
13680 14489 MT
(you say)SH
10 /Courier AF
17346 XM
(offset[11])SH
11 /Times-Roman AF
(, not)SH
10 /Courier AF
25577 XM
(offset[4])SH
11 /Times-Roman AF
(.)SH
13680 16540 MT
(You can assign to an array as a whole as well as to the individual elements.)SH
13680 18468 MT
(We often use the term ``string'' for any array of the form:)SH
10 /Courier AF
16176 20123 MT
(ARRAY OrdinalType OF CHAR)SH
11 /Times-Roman AF
13680 21909 MT
(Such arrays have special properties.  For example, you can assign a literal)SH
13680 23286 MT
(string to a string and you use relational operators on strings.  You can't do)SH
13680 24663 MT
(this with any other kind of array.)SH
12 SS 
13680 28944 MT
(5.6. Open Arrays)SH
11 SS 
13680 30985 MT
(In EBNF:)SH
10 /Courier AF
16176 32640 MT
(OpenArrayType = ARRAY OF {ARRAY OF} qualident)SH
24576 33671 MT
(| ARRAY @NOCOUNT OF qualident)SH
11 /Times-Roman AF
13680 36288 MT
(An open array also consists of elements that are all of the same type, but the)SH
13680 37665 MT
(number of elements is not fixed at compile time.  An open array type can be)SH
13680 39042 MT
(used only to specify the type of a parameter in a procedure heading.)SH
13680 40970 MT
(The declaration of an open array type specifies the number of dimensions)SH
13680 42347 MT
(and the type of the elements.  The type of the indices is always)SH
10 /Courier AF
41569 XM
(CARDINAL)SH
11 /Times-Roman AF
(.)SH
13680 43724 MT
(The lower bound of each index is always 0; the upper bound of each is)SH
13680 45101 MT
(determined at runtime.)SH
13680 47029 MT
(The resulting type is a non-numeric non-ordinal type.)SH
13680 48957 MT
(When you want to write a procedure that operates on arrays of arbitrary)SH
13680 50334 MT
(lengths-)SH
17124 XM
(-)SH
17390 XM
(-for example, to compute the average of an array of numbers, or to)SH
13680 51711 MT
(sort an array of records, or to form the dot product of two arrays of)SH
13680 53088 MT
(numbers-)SH
17734 XM
(-)SH
18000 XM
(-you should declare the formal parameter to be an open array.)SH
13680 55016 MT
(The actual parameter you pass to an open array formal can be a fixed-size)SH
13680 56393 MT
(array, an open array, a dereferenced dynamic array, or a slice of the last)SH
13680 57770 MT
(dimension of any of these; its element type must be the same as the element)SH
13680 59147 MT
(type of the formal parameter.  \050See Section 16.7, page 93.\051)SH
13680 61075 MT
(A procedure can use the supplied procedure)SH
10 /Courier AF
33255 XM
(HIGH)SH
11 /Times-Roman AF
35930 XM
(to determine the upper)SH
13680 62452 MT
(bound of any dimension of an array actually passed to an open array formal.)SH
10 /Courier AF
13680 63829 MT
(HIGH\050a\051)SH
11 /Times-Roman AF
18155 XM
(returns the upper bound of the first dimension;)SH
10 /Courier AF
38929 XM
(HIGH\050a,n\051)SH
11 /Times-Roman AF
44604 XM
(returns)SH
9 SS 
24513 64843 MT
(th)SH
11 SS 
13680 65206 MT
(the upper bound of the)SH
10 /Courier AF
23913 XM
(n)SH
11 /Times-Roman AF
25488 XM
(dimension.)SH
10 /Courier AF
30897 XM
(LOW)SH
11 /Times-Roman AF
32972 XM
(returns 0 when applied to any)SH
13680 66583 MT
(dimension of an open array.)SH
ES
%%Page: 26 27
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(26)SH
37303 XM
(Constructing Types)SH
11 /Times-Roman AF
11520 7955 MT
(Sometimes the supplied procedure)SH
10 /Courier AF
26978 XM
(NUMBER)SH
11 /Times-Roman AF
30853 XM
(is more convenient than)SH
10 /Courier AF
41667 XM
(HIGH)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
11520 9332 MT
(NUMBER\050a\051)SH
11 /Times-Roman AF
17195 XM
(returns the number of elements in the first dimension of the)SH
9 SS 
41016 10346 MT
(th)SH
11 SS 
11520 10709 MT
(actual array;)SH
10 /Courier AF
17260 XM
(NUMBER\050a,n\051)SH
11 /Times-Roman AF
24135 XM
(return the number of elements in the)SH
10 /Courier AF
40416 XM
(n)SH
11 /Times-Roman AF
11520 12086 MT
(dimension. For)
275 W( open arrays,)SH
10 /Courier AF
24381 XM
(NUMBER\050a,n\051 = HIGH\050a,n\051+1)SH
11 /Times-Roman AF
(.)SH
11520 14137 MT
(This \050slow\051 procedure imitates the)SH
10 /Courier AF
26885 XM
(IO.WriteS)SH
11 /Times-Roman AF
32560 XM
(procedure:)SH
10 /Courier AF
14016 15792 MT
(PROCEDURE MyWriteS\050CONST f: IO.File; CONST str : ARRAY OF CHAR\051;)SH
16416 16823 MT
(VAR i : CARDINAL;)SH
14016 17854 MT
(BEGIN)SH
16416 18885 MT
(i := 0;)SH
16416 19916 MT
(WHILE \050i <= HIGH\050str\051\051 AND \050str[i] # ASCII.NUL\051 DO)SH
18816 20947 MT
(IO.WriteC\050f, str[i]\051)SH
18816 21978 MT
(i := i + 1;)SH
16416 23009 MT
(END;)SH
14016 24040 MT
(END MyWriteS;)SH
11 /Times-Roman AF
11520 26091 MT
(This procedure multiplies two 2-dimensional matrices:)SH
10 /Courier AF
14016 27746 MT
(TYPE)SH
16416 28777 MT
(REAL2D = ARRAY OF ARRAY OF REAL;)SH
14016 30839 MT
(PROCEDURE MultiplyMatrices\050CONST a, b : REAL2D;)SH
30216 31870 MT
(VAR c)
1200 W( :)
1800 W( REAL2D\051;)SH
16416 32901 MT
(VAR i, j, k : CARDINAL;)SH
18816 33932 MT
(dotProd : REAL;)SH
14016 34963 MT
(BEGIN)SH
16416 35994 MT
(ASSERT\050NUMBER\050a,1\051 = NUMBER\050c,1\051\051;)SH
16416 37025 MT
(ASSERT\050NUMBER\050a,2\051 = NUMBER\050b,1\051\051;)SH
16416 38056 MT
(ASSERT\050NUMBER\050b,2\051 = NUMBER\050c,2\051\051;)SH
16416 39087 MT
(FOR i := 0 TO HIGH\050c,1\051 DO)SH
18816 40118 MT
(FOR j := 0 TO HIGH\050c,2\051 DO)SH
21216 41149 MT
(dotProd := 0.0;)SH
21216 42180 MT
(FOR k := 0 TO HIGH\050a,2\051 DO)SH
23616 43211 MT
(dotProd := dotProd + \050a[i,k] * b[k,j]\051;)SH
21216 44242 MT
(END;)SH
21216 45273 MT
(c[i,j] := dotProd;)SH
18816 46304 MT
(END;)SH
16416 47335 MT
(END;)SH
14016 48366 MT
(END MultiplyMatrices;)SH
11 /Times-Roman AF
11520 50417 MT
(If runtime checking is enabled, the compiler checks to be sure that any value)SH
11520 51794 MT
(used as an open array subscript lies \050inclusively\051 within 0 and)SH
10 /Courier AF
38921 XM
(HIGH)SH
11 /Times-Roman AF
41596 XM
(of that)SH
11520 53171 MT
(dimension.)SH
11520 55222 MT
(If you are calling a procedure with an open array formal and you are passing)SH
11520 56599 MT
(it an array with each index type starting at 0, then you and the procedure will)SH
11520 57976 MT
(agree on how the array is indexed.  Otherwise, it's up to you to see things)SH
11520 59353 MT
(from the point of view of the procedure you've called.  For instance:)SH
10 /Courier AF
14016 61273 MT
(PROCEDURE Swap\050a : VAR ARRAY OF INTEGER; i, j : INTEGER\051;)SH
14016 62304 MT
(\050* Swap a[i] and a[j] *\051)SH
16416 63335 MT
(VAR t : INTEGER;)SH
14016 64366 MT
(BEGIN)SH
16416 65397 MT
(t := a[i]; a[i] := a[j]; a[j] := t;)SH
14016 66428 MT
(END Swap;)SH
14016 68490 MT
(VAR)SH
16416 69521 MT
(a : ARRAY [1..10] OF INTEGER;)SH
14016 70552 MT
(BEGIN)SH
16416 71583 MT
(Swap\050a, 1, 2\051;)SH
ES
%%Page: 27 28
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Open Arrays)SH
46880 XM
(27)SH
11 /Times-Roman AF
13680 7955 MT
(What happens is that the second and third elements of)SH
10 /Courier AF
37690 XM
(a)SH
11 /Times-Roman AF
38565 XM
(get swapped, not the)SH
13680 9332 MT
(first and second.  The lower bound of an open array parameter is always 0.)SH
13680 11383 MT
(If the element type of an open array formal is)SH
10 /Courier AF
33898 XM
(SYSTEM.WORD)SH
11 /Times-Roman AF
(, then the)SH
13680 12760 MT
(corresponding actual parameter may have any type but its size \050in bits\051 has to)SH
13680 14137 MT
(be divisible by 32.  If the element type of a formal parameter is)SH
10 /Courier AF
13680 15514 MT
(SYSTEM.BYTE)SH
11 /Times-Roman AF
(, then the corresponding actual parameter may have any type)SH
13680 16891 MT
(but its size has to be divisible by 8.)SH
/Courier SF
29661 XM
([[)SH
/Times-Roman SF
31641 XM
(The compiler doesn't check)SH
13680 18268 MT
(alignment or size divisibility by 32 or 8.)SH
/Courier SF
32002 XM
(]])SH
/Times-Roman SF
13680 20196 MT
(The only place you can use an open array type is to declare a procedure)SH
13680 21573 MT
(parameter-)SH
18342 XM
(-)SH
18608 XM
(-you can't declare an open array variable, you can't declare a)SH
13680 22950 MT
(pointer to an open array type, you can't embed open arrays in arrays or)SH
13680 24327 MT
(records, and you can't return an open array as the result of a procedure.)SH
13680 25704 MT
(There are just four ways to get an open array variable:)SH
15880 27655 MT
(1.)SH
16980 XM
(declare an open array parameter to a procedure,)SH
15880 29583 MT
(2.)SH
16980 XM
(dereference a dynamic array \050Section 5.7, page 28\051)SH
15880 31511 MT
(3.)SH
16980 XM
(slice the last dimension of a fixed-size, open, or dynamic array)SH
16980 32888 MT
(\050Section 5.8, page 31\051.)SH
15880 34816 MT
(4.)SH
16980 XM
(create one using the)SH
10 /Courier AF
26020 XM
(DESCRIPTOR)SH
11 /Times-Roman AF
32295 XM
(supplied procedure \050Section)SH
16980 36193 MT
(13.6.1, page 71\051)SH
13680 38244 MT
(There are just four things you can do with an open array variable:)SH
15880 40195 MT
(1.)SH
16980 XM
(subscript it,)SH
15880 42123 MT
(2.)SH
16980 XM
(assign a constant string to it \050if its element type is)SH
10 /Courier AF
39071 XM
(CHAR)SH
11 /Times-Roman AF
(\051,)SH
15880 44051 MT
(3.)SH
16980 XM
(pass it to one of the procedures)SH
10 /Courier AF
30939 XM
(HIGH)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
33889 XM
(NUMBER)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
38039 XM
(LOW)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
16980 45428 MT
(SYSTEM.ADR)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
23530 XM
(SYSTEM.SIZE)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
30680 XM
(SYSTEM.BYTESIZE)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
16980 46805 MT
(SYSTEM.WORDSIZE)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
27721 XM
(SYSTEM.BITSIZE)SH
11 /Times-Roman AF
(,)SH
15880 48733 MT
(4.)SH
16980 XM
(pass it to a procedure whose corresponding formal parameter is)SH
16980 50110 MT
(an open array or a subarray.)SH
13680 52161 MT
(A constant string can be assigned to a the last dimension of an open array of)SH
10 /Courier AF
13680 53538 MT
(CHAR)SH
11 /Times-Roman AF
16355 XM
(variable. After)
275 W( the assignment, only the contents of positions 0)SH
13680 54915 MT
(through n-1 of the variable are defined, where n is the length of the string)SH
13680 56292 MT
(\050including the null terminator\051:)SH
10 /Courier AF
16176 57947 MT
(PROCEDURE ErrorToString\050CONST error  : CARDINAL;)SH
30576 58978 MT
(VAR string)
1200 W( : ARRAY OF CHAR\051;)SH
16176 60009 MT
(BEGIN)SH
18576 61040 MT
(CASE error OF)SH
18576 62071 MT
(| 0 :  string := "No error";)SH
18576 63102 MT
(| 1 :  string := "Warning";)SH
18576 64133 MT
(| 2 :  string := "Fatal error";)SH
18576 65164 MT
(| ELSE string := "Unknown error";)SH
18576 66195 MT
(END;)SH
16176 67226 MT
(END ErrorToString;)SH
ES
%%Page: 28 29
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(28)SH
37303 XM
(Constructing Types)SH
11 /Times-Roman AF
11520 7955 MT
(With this one exception, you cannot use an unsubscripted open array variable)SH
11520 9332 MT
(on either side of an assignment statement:)SH
10 /Courier AF
14016 10987 MT
(TYPE)SH
16416 12018 MT
(Open = ARRAY [0..2] OF INTEGER;)SH
14016 13049 MT
(VAR)SH
16416 14080 MT
(open : Open;)SH
14016 15111 MT
(PROCEDURE P\050a : ARRAY OF INTEGER\051;)SH
14016 16142 MT
(BEGIN)SH
16416 17173 MT
(a[0] := open[0];)
SH( \050*)
1800 W( dandy *\051)SH
16416 18204 MT
(a :=)
1800 W( open;)
SH( \050*)
3600 W( illegal *\051)SH
14016 19235 MT
(END P;)SH
11 /Times-Roman AF
11520 21286 MT
(You can use an open array type constructor in a procedure heading; all other)SH
11520 22663 MT
(types in procedure headings must have names \050identifiers\051.  Therefore this)SH
11520 24040 MT
(procedure heading is OK:)SH
10 /Courier AF
14016 25695 MT
(PROCEDURE Sum\050a : ARRAY OF INTEGER\051 : INTEGER;)SH
11 /Times-Roman AF
11520 27481 MT
(while these similar-looking headings are not OK:)SH
10 /Courier AF
14016 29136 MT
(PROCEDURE Sum10\050a : ARRAY [0..9] OF INTEGER\051 : INTEGER;)SH
14016 30167 MT
(PROCEDURE CountChars\050s : SET OF CHAR\051 : INTEGER;)SH
11 /Times-Roman AF
11520 32218 MT
(See Section 18.4, page 105 for information on)SH
10 /Courier AF
32110 XM
(@NOCOUNT)SH
11 /Times-Roman AF
37185 XM
(open arrays.)SH
/Times-Bold SF
11520 34146 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(In standard Modula-2, open arrays are restricted to one)SH
11520 35523 MT
(dimension, you cannot assign a constant string to an open array of)SH
10 /Courier AF
40877 XM
(CHAR)SH
11 /Times-Roman AF
(, and)SH
11520 36900 MT
(it is unclear if you can use)SH
10 /Courier AF
23341 XM
(SIZE)SH
11 /Times-Roman AF
26016 XM
(or)SH
10 /Courier AF
27207 XM
(SYSTEM.TSIZE)SH
11 /Times-Roman AF
34682 XM
(on an open array.)SH
12 SS 
11520 41181 MT
(5.7. Dynamic Arrays)SH
11 SS 
11520 43222 MT
(In EBNF:)SH
10 /Courier AF
14016 44877 MT
(DynamicArrayType = DYNARRAY [PointerKind] OF {ARRAY OF} type)SH
24216 45908 MT
(| DYNARRAY [PointerKind] @NOCOUNT OF type)SH
14016 46939 MT
(PointerKind =)
3000 W( @PASCAL | @C | @NOCHECK | @NILCHECK | @LOCAL)SH
11 /Times-Roman AF
11520 49556 MT
(A dynamic array consists of elements that are all of the same type, where the)SH
11520 50933 MT
(number of elements is not fixed at compile time.  But unlike an open array)SH
11520 52310 MT
(parameter, which must conform to an existing array, you get to specify the)SH
11520 53687 MT
(number of elements for a dynamic array when you allocate space for it.  The)SH
11520 55064 MT
(declaration of a dynamic array type specifies the number of dimensions and)SH
11520 56441 MT
(the type of the elements.  The lower bound is always 0; the upper bound is)SH
11520 57818 MT
(specified at runtime.)SH
11520 59746 MT
(The resulting type is a non-numeric non-ordinal type.)SH
11520 61797 MT
(Examples of constructing dynamic array types:)SH
10 /Courier AF
14016 63452 MT
(TYPE)SH
16416 64483 MT
(DynString =)
600 W( DYNARRAY OF CHAR;)SH
16416 65514 MT
(Matrix =)
2400 W( DYNARRAY OF ARRAY OF REAL;)SH
16416 66545 MT
(AlmostArgV = DYNARRAY OF DynString;)SH
ES
%%Page: 29 30
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Dynamic Arrays)SH
46880 XM
(29)SH
11 /Times-Roman AF
13680 7955 MT
(A dynamic array is created and accessed as if it were a pointer to an open)SH
13680 9332 MT
(array. To)
275 W( allocate a dynamic array, you use the)SH
10 /Courier AF
34874 XM
(NEW)SH
11 /Times-Roman AF
36949 XM
(procedure to specify)SH
13680 10709 MT
(how many elements each dimension of the array should contain.  These)SH
13680 12086 MT
(lengths are used in subsequent array subscript and runtime checking)SH
13680 13463 MT
(operations.)SH
13680 15391 MT
(You can also assign the supplied constant)SH
10 /Courier AF
32285 XM
(NIL)SH
11 /Times-Roman AF
34360 XM
(to a dynamic array variable:)SH
10 /Courier AF
16176 17046 MT
(VAR)SH
18576 18077 MT
(string1, string2, concatString, nullString : DynString;)SH
18576 19108 MT
(matrix :)
3000 W( Matrix;)SH
18576 20139 MT
(programName : DynString;)SH
18576 21170 MT
(almostArgV :)
600 W( AlmostArgV;)SH
16176 22201 MT
(BEGIN)SH
18576 23232 MT
(nullString := NIL;)SH
18576 24263 MT
(NEW\050concatString, Length\050string1\051 + Length\050string2\051\051;)SH
18576 25294 MT
(NEW\050matrix, m, n\051;)SH
18576 26325 MT
(NEW\050almostArgV, argc\051;)SH
18576 27356 MT
(NEW\050almostArgV^[0], Length\050programName\051\051;)SH
11 /Times-Roman AF
13680 29407 MT
(To release the storage allocated to a dynamic array you use the)SH
10 /Courier AF
41594 XM
(DISPOSE)SH
11 /Times-Roman AF
13680 30784 MT
(procedure. You)
275 W( don't need to provide the dimension lengths.)SH
13680 32712 MT
(Dereferencing a dynamic array produces an open array; all the restrictions)SH
13680 34089 MT
(and capabilities of open array variables \050described immediately above in)SH
13680 35466 MT
(Section 5.6, page 27\051 apply.)SH
13680 37394 MT
(You can use the supplied procedures)SH
10 /Courier AF
30112 XM
(HIGH)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
33062 XM
(LOW)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
37275 XM
(NUMBER)SH
11 /Times-Roman AF
41150 XM
(either directly)SH
13680 38771 MT
(on a dynamic array or on a dereferenced dynamic array; both notations mean)SH
13680 40148 MT
(the same thing.)SH
13680 42076 MT
(If runtime checking is enabled, the compiler checks to be sure that the)SH
13680 43453 MT
(dynamic array pointer is valid, and that any value used as a dynamic array)SH
13680 44830 MT
(subscript lies \050inclusively\051 within 0 and)SH
10 /Courier AF
31340 XM
(HIGH)SH
11 /Times-Roman AF
34015 XM
(of that dimension.)SH
13680 46758 MT
(Assigning a dynamic array to another dynamic array is like assigning a)SH
13680 48135 MT
(pointer to another pointer.  After the assignment both dynamic arrays will)SH
13680 49512 MT
(point to the same data.)SH
13680 51563 MT
(When you create a dynamic array using)SH
10 /Courier AF
31423 XM
(NEW)SH
11 /Times-Roman AF
(, space for the array is allocated)SH
13680 52940 MT
(in the heap.  If you want the space allocated to a dynamic array to exist only)SH
13680 54317 MT
(for the lifetime of the procedure in which it is declared, you declare the array)SH
13680 55694 MT
(to be)SH
10 /Courier AF
16124 XM
(@LOCAL)SH
11 /Times-Roman AF
(. Local)
275 W( dynamic arrays are created with the supplied procedure)SH
10 /Courier AF
13680 57071 MT
(LOCAL)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
16176 58726 MT
(PROCEDURE MungeArrays\050CONST input  : ARRAY OF ARRAY OF REAL;)SH
29376 59757 MT
(VAR output)
1200 W( : ARRAY OF ARRAY OF REAL\051;)SH
18576 60788 MT
(VAR temporary : DYNARRAY @LOCAL OF ARRAY OF REAL;)SH
16176 61819 MT
(BEGIN)SH
18576 62850 MT
(LOCAL\050temporary, NUMBER\050input, 1\051, NUMBER\050input, 2\051\051;)SH
11 /Times-Roman AF
13680 64901 MT
(You should never leave pointers to local dynamic arrays dangling around)SH
13680 66278 MT
(after the procedure returns.  Don't assign local dynamic arrays to)SH
10 /Courier AF
42572 XM
(VAR)SH
11 /Times-Roman AF
13680 67655 MT
(parameters or global variables, and don't return them from procedures.)SH
ES
%%Page: 30 31
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(30)SH
37303 XM
(Constructing Types)SH
11 /Times-Roman AF
11520 7955 MT
(Here is an example of a dynamic array used to store a screen image; the)SH
11520 9332 MT
(width and height of the screen are determined at runtime:)SH
10 /Courier AF
14016 10987 MT
(TYPE)SH
16416 12018 MT
(Screen = DYNARRAY OF ARRAY OF CHAR;)SH
14016 14080 MT
(PROCEDURE CreateScreen\050CONST height, width : CARDINAL\051)SH
18816 15111 MT
(: Screen;)SH
16416 16142 MT
(VAR newScreen : Screen;)SH
14016 17173 MT
(BEGIN)SH
16416 18204 MT
(NEW\050newScreen, height, width\051;)SH
16416 19235 MT
(ClearScreen\050newScreen\051;)SH
16416 20266 MT
(RETURN newScreen;)SH
14016 21297 MT
(END CreateScreen;)SH
14016 23359 MT
(PROCEDURE ClearScreen\050CONST screen : Screen\051;)SH
16416 24390 MT
(VAR row, column : CARDINAL;)SH
14016 25421 MT
(BEGIN)SH
16416 26452 MT
(FOR row := 0 TO HIGH\050screen, 1\051 DO)SH
18816 27483 MT
(FOR column := 0 TO HIGH\050screen, 2\051 DO)SH
21216 28514 MT
(screen^[row, column] := " ";)SH
18816 29545 MT
(END;)SH
16416 30576 MT
(END;)SH
14016 31607 MT
(END ClearScreen;)SH
14016 33669 MT
(PROCEDURE DisplayLine\050CONST line : ARRAY OF CHAR\051;)SH
16416 34700 MT
(VAR i : CARDINAL;)SH
14016 35731 MT
(BEGIN)SH
16416 36762 MT
(FOR i := 0 TO HIGH\050line\051 DO)SH
18816 37793 MT
(IO.WriteC\050output, line[i]\051)SH
16416 38824 MT
(END;)SH
14016 39855 MT
(END DisplayLine;)SH
14016 41917 MT
(PROCEDURE DisplayScreen\050CONST screen : Screen\051;)SH
16416 42948 MT
(VAR row : CARDINAL;)SH
14016 43979 MT
(BEGIN)SH
16416 45010 MT
(FOR row := 0 TO HIGH\050screen, 1\051 DO)SH
18816 46041 MT
(DisplayLine\050screen^[row]\051;)SH
16416 47072 MT
(END;)SH
14016 48103 MT
(END DisplayScreen;)SH
11 /Times-Roman AF
11520 50154 MT
(See Section 18.4, page 105 for information on)SH
10 /Courier AF
32110 XM
(@NOCOUNT)SH
11 /Times-Roman AF
37185 XM
(and pointer kinds.)SH
/Times-Bold SF
11520 52082 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Dynamic arrays are non-standard.)SH
ES
%%Page: 31 32
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Dynamic Arrays)SH
46880 XM
(31)SH
12 /Times-Roman AF
13680 8023 MT
(5.8. Subarrays)SH
11 SS 
13680 10064 MT
(In EBNF:)SH
10 /Courier AF
16176 11719 MT
(SubarrayType = SUBARRAY OF {ARRAY OF} type)SH
11 /Times-Roman AF
13680 14336 MT
(A subarray consists of elements that are all of the same type.  The elements)SH
13680 15713 MT
(need not be contiguous \050as with open arrays\051, but only equally spaced.  A)SH
13680 17090 MT
(subarray type can be used only to specify the type of a parameter in a)SH
13680 18467 MT
(procedure heading.)SH
13680 20395 MT
(The declaration of a subarray type specifies the number of dimensions and)SH
13680 21772 MT
(the type of the elements.  The type of the indices is always)SH
10 /Courier AF
39706 XM
(CARDINAL)SH
11 /Times-Roman AF
(. The)275 W
13680 23149 MT
(lower bound of each index is always 0; the upper bound of each is)SH
13680 24526 MT
(determined at runtime.)SH
13680 26454 MT
(The resulting type is a non-numeric non-ordinal type.)SH
13680 28382 MT
(To talk about an element of a subarray, you subscript it just like a fixed array)SH
13680 29759 MT
(or an open array.)SH
13680 31687 MT
(When you want to write a procedure that operates on pieces of arrays-)SH
44424 XM
(-)SH
44690 XM
(-for)SH
13680 33064 MT
(example, a procedure for square matrix multiplication using Strassen's)SH
13680 34441 MT
(algorithm, or a procedure for dot-product that accepts columns as well as)SH
13680 35818 MT
(rows-)SH
16084 XM
(-)SH
16350 XM
(-you should declare the formal parameter to be a subarray.  Subarray)SH
13680 37195 MT
(parameters must be passed by)SH
10 /Courier AF
27089 XM
(CONST)SH
11 /Times-Roman AF
30364 XM
(or)SH
10 /Courier AF
31555 XM
(VAR)SH
11 /Times-Roman AF
(; they can't be passed by value.)SH
13680 39123 MT
(The actual parameter you pass to a subarray formal can be a fixed-size array,)SH
13680 40500 MT
(an open array, a dereferenced dynamic array, a subarray parameter, or an)SH
13680 41877 MT
(array slice; its element type must be the same as that of the formal parameter.)SH
13680 43805 MT
(A procedure can use the)SH
10 /Courier AF
24581 XM
(HIGH)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
27531 XM
(LOW)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
31072 XM
(NUMBER)SH
11 /Times-Roman AF
34947 XM
(procedures to determine the)SH
13680 45182 MT
(upper or lower bound or number of elements of any dimension of a subarray.)SH
13680 47233 MT
(A slice is a subsection of an array.  To create a slice, you specify a starting)SH
13680 48610 MT
(element and the number of elements.  Slicing the last dimension of a)SH
13680 49987 MT
(fixed-size, open, or dynamic array creates an open array; slicing any other)SH
13680 51364 MT
(dimension or slicing a subarray creates a subarray.)SH
13680 53415 MT
(If)SH
10 /Courier AF
14687 XM
(a)SH
11 /Times-Roman AF
15562 XM
(is a 2-dimensional array, then)SH
10 /Courier AF
16176 55070 MT
(a[1, 1:10])SH
11 /Times-Roman AF
13680 56856 MT
(is an open array with ten elements, and)SH
10 /Courier AF
16176 58511 MT
(a[1:10, 1])SH
11 /Times-Roman AF
13680 60297 MT
(is a subarray with ten elements.)SH
13680 62348 MT
(If runtime checking is enabled, the compiler checks to be sure that every)SH
13680 63725 MT
(element in a slice specification lies \050inclusively\051 within the)SH
10 /Courier AF
39861 XM
(LOW)SH
11 /Times-Roman AF
41936 XM
(and)SH
10 /Courier AF
43799 XM
(HIGH)SH
11 /Times-Roman AF
13680 65102 MT
(boundaries of that dimension; it also checks that any value used as a subarray)SH
13680 66479 MT
(subscript lies within range.)SH
13680 68407 MT
(You can only use a subarray type to specify the type of a parameter in a)SH
13680 69784 MT
(procedure heading, and you can't assign one subarray to another.  Unlike)SH
13680 71161 MT
(open arrays, you can't assign a constant string to a subarray of)SH
10 /Courier AF
41383 XM
(CHAR)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 32 33
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(32)SH
37303 XM
(Constructing Types)SH
11 /Times-Roman AF
11520 7955 MT
(Here is an example of matrix multiplication using subarrays and slices:)SH
10 /Courier AF
14016 9610 MT
(PROCEDURE DotProduct\050CONST a, b : SUBARRAY OF REAL\051 : REAL;)SH
16416 10641 MT
(VAR dotProd : REAL;)SH
18816 11672 MT
(i :)
3600 W( CARDINAL;)SH
14016 12703 MT
(BEGIN)SH
16416 13734 MT
(ASSERT\050NUMBER\050a\051 = NUMBER\050b\051\051;)SH
16416 14765 MT
(dotProd := 0.0;)SH
16416 15796 MT
(FOR i := 0 TO HIGH\050a\051 DO)SH
18816 16827 MT
(dotProd := dotProd + a[i]*b[i];)SH
16416 17858 MT
(END;)SH
16416 18889 MT
(RETURN dotProd;)SH
14016 19920 MT
(END DotProduct;)SH
14016 21982 MT
(PROCEDURE MultiplyMatrices\050CONST a, b : ARRAY OF ARRAY OF REAL;)SH
30216 23013 MT
(VAR c)
1200 W( :)
1800 W( ARRAY OF ARRAY OF REAL\051;)SH
16416 24044 MT
(VAR i, j : CARDINAL;)SH
14016 25075 MT
(BEGIN)SH
16416 26106 MT
(ASSERT\050NUMBER\050a,1\051 = NUMBER\050c,1\051\051;)SH
16416 27137 MT
(ASSERT\050NUMBER\050a,2\051 = NUMBER\050b,1\051\051;)SH
16416 28168 MT
(ASSERT\050NUMBER\050b,2\051 = NUMBER\050c,2\051\051;)SH
16416 29199 MT
(FOR i := 0 TO HIGH\050c,1\051 DO)SH
18816 30230 MT
(FOR j := 0 TO HIGH\050c,2\051 DO)SH
21216 31261 MT
(c[i,j] := DotProduct\050a[i, 0:NUMBER\050a,2\051],)SH
33816 32292 MT
(b[0:NUMBER\050b,1\051, j]\051;)SH
18816 33323 MT
(END;)SH
16416 34354 MT
(END;)SH
14016 35385 MT
(END MultiplyMatrices;)SH
11 /Times-Bold AF
11520 37436 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Subarrays and slices are non-standard.)SH
12 SS 
11520 41717 MT
(5.9. Records)SH
11 SS 
11520 43768 MT
(Syntax in EBNF:)SH
10 /Courier AF
14016 45423 MT
(RecordType =  RECORD [Direction] Fields END)SH
14016 46454 MT
(Direction =)
600 W( @LEFTTORIGHT | @RIGHTTOLEFT)SH
14016 47485 MT
(Fields =)
2400 W( FieldList {";" FieldList})SH
14016 48516 MT
(FieldList =)
600 W( [IdentList ":" type | FieldCase])SH
14016 49547 MT
(IdentList =)
600 W( ident {"," ident})SH
14016 50578 MT
(FieldCase =)
600 W( CASE [[ident] ":"] TagType OF)SH
21816 51609 MT
(variant {"|" variant} [ELSE Fields] END)SH
14016 52640 MT
(TagType =)
1800 W( {Representation} qualident)SH
14016 53671 MT
(variant =)
1800 W( [CaseLabel {"," CaseLabel} ":" Fields])SH
14016 54702 MT
(CaseLabel =)
600 W( ConstExpr [".." ConstExpr])SH
11 /Times-Roman AF
11520 57319 MT
(A record consists of a fixed number of named fields of possibly different)SH
11520 58696 MT
(types. The)
275 W( declaration of a record type specifies a type and an identifier for)SH
11520 60073 MT
(each field.)SH
11520 62124 MT
(The resulting type is a non-numeric non-ordinal type.)SH
ES
%%Page: 33 34
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Records)SH
46880 XM
(33)SH
11 /Times-Roman AF
13680 7955 MT
(Examples of constructing record types:)SH
10 /Courier AF
16176 9610 MT
(TYPE)SH
18576 10641 MT
(Date = RECORD)SH
20976 11672 MT
(day :)
1200 W( [1..31];)SH
20976 12703 MT
(month : [1..12];)SH
20976 13734 MT
(year :)
600 W( [0..3000];)SH
18576 14765 MT
(END;)SH
18576 15796 MT
(Employee = RECORD)SH
20976 16827 MT
(name, first : ARRAY [0..23] OF CHAR;)SH
20976 17858 MT
(age :)
4800 W( [0..99];)SH
20976 18889 MT
(salary :)
3000 W( REAL;)SH
18576 19920 MT
(END;)SH
11 /Times-Roman AF
13680 21971 MT
(You use a field-selection dot to talk about the fields of a record instance.)SH
13680 23348 MT
(Continuing the examples above, if you have:)SH
10 /Courier AF
16176 25003 MT
(VAR)SH
18576 26034 MT
(inauguration : Date;)SH
18576 27065 MT
(president :)
1800 W( Employee;)SH
11 /Times-Roman AF
13680 28851 MT
(then you talk about the fields of those records this way:)SH
10 /Courier AF
16176 30506 MT
(inauguration.day \050*)
600 W( the day field of the inauguration record *\051)SH
16176 31537 MT
(president.age \050*)
2400 W( the age field of the president record *\051)SH
11 /Times-Roman AF
13680 33588 MT
(\050For talking about record fields inside a)SH
10 /Courier AF
31367 XM
(WITH)SH
11 /Times-Roman AF
34042 XM
(statement, see Section 2.8,)SH
13680 34965 MT
(page 13.\051)SH
13680 37016 MT
(A record type may have one or more variant sections.  Variants allow)SH
13680 38393 MT
(different variables of the same record type to have different numbers and)SH
13680 39770 MT
(types of fields.  But heed Wirth's warning:)SH
10 SS 
15680 41561 MT
(It is obvious that this flexibility also gives rise to programming errors that)SH
15680 42666 MT
(are difficult to detect.  In particular, it is now possible to assume in some)SH
15680 43771 MT
(part of a program that a variable is of a certain variant, whereas it actually)SH
15680 44876 MT
(is of another variant.  This facility is therefore to be used with great)SH
15680 45981 MT
(caution.)SH
11 SS 
13680 47909 MT
(The field at the head of a variant section is called the ``tag field.''  It must)SH
13680 49286 MT
(have an ordinal type.  The case labels are constants of the type indicated by)SH
13680 50663 MT
(the tag field.)SH
10 /Courier AF
16176 52318 MT
(TYPE)SH
18576 53349 MT
(EmployeeStatus = \050Faculty, Staff\051;)SH
18576 54380 MT
(UniversityEmployee = RECORD)SH
20976 55411 MT
(name :)
2400 W( Text.T;)SH
20976 56442 MT
(birthday : INTEGER;)SH
20976 57473 MT
(CASE status : EmployeeStatus OF)SH
20976 58504 MT
(| Faculty:)SH
23376 59535 MT
(almaMater :)
1200 W( Text.T;)SH
23376 60566 MT
(tenureTrack : BOOLEAN;)SH
20976 61597 MT
(| Staff:)SH
23376 62628 MT
(preferredParking : ARRAY [0..9] OF INTEGER;)SH
20976 63659 MT
(END;)SH
18576 64690 MT
(END;)SH
ES
%%Page: 34 35
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(34)SH
37303 XM
(Constructing Types)SH
11 /Times-Roman AF
11520 7955 MT
(In other words, if a record variable of type)SH
10 /Courier AF
30454 XM
(UniversityEmployee)SH
11 /Times-Roman AF
41529 XM
(has the)SH
11520 9332 MT
(value)SH
10 /Courier AF
14177 XM
(Faculty)SH
11 /Times-Roman AF
18652 XM
(in the)SH
10 /Courier AF
21402 XM
(status)SH
11 /Times-Roman AF
25277 XM
(field, the record will consist of five fields)SH
11520 10709 MT
(\050)SH
10 /Courier AF
(name)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
14836 XM
(birthday)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
20186 XM
(status)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24336 XM
(almaMater)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
32149 XM
(tenureTrack)SH
11 /Times-Roman AF
(\051; if it has the)SH
11520 12086 MT
(value)SH
10 /Courier AF
14177 XM
(Staff)SH
11 /Times-Roman AF
17452 XM
(in the)SH
10 /Courier AF
20202 XM
(status)SH
11 /Times-Roman AF
24077 XM
(field, it will consist of four fields \050)SH
10 /Courier AF
(name)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
11520 13463 MT
(birthday)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
16870 XM
(status)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
22883 XM
(preferredParking)SH
11 /Times-Roman AF
(\051.)SH
11520 15514 MT
(In the simplest way of using a variant record, you initialize its tag field)SH
11520 16891 MT
(shortly after creating it and never touch the tag again.  If you do change the)SH
11520 18268 MT
(tag field, all the values of the tag's variant fields become undefined.)SH
11520 20196 MT
(You can have variants nested inside other variants.  All fields declared inside)SH
11520 21573 MT
(nested variants still act like they are declared at the outer level of the record;)SH
11520 22950 MT
(you just use a dot and the field name to talk about a nested variant field.  But)SH
11520 24327 MT
(to access a nested variant field,)SH
/Times-Italic SF
25477 XM
(all)SH
/Times-Roman SF
26914 XM
(the tag fields that determine the variant)SH
11520 25704 MT
(must have appropriate values.)SH
11520 27632 MT
(Section 5.11, page 36 shows how to allocate the minimum space possible for)SH
11520 29009 MT
(a particular variant.)SH
11520 30937 MT
(If runtime checking is enabled, the compiler checks the appropriate tag)SH
11520 32314 MT
(field\050s\051 before allowing you to access a variant field.)SH
/Courier SF
11520 34242 MT
([[)SH
/Times-Roman SF
13500 XM
(The optimizer should remove almost all such variant tag checks as part)SH
11520 35619 MT
(of common subexpression elimination.  But since it has a fundamentally)SH
11520 36996 MT
(flawed idea of how much data an assignment destroys, whenever you assign)SH
11520 38373 MT
(to a record field, the fact that you've already checked the tag\050s\051 is lost.)SH
/Courier SF
43179 XM
(]])SH
/Times-Roman SF
11520 40424 MT
(It's also possible to write a variant section without a tag field-)SH
38639 XM
(-)SH
38905 XM
(-but with)SH
11520 41801 MT
(utmost care.  If you have a tag field, the compiler and runtime system can)SH
11520 43178 MT
(check it for you.  If you don't have a tag field, you have to supply the)SH
11520 44555 MT
(checking yourself.  Tagless variant records are usually for low-level)SH
11520 45932 MT
(programming. There)
275 W( are some real-life examples in Section 18.5, page 107.)SH
12 SS 
11520 50213 MT
(5.10. Sets)SH
11 SS 
11520 52264 MT
(Syntax in EBNF:)SH
10 /Courier AF
14016 53919 MT
(SetType =)
1200 W( SET [Direction] OF OrdinalType)SH
14016 54950 MT
(Direction = @LEFTTORIGHT | @RIGHTTOLEFT)SH
11 /Times-Roman AF
11520 57567 MT
(You make a set type because you want to be able to talk about any possible)SH
11520 58944 MT
(subset of some ordinal type.)SH
11520 60995 MT
(For instance, suppose you have the enumeration type)SH
10 /Courier AF
35133 XM
(TerminalMode)SH
11 /Times-Roman AF
11520 62372 MT
(declared as:)SH
10 /Courier AF
14016 64027 MT
(TYPE)SH
16416 65058 MT
(TerminalMode = \050ReverseVideo, AutoWrap, AutoRepeat\051;)SH
11 /Times-Roman AF
11520 67109 MT
(Because any combination of these modes makes sense, you would represent)SH
11520 68486 MT
(the state of a terminal with a variable of type)SH
10 /Courier AF
31496 XM
(TerminalModeSet)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
14016 70141 MT
(TYPE)SH
16416 71172 MT
(TerminalModeSet = SET OF TerminalMode;)SH
ES
%%Page: 35 36
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Sets)SH
46880 XM
(35)SH
11 /Times-Roman AF
13680 7955 MT
(So a variable of type)SH
10 /Courier AF
23057 XM
(TerminalModeSet)SH
11 /Times-Roman AF
32332 XM
(can assume any of the following)SH
13680 9332 MT
(values:)SH
10 /Courier AF
16176 10987 MT
(TerminalModeSet {})SH
16176 12018 MT
(TerminalModeSet {ReverseVideo})SH
16176 13049 MT
(TerminalModeSet {AutoWrap})SH
16176 14080 MT
(TerminalModeSet {AutoRepeat})SH
16176 15111 MT
(TerminalModeSet {ReverseVideo, AutoWrap})SH
16176 16142 MT
(TerminalModeSet {ReverseVideo, AutoRepeat})SH
16176 17173 MT
(TerminalModeSet {AutoWrap, AutoRepeat})SH
16176 18204 MT
(TerminalModeSet {ReverseVideo, AutoWrap, AutoRepeat})SH
11 /Times-Roman AF
13680 20255 MT
(The resulting type is a non-numeric non-ordinal type.)SH
13680 22183 MT
(Modula-2 allows sets that are larger than one word, so:)SH
10 /Courier AF
16176 23838 MT
(SET OF [0..1023])SH
11 /Times-Roman AF
13680 25624 MT
(is perfectly reasonable.  See Section 20.5, page 128, for implementation)SH
13680 27001 MT
(restrictions.)SH
13680 28929 MT
(You construct a set by specifying the type name of the set, then enclosing a)SH
13680 30306 MT
(list of elements or ranges of elements inside curly braces.  When you're)SH
13680 31683 MT
(constructing a set of type)SH
10 /Courier AF
25013 XM
(BITSET)SH
11 /Times-Roman AF
(, you're allowed to omit the type name.)SH
13680 33060 MT
(Set elements can be constants or expressions:)SH
10 /Courier AF
16176 34715 MT
(TerminalModeSet {})SH
16176 35746 MT
(TerminalModeSet {ReverseVideo})SH
16176 36777 MT
(BITSET {1..3, 15})SH
16176 37808 MT
(BITSET {x..y, z})SH
16176 38839 MT
({x..y, z})SH
12 /Times-Roman AF
13680 43120 MT
(5.11. Pointers)SH
11 SS 
13680 45171 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 46826 MT
(PointerType = POINTER [PointerKind] TO type)SH
16176 47857 MT
(PointerKind = @PASCAL | @C | @NOCHECK | @NILCHECK | @LOCAL)SH
11 /Times-Roman AF
13680 50474 MT
(A pointer is the address of a variable.  You declare a pointer type as follows:)SH
10 /Courier AF
16176 52129 MT
(TYPE)SH
18576 53160 MT
(PtrKeyBoardRecord = POINTER TO RECORD)SH
20976 54191 MT
(keys :)
1200 W( KeySet;)SH
20976 55222 MT
(cursor : Point;)SH
18576 56253 MT
(END;)SH
11 /Times-Roman AF
13680 58039 MT
(You can construct a pointer type that points to variables of any type.  The)SH
13680 59416 MT
(resulting type is a non-numeric non-ordinal type.)SH
13680 61467 MT
(You generate a pointer value by calling)SH
10 /Courier AF
31303 XM
(NEW)SH
11 /Times-Roman AF
33378 XM
(or by calling)SH
10 /Courier AF
39213 XM
(SYSTEM.ADR)SH
11 /Times-Roman AF
(. If)275 W
13680 62844 MT
(the first parameter to)SH
10 /Courier AF
23148 XM
(NEW)SH
11 /Times-Roman AF
25223 XM
(is a variable with a pointer type, then a variable of)SH
13680 64221 MT
(the referent type is created and its address is assigned to the pointer variable.)SH
13680 65598 MT
(You can assign the supplied constant)SH
10 /Courier AF
30238 XM
(NIL)SH
11 /Times-Roman AF
32313 XM
(to any variable with a pointer type.)SH
13680 67526 MT
(If you created a pointer value by calling)SH
10 /Courier AF
31516 XM
(NEW)SH
11 /Times-Roman AF
33591 XM
(you can release the storage with)SH
10 /Courier AF
13680 68903 MT
(DISPOSE)SH
11 /Times-Roman AF
(. If)
275 W( you call)SH
10 /Courier AF
23500 XM
(DISPOSE)SH
11 /Times-Roman AF
27975 XM
(twice on the same value you can expect)SH
13680 70280 MT
(catastrophe. You)
275 W( can also expect catastrophe if you call)SH
10 /Courier AF
38693 XM
(DISPOSE)SH
11 /Times-Roman AF
43168 XM
(on a)SH
13680 71657 MT
(pointer you created with)SH
10 /Courier AF
24676 XM
(SYSTEM.ADR)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 36 37
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(36)SH
37303 XM
(Constructing Types)SH
11 /Times-Roman AF
11520 7955 MT
(To talk about the variable addressed by a pointer, you use the dereferencing)SH
11520 9332 MT
(operator ``)SH
10 /Courier AF
(^)SH
11 /Times-Roman AF
('', as in:)SH
10 /Courier AF
14016 10987 MT
(allKeysUp := ptrKeyboardState^.keys = KeySet{};)SH
11 /Times-Roman AF
11520 13038 MT
(If runtime checking is enabled, the compiler checks to be sure that the)SH
11520 14415 MT
(pointer is valid when you dereference it.  This check is not foolproof; see)SH
11520 15792 MT
(Section 18.2.16, page 103 for more details.)SH
11520 17843 MT
(If you have a pointer to a record that contains variant fields, you can allocate)SH
11520 19220 MT
(storage using)SH
10 /Courier AF
17630 XM
(NEW)SH
11 /Times-Roman AF
19705 XM
(for just the amount needed by specifying the constant)SH
11520 20597 MT
(values you will assign to the tag fields.  The tag fields of such a record)SH
11520 21974 MT
(should never be changed, and the)SH
10 /Courier AF
26455 XM
(DISPOSE)SH
11 /Times-Roman AF
30930 XM
(call should specify the same)SH
11520 23351 MT
(values for the tag field as the corresponding)SH
10 /Courier AF
31068 XM
(NEW)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
14016 25271 MT
(TYPE)SH
16416 26302 MT
(ConstType =)
600 W( \050CINTEGER, CSET\051;)SH
16416 27333 MT
(SetType =)
1800 W( \050LITTLESET, BIGSET\051;)SH
16416 28364 MT
(LittleSet =)
600 W( SET OF [0..255];)SH
16416 29395 MT
(BigSet =)
2400 W( SET OF [0..8192];)SH
16416 30426 MT
(ConstNode = POINTER TO RECORD)SH
18816 31457 MT
(CASE constType : ConstType OF)SH
18816 32488 MT
(| CINTEGER :)SH
21216 33519 MT
(integerConst : INTEGER;)SH
18816 34550 MT
(| CSET)
SH( :)2400 W
21216 35581 MT
(CASE setType OF)SH
21216 36612 MT
(| LITTLESET : littleSetConst : LittleSet;)SH
21216 37643 MT
(| BIGSET)
SH( :)
1800 W( bigSetConst)
SH( :)
1800 W( BigSet;)SH
21216 38674 MT
(END \050* CASE setType *\051;)SH
18816 39705 MT
(END \050* CASE constType *\051;)SH
16416 40736 MT
(END \050* RECORD ConstNode *\051;)SH
14016 41767 MT
(VAR)SH
16416 42798 MT
(constNode : ConstNode;)SH
14016 43829 MT
(BEGIN)SH
16416 44860 MT
(NEW\050constNode, CSET, LITTLESET\051;)
SH( \050*)
3600 W( Allocates 10 words *\051)SH
16416 45891 MT
(constNode^.constType := CSET;)SH
16416 46922 MT
(constNode^.setType :=)
1200 W( LITTLESET;)SH
16416 47953 MT
(constNode^.littleSetConst := LittleSet{64..191};)SH
16416 48984 MT
(DISPOSE\050constNode, CSET, LITTLESET\051;)SH
16416 50015 MT
(NEW\050constNode, CINTEGER\051;)
SH( \050*)
7800 W( Allocates 2 words *\051)SH
16416 51046 MT
(constNode^.constType := CINTEGER;)SH
11 /Times-Roman AF
11520 53097 MT
(If a record has multiple \050as opposed to nested\051 variants, you specify the tag)SH
11520 54474 MT
(fields for the last variant only.)SH
11520 56402 MT
(For information on)SH
10 /Courier AF
20167 XM
(@C)SH
11 /Times-Roman AF
21642 XM
(and other exotic pointer kinds, see Section 18.4, page)SH
11520 57779 MT
(105.)SH
ES
%%Page: 37 38
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Pointers)SH
46880 XM
(37)SH
12 /Times-Roman AF
13680 8023 MT
(5.12. Procedure Types)SH
11 SS 
13680 10074 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 11729 MT
(ProcedureType = PROCEDURE [FormalTypes] [":" qualident])SH
16176 12760 MT
(FormalTypes =)
1200 W( "\050" [FormalType {"," FormalType}] "\051")SH
16176 13791 MT
(FormalType =)1800 W
18576 14822 MT
([CONST | VAR] \050qualident | OpenArrayType | SubarrayType\051)SH
11 /Times-Roman AF
13680 17439 MT
(It's useful to be able to pass procedures as actual parameters to other)SH
13680 18816 MT
(procedures and to embed procedures in data structures.  So you want to be)SH
13680 20193 MT
(able to declare procedure-valued variables, and in order to declare)SH
13680 21570 MT
(procedure-valued variables, you need procedure types.  For instance:)SH
10 /Courier AF
16176 23225 MT
(TYPE)SH
18576 24256 MT
(FleaAction = PROCEDURE\050\051;)SH
18576 25287 MT
(DogAction =)
600 W( PROCEDURE\050VAR Breed\051;)SH
11 /Times-Roman AF
13680 27338 MT
(The resulting type is a non-numeric non-ordinal type.)SH
13680 29389 MT
(The syntax for the header of a procedure type constructor is very like the)SH
13680 30766 MT
(header for a procedure declaration.  In EBNF:)SH
10 /Courier AF
16176 32421 MT
(ProcedureType = PROCEDURE)
SH( [FormalTypes])
3600 W( [":")
600 W( qualident])SH
16176 33452 MT
(heading =)
3600 W( PROCEDURE ident [FormalParams] [":" qualident])SH
16176 34483 MT
(FormalTypes =)
1200 W( "\050" FormalType  {"," FormalType}  "\051")SH
16176 35514 MT
(FormalParams =)
600 W( "\050" FormalParam {";" FormalParam} "\051")SH
16176 36545 MT
(FormalType =)
1800 W( [VAR | CONST])
SH( [{[SUB]ARRAY)
6600 W( OF} qualident])SH
16176 37576 MT
(FormalParam =)
1200 W( [VAR | CONST] idents ":" [{[SUB]ARRAY OF} qualident])SH
11 /Times-Roman AF
13680 40193 MT
(You can assign procedure)SH
10 /Courier AF
25346 XM
(P)SH
11 /Times-Roman AF
26221 XM
(to a variable)SH
10 /Courier AF
31932 XM
(t)SH
11 /Times-Roman AF
32807 XM
(of procedure type)SH
10 /Courier AF
40838 XM
(T)SH
11 /Times-Roman AF
(, or pass a)SH
13680 41570 MT
(procedure)SH
10 /Courier AF
18351 XM
(P)SH
11 /Times-Roman AF
19226 XM
(as an argument to a formal parameter of procedure type)SH
10 /Courier AF
43962 XM
(T)SH
11 /Times-Roman AF
44837 XM
(only if)SH
13680 42947 MT
(they match; see Section 16, page 87.  And there are some additional)SH
13680 44324 MT
(restrictions:)SH
15880 46275 MT
(1.)SH
10 /Courier AF
16980 XM
(P)SH
11 /Times-Roman AF
17855 XM
(must not be declared local to another procedure.)SH
15880 47652 MT
(2.)SH
10 /Courier AF
16980 XM
(P)SH
11 /Times-Roman AF
17855 XM
(must not be known to the compiler.  A procedure is known to)SH
16980 49029 MT
(the compiler if it is supplied, or if it is imported from the)SH
16980 50406 MT
(module)SH
10 /Courier AF
20555 XM
(SYSTEM)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24705 XM
(BITOPERATIONS)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
33055 XM
(MEMORY)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
38396 XM
(IO)SH
11 /Times-Roman AF
(.)SH
13680 52457 MT
(The constant)SH
10 /Courier AF
19606 XM
(NIL)SH
11 /Times-Roman AF
21681 XM
(is compatible with procedure types: you can assign)SH
10 /Courier AF
44409 XM
(NIL)SH
11 /Times-Roman AF
46484 XM
(to)SH
13680 53834 MT
(a procedure variable, return)SH
10 /Courier AF
26107 XM
(NIL)SH
11 /Times-Roman AF
28182 XM
(from a function that returns a procedure)SH
13680 55211 MT
(type, and compare a procedure variable to)SH
10 /Courier AF
32430 XM
(NIL)SH
11 /Times-Roman AF
(.)SH
/Times-Bold SF
13680 57139 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2,)SH
10 /Courier AF
29047 XM
(NIL)SH
11 /Times-Roman AF
31122 XM
(is not compatible with procedure)SH
13680 58516 MT
(types.)SH
ES
%%Page: 38 39
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(38)SH
37303 XM
(Constructing Types)SH
12 /Times-Roman AF
11520 8023 MT
(5.13. Kinds of Types)SH
11 SS 
11520 10064 MT
(Here are the kinds of all the types, supplied and constructed:)SH
10 /Courier AF
21120 11719 MT
(numeric non-numeric)7800 W
11520 12750 MT
(--------------------------------------------------------------)SH
11520 13781 MT
(ordinal INTEGER)
4800 W( BOOLEAN)7800 W
21120 14812 MT
(CARDINAL CHAR)7200 W
21120 15843 MT
(UNSIGNED enumeration)7200 W
21120 16874 MT
(numeric subrange)
SH( non-numeric)
2400 W( subrange)SH
11520 18936 MT
(non-ordinal REAL)
2400 W( BITSET)9600 W
21120 19967 MT
(LONGREAL PROC)7200 W
33720 20998 MT
(fixed-size array)SH
33720 22029 MT
(open array)SH
33720 23060 MT
(dynamic array)SH
33720 24091 MT
(subarray)SH
33720 25122 MT
(record)SH
33720 26153 MT
(set)SH
33720 27184 MT
(pointer)SH
33720 28215 MT
(procedure)SH
12 /Times-Roman AF
11520 32496 MT
(5.14. Type Transfer)SH
11 SS 
11520 34537 MT
(Sometimes you have something-)SH
25811 XM
(-)SH
26077 XM
(-be it constant, variable, or expression-)SH
43112 XM
(-)SH
43378 XM
(-of)SH
11520 35914 MT
(one type, but want to interpret it as another type.  You can use a type name as)SH
11520 37291 MT
(a type transfer function.  Type transfer does not really involve any)SH
/Times-Italic SF
11520 38668 MT
(conversion)SH
/Times-Roman SF
(, but only a)SH
/Times-Italic SF
21571 XM
(reinterpretation)SH
/Times-Roman SF
28874 XM
(of a bunch of bits.  As such, it is a)SH
11520 40045 MT
(system-dependent facility, and you must know the representation of both the)SH
11520 41422 MT
(source type and the destination type.)SH
11520 43350 MT
(For example, you might use type transfer to create)SH
10 /Courier AF
33940 XM
(REAL)SH
11 /Times-Roman AF
36615 XM
(numbers from exact)SH
11520 44727 MT
(bit patterns, as long as you realize that different computers may require)SH
11520 46104 MT
(different bit patterns for the ``same'' real number:)SH
10 /Courier AF
14016 47759 MT
(CONST)SH
16416 48790 MT
(MAXREAL = REAL\0500ffff7fffH\051;  \050* VAX-specific *\051)SH
16416 49821 MT
(MINREAL = REAL\0500ffffffffH\051;)SH
11 /Times-Roman AF
11520 51749 MT
(If you type transfer a constant, you get a constant.  If you type transfer a)SH
11520 53126 MT
(variable, you get a variable.  If you type transfer an expression, you get an)SH
11520 54503 MT
(expression.)SH
11520 56431 MT
(In many cases you can \050and should\051 avoid a type transfer by using one of the)SH
11520 57808 MT
(supplied conversion procedures described in Section 13.2, page 66.)SH
ES
%%Page: 39 40
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(39)SH
14 /Times-Roman AF
27397 11760 MT
(6. Variables)SH
11 SS 
13680 15249 MT
(A variable declaration associates an identifier with a type and some runtime)SH
13680 16626 MT
(storage. The)
275 W( type defines the structure of the variable, limits the values that)SH
13680 18003 MT
(the variables can assume, and limits the operations that can be applied to the)SH
13680 19380 MT
(variable. In)
275 W( EBNF:)SH
10 /Courier AF
16176 21035 MT
(declaration = ...)SH
18576 22066 MT
(| VAR {\050[@EXTERNAL] IdentList | ident string\051 ":" type ";"})SH
11 /Times-Roman AF
13680 24683 MT
(For example:)SH
10 /Courier AF
16176 26338 MT
(VAR)SH
18576 27369 MT
(k : INTEGER;)SH
18576 28400 MT
(c : Wr.Consumer;)SH
18576 29431 MT
(a : ARRAY Index OF CARDINAL;)SH
11 /Times-Roman AF
13680 31482 MT
(Variables whose identifiers appear in the same list all get the same type.)SH
13680 32859 MT
(That is to say, this:)SH
10 /Courier AF
16176 34514 MT
(VAR)SH
18576 35545 MT
(i : CARDINAL;)SH
18576 36576 MT
(j : CARDINAL;)SH
11 /Times-Roman AF
13680 38362 MT
(is the same as this:)SH
10 /Courier AF
16176 40017 MT
(VAR)SH
18576 41048 MT
(i, j : CARDINAL;)SH
11 /Times-Roman AF
13680 43099 MT
(The other way of creating a variable is by calling)SH
10 /Courier AF
35548 XM
(NEW)SH
11 /Times-Roman AF
(. \050Many)
275 W( people think)SH
13680 44476 MT
(of variables as named slots for storing values; by ``variable'' we mean)SH
13680 45853 MT
(simply a slot, whether named or not.\051)SH
13680 47781 MT
(A variable's initial value is undefined.)SH
13680 49709 MT
(For rules about identifiers, see Section 1.2, page 3.)SH
13680 51637 MT
(For information about controlling the external name of a variable using)SH
10 /Courier AF
13680 53014 MT
(@EXTERNAL)SH
11 /Times-Roman AF
19355 XM
(or a constant string, see Section 19.3.1, page 111.)SH
ES
%%Page: 40 41
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(40)SH
41609 XM
(Variables)SH
ES
%%Page: 41 42
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(41)SH
14 /Times-Roman AF
26735 11760 MT
(7. Designators)SH
11 SS 
13680 15249 MT
(In EBNF:)SH
10 /Courier AF
16176 16904 MT
(designator = qualident {"." ident)SH
29976 17935 MT
(| "[" subscript {"," subscript} "]")SH
29976 18966 MT
(| "^")SH
29976 19997 MT
(| "\050" [expression {"," expression}] "\051"})SH
11 /Times-Roman AF
13680 22614 MT
(A designator is a variable, type, or procedure name followed by any number)SH
13680 23991 MT
(of semantically acceptable selection operators.  A selector is a dot followed)SH
13680 25368 MT
(by a record field identifier, an uparrow, square brackets enclosing a list of)SH
13680 26745 MT
(subscripts, or parentheses enclosing a list of procedure arguments.)SH
13680 28673 MT
(Given the declarations:)SH
10 /Courier AF
16176 30328 MT
(TYPE)SH
18576 31359 MT
(Arr = ARRAY [0..9], BOOLEAN OF CHAR;)SH
18576 32390 MT
(Rec = RECORD)SH
20976 33421 MT
(f1 : INTEGER;)SH
20976 34452 MT
(f2 : REAL;)SH
20976 35483 MT
(f3 : Arr;)SH
18576 36514 MT
(END;)SH
18576 37545 MT
(Ptr = POINTER TO Rec;)SH
18576 38576 MT
(Fun = PROCEDURE \050INTEGER\051 : Ptr;)SH
16176 39607 MT
(VAR)SH
18576 40638 MT
(a :)
1800 W( Arr;)SH
18576 41669 MT
(r :)
1800 W( Rec;)SH
18576 42700 MT
(p :)
1800 W( Ptr;)SH
18576 43731 MT
(f, g : Fun;)SH
16176 45793 MT
(PROCEDURE P\050i : INTEGER\051 : Fun;)SH
16176 46824 MT
(BEGIN ... END P;)SH
11 /Times-Roman AF
13680 48610 MT
(then the following are all legal designators:)SH
10 /Courier AF
16176 50265 MT
(a[3])SH
16176 51296 MT
(r.f1)SH
16176 52327 MT
(r.f3[4])SH
16176 53358 MT
(p)SH
16176 54389 MT
(p^.f3[0:2, TRUE])SH
16176 55420 MT
(f\0503\051)SH
16176 56451 MT
(P\0501\051\0503\051^.f3)SH
16176 57482 MT
(Ptr\0500ffffff40H\051^.f2)SH
11 /Times-Roman AF
13680 59410 MT
(A variable designator denotes a variable, which may be anonymous or a)SH
13680 60787 MT
(component of a structured variable.  You can get a variable designator by)SH
13680 62164 MT
(starting with a variable and selecting with dot, uparrow, or square brackets.)SH
13680 63541 MT
(You also get a variable designator whenever you use uparrow, including)SH
13680 64918 MT
(using uparrow after calling a procedure that returns a pointer type.  Finally,)SH
13680 66295 MT
(whenever you apply a type transfer function to a variable designator you get)SH
13680 67672 MT
(back a variable designator.)SH
/Times-Bold SF
13680 69600 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2, you cannot use a selection operator after a)SH
13680 70977 MT
(procedure call, and a type transfer always returns an expression value.)SH
ES
%%Page: 42 43
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(42)SH
40665 XM
(Designators)SH
ES
%%Page: 43 44
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(43)SH
14 /Times-Roman AF
26696 11760 MT
(8. Expressions)SH
11 SS 
13680 15249 MT
(An expression specifies a computation that produces a value.  In constructing)SH
13680 16626 MT
(an expression you can call procedures and use operators.  You can use)SH
13680 18003 MT
(parentheses to group operands with their operator.  In EBNF:)SH
10 /Courier AF
16176 19658 MT
(expression =)
3600 W( SimpleExpression [relation SimpleExpression])SH
16176 20689 MT
(relation =)
4800 W( "=" | "#" | "<>" | "<" | "<=" | ">" | ">=" | IN)SH
16176 21720 MT
(SimpleExpression = ["+" | "-"] term {AddOperator term})SH
16176 22751 MT
(AddOperator =)
3000 W( "+" | "-" | OR)SH
16176 23782 MT
(term =)
7200 W( factor {MulOperator factor})SH
16176 24813 MT
(MulOperator =)
3000 W( "*" | "/" | DIV | MOD | AND | "&")SH
16176 25844 MT
(factor =)
6000 W( number)600 W
26376 26875 MT
(| octalChar)SH
26376 27906 MT
(| string)SH
26376 28937 MT
(| set)SH
26376 29968 MT
(| designator)SH
26376 30999 MT
(| "\050" expression "\051")SH
26376 32030 MT
(| NOT factor)SH
16176 33061 MT
(set =)
7800 W( [qualident] "{" [element {"," element}] "}")SH
16176 34092 MT
(element =)
5400 W( expression [".." expression])SH
11 /Times-Roman AF
13680 36709 MT
(The only really tricky thing about expressions is type-checking; see Chapter)SH
13680 38086 MT
(16, especially Section 16.5, page 90.)SH
12 SS 
13680 42367 MT
(8.1. Operands)SH
11 SS 
13680 44418 MT
(If an operand in an expression is not itself an expression, then it is a constant,)SH
13680 45795 MT
(a designator, or a set constructor:)SH
6 /Symbol AF
15879 47746 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(a constant is the name of a constant \050including)SH
10 /Courier AF
37111 XM
(NIL)SH
11 /Times-Roman AF
39186 XM
(and elements)SH
16430 49123 MT
(of enumerations\051, a literal number \050see page 4\051, a literal string)SH
16430 50500 MT
(\050see page 5\051, or a literal set \050see page 15\051.)SH
6 /Symbol AF
15879 51877 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(a designator is a variable, type, or procedure name followed by)SH
16430 53254 MT
(any number of semantically acceptable selection operators \050see)SH
16430 54631 MT
(Chapter 7, page 41\051.)SH
6 /Symbol AF
15879 56008 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(a set constructor is the name of a set type followed by a list of)SH
16430 57385 MT
(elements enclosed in curly braces \050see Section 5.10, page 35\051.)SH
13680 59336 MT
(Examples of simple legal operands:)SH
10 /Courier AF
16176 60991 MT
(35)SH
16176 62022 MT
(ASCII.CharSet{"a".."z"})SH
16176 63053 MT
(rec.field)SH
16176 64084 MT
(arr[index])SH
16176 65115 MT
(func\050arg\051)SH
16176 66146 MT
(func\050arg\051^.arrayField[index])SH
16176 67177 MT
(RecType\050arr\051.field)SH
16176 68208 MT
(BITSET{1, x..y})SH
11 /Times-Roman AF
13680 70259 MT
(If a designator is a variable designator, its value is the current value of the)SH
13680 71636 MT
(variable.)SH
ES
%%Page: 44 45
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(44)SH
40608 XM
(Expressions)SH
11 /Times-Roman AF
11520 7955 MT
(Whenever you use the name of a procedure or a procedure-valued variable)SH
11520 9332 MT
(followed by a \050possibly empty\051 parameter list, the name represents a call on)SH
11520 10709 MT
(the procedure with those parameters and the value is the value returned by)SH
11520 12086 MT
(the call.  Whenever you use the name of a procedure but don't follow it with)SH
11520 13463 MT
(a parameter list, then the value is the procedure itself, not a call on the)SH
11520 14840 MT
(procedure.)SH
12 SS 
11520 19121 MT
(8.2. Operators)SH
11520 22316 MT
(8.2.1. Operator Precedence)SH
11 SS 
11520 24367 MT
(There are four classes of operators.  From highest to lowest in precedence:)SH
10 /Courier AF
16320 26022 MT
(NOT ~)600 W
16320 27053 MT
(* / DIV MOD AND &)600 W
16320 28084 MT
(+ - OR)600 W
16320 29115 MT
(= # <> < <= > >= IN)600 W
11 /Times-Roman AF
11520 31732 MT
(The symbol)SH
10 /Courier AF
17020 XM
(~)SH
11 /Times-Roman AF
17895 XM
(means)SH
10 /Courier AF
20980 XM
(NOT)SH
11 /Times-Roman AF
(, the symbol)SH
10 /Courier AF
28464 XM
(&)SH
11 /Times-Roman AF
29339 XM
(means)SH
10 /Courier AF
32424 XM
(AND)SH
11 /Times-Roman AF
(, and the symbol)SH
10 /Courier AF
41771 XM
(<>)SH
11 /Times-Roman AF
11520 33109 MT
(means)SH
10 /Courier AF
14605 XM
(#)SH
11 /Times-Roman AF
(.)SH
11520 35037 MT
(Sequences of operators of the same precedence are executed from left to)SH
11520 36414 MT
(right.)SH
11520 38465 MT
(The operators are overloaded.  That is to say, the same operator symbol may)SH
11520 39842 MT
(stand for several different operations; the actual operation is identified by the)SH
11520 41219 MT
(types of the operands.)SH
12 SS 
11520 44414 MT
(8.2.2. Arithmetic Operators)SH
10 SS 
29520 46386 MT
(Addition is adding.)SH
29520 47763 MT
(-)SH
29753 XM
(-)SH
29986 XM
(-Gertrude Stein, ``Arthur a Grammar'')SH
/Courier SF
14520 49492 MT
(symbol operation)7200 W
14520 50523 MT
(----------------------------)SH
15720 51554 MT
(+ addition)9000 W
15720 52585 MT
(- subtraction)9000 W
15720 53616 MT
(* multiplication)9000 W
15720 54647 MT
(/ real)
9000 W( division)SH
15720 55678 MT
(DIV integer)
7800 W( division)SH
15720 56709 MT
(MOD integer)
7800 W( modulus)SH
11 /Times-Roman AF
11520 59326 MT
(Arithmetic operators apply to numeric types.)SH
11520 61254 MT
(The real division operator ``)SH
10 /Courier AF
(/)SH
11 /Times-Roman AF
('' applies only to)SH
10 /Courier AF
32280 XM
(REAL)SH
11 /Times-Roman AF
34955 XM
(and)SH
10 /Courier AF
36818 XM
(LONGREAL)SH
11 /Times-Roman AF
41893 XM
(types.)SH
11520 63182 MT
(The integer division and modulus operators)SH
10 /Courier AF
30950 XM
(DIV)SH
11 /Times-Roman AF
33025 XM
(and)SH
10 /Courier AF
34888 XM
(MOD)SH
11 /Times-Roman AF
36963 XM
(apply only to)SH
10 /Courier AF
11520 64559 MT
(INTEGER)SH
11 /Times-Roman AF
15995 XM
(and)SH
10 /Courier AF
17858 XM
(UNSIGNED)SH
11 /Times-Roman AF
22933 XM
(types \050and subranges of these types\051.)SH
11520 66487 MT
(When used as prefix unary operators, ``)SH
10 /Courier AF
(+)SH
11 /Times-Roman AF
('' means identity and ``)SH
10 /Courier AF
(-)SH
11 /Times-Roman AF
('' means)SH
11520 67864 MT
(sign inversion.  Sign inversion cannot be used on)SH
10 /Courier AF
33396 XM
(UNSIGNED)SH
11 /Times-Roman AF
38471 XM
(values.)SH
ES
%%Page: 45 46
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Operators)SH
46880 XM
(45)SH
11 /Times-Roman AF
13680 7955 MT
(The operators)SH
10 /Courier AF
20032 XM
(DIV)SH
11 /Times-Roman AF
22107 XM
(and)SH
10 /Courier AF
23970 XM
(MOD)SH
11 /Times-Roman AF
26045 XM
(are defined by the following rules:)SH
6 /Symbol AF
15879 9906 MT
(\267)SH
10 /Courier AF
16430 XM
(x DIV y)SH
11 /Times-Roman AF
20905 XM
(is equal to the quotient)SH
10 /Courier AF
31202 XM
(x/y)SH
11 /Times-Roman AF
33277 XM
(truncated towards zero.)SH
/Courier SF
([[)SH
/Times-Roman SF
16430 11283 MT
(No mathematician in the world would agree to this definition.  I)SH
16430 12660 MT
(should change the code generator slightly to cause truncation to)SH
16430 14037 MT
(-infinity instead: -1 div 3 = -1.)SH
/Courier SF
30451 XM
(]])SH
6 /Symbol AF
15879 15414 MT
(\267)SH
10 /Courier AF
16430 XM
(x MOD y)SH
11 /Times-Roman AF
20905 XM
(is equal to)SH
10 /Courier AF
25702 XM
(x - \050x DIV y\051 * y)SH
11 /Times-Roman AF
(, which is the)SH
16430 16791 MT
(remainder of the division)SH
10 /Courier AF
27794 XM
(x DIV y)SH
11 /Times-Roman AF
(\051.)SH
13680 18842 MT
(Performing a)SH
10 /Courier AF
19728 XM
(DIV)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
22078 XM
(MOD)SH
11 /Times-Roman AF
(, or real division by 0 causes a runtime error.  Real)SH
13680 20219 MT
(number overflow causes a runtime error.  Real number underflow results in 0)SH
13680 21596 MT
(with no error reported.  All other arithmetic overflows or underflows are not)SH
13680 22973 MT
(reported.)SH
12 SS 
13680 26168 MT
(8.2.3. Logical Operators)SH
10 /Courier AF
17280 28078 MT
(symbol operation)7800 W
17280 29109 MT
(-----------------------------)SH
17880 30140 MT
(AND logical)
9000 W( conjunction)SH
17880 31171 MT
(OR logical)
9600 W( disjunction)SH
17880 32202 MT
(NOT negation)9000 W
11 /Times-Roman AF
13680 34819 MT
(You can use logical operators on)SH
10 /Courier AF
28402 XM
(BOOLEAN)SH
11 /Times-Roman AF
32877 XM
(operands only.  To perform bit)SH
13680 36196 MT
(operations on integers, see Section 15.2, page 83.)SH
13680 38247 MT
(The binary operators)SH
10 /Courier AF
23117 XM
(OR)SH
11 /Times-Roman AF
24592 XM
(and)SH
10 /Courier AF
26455 XM
(AND)SH
11 /Times-Roman AF
28530 XM
(use ``short-circuit'' evaluation: they don't)SH
13680 39624 MT
(evaluate their second operand unless they need to.  So the expression)SH
10 /Courier AF
16176 41279 MT
(p OR q)SH
11 /Times-Roman AF
13680 43065 MT
(means)SH
10 /Courier AF
16176 44720 MT
(IF p THEN TRUE ELSE q END)SH
11 /Times-Roman AF
13680 46506 MT
(and the expression)SH
10 /Courier AF
16176 48161 MT
(p AND q)SH
11 /Times-Roman AF
13680 49947 MT
(means)SH
10 /Courier AF
16176 51602 MT
(IF p THEN q ELSE FALSE END)SH
11 /Times-Roman AF
13680 53653 MT
(Non-Pascal programmers will be surprised by the precedence of the)SH
13680 55030 MT
(operators)SH
10 /Courier AF
18047 XM
(AND)SH
11 /Times-Roman AF
20122 XM
(and)SH
10 /Courier AF
21985 XM
(OR)SH
11 /Times-Roman AF
23460 XM
(in the expression syntax. You can't write:)SH
10 /Courier AF
16176 56685 MT
(IF a < b AND c < d THEN ... END;)SH
16176 57716 MT
(IF a < b OR  c < d THEN ... END;)SH
11 /Times-Roman AF
13680 59502 MT
(but instead you must write:)SH
10 /Courier AF
16176 61157 MT
(IF \050a < b\051 AND \050c < d\051 THEN ... END;)SH
16176 62188 MT
(IF \050a < b\051 OR  \050c < d\051 THEN ... END;)SH
11 /Times-Roman AF
13680 64239 MT
(Another result of operator precedence and the ordering)SH
10 /Courier AF
38110 XM
(FALSE < TRUE)SH
11 /Times-Roman AF
(: if)SH
13680 65616 MT
(you want to compute)SH
10 /Courier AF
16176 67271 MT
(p implies q)SH
11 /Times-Roman AF
13680 69057 MT
(\050often indicated symbolically as ``)SH
10 /Courier AF
(p => q)SH
11 /Times-Roman AF
(''\051, you can write in Modula-2:)SH
10 /Courier AF
16176 70712 MT
(p <= q)SH
ES
%%Page: 46 47
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(46)SH
40608 XM
(Expressions)SH
12 /Times-Roman AF
11520 8023 MT
(8.2.4. Ordinal Relations)SH
10 /Courier AF
13320 9933 MT
(symbol relation)7200 W
13320 10964 MT
(---------------------------)SH
14520 11995 MT
(= equal)9000 W
14520 13026 MT
(# not)
9000 W( equal)SH
14520 14057 MT
(< less)9000 W
14520 15088 MT
(<= less)
8400 W( or equal)SH
14520 16119 MT
(> greater)9000 W
14520 17150 MT
(>= greater)
8400 W( or equal)SH
11 /Times-Roman AF
11520 19767 MT
(You can use relations to compare any ordinal types.  The left and right)SH
11520 21144 MT
(operands must be compatible.)SH
12 SS 
11520 24339 MT
(8.2.5. Set Operators)SH
10 /Courier AF
15120 26249 MT
(symbol operation)8400 W
15120 27280 MT
(------ ---------)8400 W
15720 28311 MT
(+ set)
10800 W( union)SH
15720 29342 MT
(- set)
10800 W( difference)SH
15720 30373 MT
(* set)
10800 W( intersection)SH
15720 31404 MT
(/ symmetric)
10800 W( set difference \050xor\051)SH
13320 33890 MT
(x IN \050s1 + s2\051)
SH( iff)
1800 W( \050x)
600 W( IN s1\051 OR \050x IN s2\051)SH
13320 34921 MT
(x IN \050s1 - s2\051)
SH( iff)
1800 W( \050x)
600 W( IN sl\051 AND NOT \050x IN s2\051)SH
13320 35952 MT
(x IN \050s1 * s2\051)
SH( iff)
1800 W( \050x)
600 W( IN s1\051 AND \050x IN s2\051)SH
13320 36983 MT
(x IN \050s1 / s2\051)
SH( iff)
1800 W( \050x)
600 W( IN s1\051 # \050x IN s2\051)SH
11 /Times-Roman AF
11520 39600 MT
(You might expect the operator)SH
10 /Courier AF
25235 XM
(NOT)SH
11 /Times-Roman AF
27310 XM
(to apply to sets, but it doesn't.)SH
12 SS 
11520 42795 MT
(8.2.6. Set Relations)SH
10 /Courier AF
13320 44705 MT
(symbol relation)7200 W
13320 45736 MT
(---------------------------)SH
14520 46767 MT
(= equal)9000 W
14520 47798 MT
(# not)
9000 W( equal)SH
14520 48829 MT
(<= \050improper\051)
8400 W( subset)SH
14520 49860 MT
(>= \050improper\051)
8400 W( superset)SH
14520 50891 MT
(IN element)
8400 W( test)SH
11 /Times-Roman AF
11520 53508 MT
(Where)SH
10 /Courier AF
14725 XM
(s)SH
11 /Times-Roman AF
15600 XM
(and)SH
10 /Courier AF
17463 XM
(t)SH
11 /Times-Roman AF
18338 XM
(are sets and)SH
10 /Courier AF
23743 XM
(e)SH
11 /Times-Roman AF
24618 XM
(is an element:)SH
10 /Courier AF
13320 55163 MT
(s = t)
SH( means)
1200 W( that s and t have the same elements)SH
13320 56194 MT
(s # t)
SH( means)
1200 W( that s and t do not have the same elements)SH
13320 57225 MT
(s <= t  means that every element of s is an element of t)SH
13320 58256 MT
(s >= t  means that every element of t is an element of s)SH
13320 59287 MT
(e IN s  means that e is an element of s)SH
ES
%%Page: 47 48
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Operators)SH
46880 XM
(47)SH
12 /Times-Roman AF
13680 8023 MT
(8.2.7. String Relations)SH
10 /Courier AF
15480 9933 MT
(symbol relation)7200 W
15480 10964 MT
(---------------------------)SH
16680 11995 MT
(= equal)9000 W
16680 13026 MT
(# not)
9000 W( equal)SH
16680 14057 MT
(< less)9000 W
16680 15088 MT
(<= less)
8400 W( or equal)SH
16680 16119 MT
(> greater)9000 W
16680 17150 MT
(>= greater)
8400 W( or equal)SH
11 /Times-Roman AF
13680 19767 MT
(You can use relations to compare literal strings and fixed-size arrays of)SH
10 /Courier AF
13680 21144 MT
(CHAR)SH
11 /Times-Roman AF
(. All)
275 W( relations compare lexicographically using ASCII ordering.  The)SH
13680 22521 MT
(comparison proceeds character-by-character down both strings, and finishes)SH
13680 23898 MT
(when \0501\051 the two characters are not equal, \0502\051 at least one of the two)SH
13680 25275 MT
(characters is the null byte, or \0503\051 there are no more characters in the strings.)SH
/Times-Bold SF
13680 27326 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(String comparisons are non-standard.)SH
12 SS 
13680 30521 MT
(8.2.8. Other Relations)SH
10 /Courier AF
15480 32431 MT
(symbol relation)7200 W
15480 33462 MT
(---------------------------)SH
16680 34493 MT
(= equal)9000 W
16680 35524 MT
(# not)
9000 W( equal)SH
11 /Times-Roman AF
13680 38141 MT
(You can use equal and not equal relations on pointers, procedures,)SH
10 /Courier AF
13680 39518 MT
(SYSTEM.WORD)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
20830 XM
(SYSTEM.BYTE)SH
11 /Times-Roman AF
(, and opaque types.)SH
13680 41446 MT
(You can use equal and not equal relations on undereferenced dynamic arrays,)SH
13680 42823 MT
(which compare the array pointer and dimension sizes; they don't compare the)SH
13680 44200 MT
(array data.)SH
13680 46128 MT
(You can't use any relation operators on records, open arrays, or subarrays,)SH
13680 47505 MT
(and you can't use any relation operators on fixed-size arrays \050except for)SH
13680 48882 MT
(strings\051.)SH
ES
%%Page: 48 49
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(48)SH
40608 XM
(Expressions)SH
12 /Times-Roman AF
11520 8023 MT
(8.3. Applicability Charts)SH
11 SS 
11520 10064 MT
(See the type-checking chapter, page 87, to understand this classification.  For)SH
11520 11441 MT
(operands of these basetypes, these operators apply.  \050Of course, you also)SH
11520 12818 MT
(need to look at the type-checking chapter to see whether they type-check.\051)SH
10 /Courier AF
12720 14473 MT
(Binary Operators)SH
13920 16535 MT
(INTEGER *)
10200 W( DIV)
1200 W( MOD)
SH( +)
2400 W( -)
SH( =)
1800 W( # < <= > >= IN)SH
13920 17566 MT
(CARDINAL *)
9600 W( DIV)
1200 W( MOD)
SH( +)
2400 W( -)
SH( =)
1800 W( # < <= > >= IN)SH
13920 18597 MT
(UNSIGNED *)
9600 W( DIV)
1200 W( MOD)
SH( +)
2400 W( -)
SH( =)
1800 W( # < <= > >= IN)SH
13920 19628 MT
(numeric subrange)
SH( *)
4800 W( DIV)
1200 W( MOD)
SH( +)
2400 W( -)
SH( =)
1800 W( # < <= > >= IN)SH
13920 20659 MT
(SYSTEM.ADDRESS *)
6000 W( DIV)
1200 W( MOD)
SH( +)
2400 W( -)
SH( =)
1800 W( # < <= > >= IN)SH
13920 21690 MT
(BOOLEAN AND)
17400 W( OR)
2400 W( = # < <= > >= IN)SH
13920 22721 MT
(CHAR =)
25800 W( # < <= > >= IN)SH
13920 23752 MT
(enumeration =)
21600 W( # < <= > >= IN)SH
13920 24783 MT
(non-numeric subrange)
SH( =)
16200 W( # < <= > >= IN)SH
13920 25814 MT
(REAL *)
12000 W( /)
SH( +)
7200 W( -)
SH( =)
1800 W( # < <= > >=)SH
13920 26845 MT
(LONGREAL *)
9600 W( /)
SH( +)
7200 W( -)
SH( =)
1800 W( # < <= > >=)SH
13920 27876 MT
(BITSET *)
10800 W( /)
SH( +)
7200 W( -)
SH( =)
1800 W( #)
SH( <= >=)
1200 W( IN)SH
13920 28907 MT
(fixed-size array of CHAR)
SH( =)
13800 W( # < <= > >=)SH
13920 29938 MT
(fixed-size array)SH
13920 30969 MT
(open array)SH
13920 32000 MT
(dynamic array \050descriptor\051)
SH( =)
12600 W( #)SH
13920 33031 MT
(subarray)SH
13920 34062 MT
(record)SH
13920 35093 MT
(set *)
12600 W( /)
SH( +)
7200 W( -)
SH( =)
1800 W( #)
SH( <= >=)
1200 W( IN)SH
13920 36124 MT
(pointer =)
24000 W( #)SH
13920 37155 MT
(procedure =)
22800 W( #)SH
13920 38186 MT
(STRING =)
24600 W( # < <= > >=)SH
13920 39217 MT
(VOID =)
25800 W( #)SH
13920 40248 MT
(SYSTEM.WORD =)
21600 W( #)SH
13920 41279 MT
(SYSTEM.BYTE =)
21600 W( #)SH
13920 42310 MT
(Opaque =)
24600 W( #)SH
12720 44796 MT
(Unary Operators)SH
13920 46858 MT
(INTEGER +)
12600 W( -)SH
13920 47889 MT
(CARDINAL +)
12000 W( -)SH
13920 48920 MT
(UNSIGNED +)12000 W
13920 49951 MT
(numeric subrange)
SH( +)
7200 W( -)SH
13920 50982 MT
(SYSTEM.ADDRESS +)8400 W
13920 52013 MT
(BOOLEAN NOT)10200 W
13920 53044 MT
(REAL +)
14400 W( -)SH
13920 54075 MT
(LONGREAL +)
12000 W( -)SH
13920 55106 MT
(FLOATING-POINT +)
8400 W( -)SH
ES
%%Page: 49 50
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(49)SH
14 /Times-Roman AF
22866 11760 MT
(9. The Syntax of Statements)SH
12 SS 
13680 16041 MT
(9.1. What Is a Statement?)SH
11 SS 
13680 18092 MT
(There are several kinds of statements:)SH
16700 20043 MT
(assignments)SH
16700 21239 MT
(control structures)SH
10 /Courier AF
16700 22435 MT
(WITH)SH
11 /Times-Roman AF
19375 XM
(statements)SH
16700 23631 MT
(procedure calls)SH
13680 25383 MT
(Syntactically these are all the same kind of thing: statements.  In EBNF:)SH
10 /Courier AF
16176 27038 MT
(statement =)
600 W( [assignment)SH
22776 28069 MT
(| ProcedureCall)600 W
22776 29100 MT
(| IfStatement)600 W
22776 30131 MT
(| CaseStatement)600 W
22776 31162 MT
(| WhileStatement)600 W
22776 32193 MT
(| RepeatStatement)600 W
22776 33224 MT
(| LoopStatement)600 W
22776 34255 MT
(| ForStatement)600 W
22776 35286 MT
(| WithStatement)600 W
22776 36317 MT
(| ExitStatement)600 W
22776 37348 MT
(| ReturnStatement])600 W
16176 38379 MT
(statements = statement {";" statement})SH
11 /Times-Roman AF
13680 40996 MT
(Assignment, procedure call,)SH
10 /Courier AF
26295 XM
(RETURN)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
32308 XM
(EXIT)SH
11 /Times-Roman AF
34983 XM
(are elementary statements.)SH
13680 42373 MT
(The other statements \050Wirth sometimes calls them ``structured statements''\051)SH
13680 43750 MT
(are composed of parts that are themselves statements.)SH
13680 45678 MT
(Statements in a statement sequence are separated by semicolons.  Since the)SH
13680 47055 MT
(empty statement is allowed, you can \050and the format note in Section 22, page)SH
13680 48432 MT
(135, will tell you you should\051 end the last statement in a statement sequence)SH
13680 49809 MT
(with a semicolon.)SH
13680 51760 MT
(For assignments, see)SH
26640 XM
(Chapter 10, page 51.)SH
13680 52956 MT
(For control structures, see)SH
26640 XM
(Chapter 11, page 53.)SH
13680 54152 MT
(For)SH
10 /Courier AF
15483 XM
(WITH)SH
11 /Times-Roman AF
18158 XM
(statements, see)SH
26640 XM
(Section 2.8, page 13.)SH
13680 55348 MT
(For procedure calls, see)SH
26640 XM
(Section 12.2, page 61.)SH
12 SS 
13680 59629 MT
(9.2. A Statement Is Not an Expression)SH
11 SS 
13680 61680 MT
(Sometimes you'd like to be able to use statements as expressions. You can't.)SH
13680 63057 MT
(For instance, it may feel sensible to say:)SH
10 /Courier AF
16176 64712 MT
(x := IF a THEN b ELSE c END;)SH
11 /Times-Roman AF
13680 66498 MT
(but you have to say:)SH
10 /Courier AF
16176 68153 MT
(IF a THEN x := b ELSE x := c END;)SH
11 /Times-Roman AF
13680 69939 MT
(which doesn't seem as tight and nice.)SH
ES
%%Page: 50 51
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(50)SH
34804 XM
(The Syntax of Statements)SH
ES
%%Page: 51 52
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(51)SH
14 /Times-Roman AF
26112 11760 MT
(10. Assignments)SH
11 SS 
13680 15249 MT
(You set the value of a variable by doing an assignment.  The assignment)SH
13680 16626 MT
(operator is written)SH
10 /Courier AF
16176 18281 MT
(:=)SH
11 /Times-Roman AF
13680 20067 MT
(and pronounced ``gets.''  After an assignment is executed, the variable on the)SH
13680 21444 MT
(left-hand side has the value obtained by evaluating the expression on the)SH
13680 22821 MT
(right-hand-side. The)
275 W( old value of the variable is gone.  In EBNF:)SH
10 /Courier AF
16176 24476 MT
(assignment = designator ":=" expression)SH
11 /Times-Roman AF
13680 27093 MT
(The simplest kind of assignment looks like this:)SH
10 /Courier AF
16176 28748 MT
(y := 0;)SH
11 /Times-Roman AF
13680 30799 MT
(Any expression can serve as the right-hand side of an assignment statement,)SH
13680 32176 MT
(just so long as the type of the expression is assignable to the type of the)SH
13680 33553 MT
(variable. \050See)
275 W( Section 16.6, page 93, for type-checking rules.\051  For instance:)SH
10 /Courier AF
16176 35208 MT
(i := k;)SH
16176 36239 MT
(p := i = j;)SH
16176 37270 MT
(z := Math.Log\050x + y\051;)SH
16176 38301 MT
(s := ASCII.CharSet {"A".."Z", "a".."z"};)SH
16176 39332 MT
(b := \050\050i + j\051 * \050l + m\051\051 = 0;)SH
11 /Times-Roman AF
13680 41383 MT
(The left-hand side must be a variable designator \050Chapter 7, page 41\051:)SH
10 /Courier AF
16176 43038 MT
(array[i] := \050i + j\051 * \050i - j\051;)SH
16176 44069 MT
(table^.key := i;)SH
16176 45100 MT
(word[i+1].char := "A";)SH
16176 46131 MT
(GrandMama\050p\051^.retired := TRUE;)SH
16176 47162 MT
(VirtualAddressType\050a\051.page := 0;)SH
11 /Times-Roman AF
13680 48948 MT
(The variable designator can have any type except open array or subarray,)SH
13680 50325 MT
(except that you can assign a constant string to an open array.)SH
13680 52376 MT
(Syntactically, assignments are statements; see Section 9, page 49.)SH
13680 54304 MT
(Weird facts about getting extra tacked-on nulls in assigning literal strings on)SH
13680 55681 MT
(page 6.)SH
ES
%%Page: 52 53
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(52)SH
40331 XM
(Assignments)SH
ES
%%Page: 53 54
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(53)SH
14 /Times-Roman AF
24577 11760 MT
(11. Control Structures)SH
12 SS 
13680 16041 MT
(11.1.)SH
11 /Courier AF
16380 XM
(RETURN)SH
/Times-Roman SF
13680 18092 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 19747 MT
(ReturnStatement = RETURN [expression])SH
11 /Times-Roman AF
13680 22364 MT
(Executing a)SH
10 /Courier AF
19178 XM
(RETURN)SH
11 /Times-Roman AF
23053 XM
(statement terminates the current activation of the)SH
13680 23741 MT
(procedure or module initialization body in which it occurs.)SH
13680 25792 MT
(If the procedure returns a result, the)SH
10 /Courier AF
29682 XM
(RETURN)SH
11 /Times-Roman AF
33557 XM
(statement is the only way to)SH
13680 27169 MT
(terminate the procedure and specify the result:)SH
10 /Courier AF
16176 28824 MT
(PROCEDURE DegreesToRadians\050CONST degrees : INTEGER\051 : REAL;)SH
16176 29855 MT
(BEGIN)SH
18576 30886 MT
(RETURN 2.0 * 3.14159265358979 * FLOAT\050degrees\051 / 360.0;)SH
16176 31917 MT
(END RadiansFromDegrees;)SH
11 /Times-Roman AF
13680 33968 MT
(If the procedure doesn't return a result, it can terminate normally by)SH
13680 35345 MT
(executing a)SH
10 /Courier AF
18994 XM
(RETURN)SH
11 /Times-Roman AF
22869 XM
(statement or by falling off the bottom.)SH
10 /Courier AF
16176 37000 MT
(PROCEDURE Bump\050self : T\051;)SH
16176 38031 MT
(BEGIN)SH
18576 39062 MT
(IF self^.closed THEN RETURN END;)SH
18576 40093 MT
(INC\050self^.count\051;)SH
16176 41124 MT
(END Bump;)SH
11 /Times-Roman AF
13680 43175 MT
(For more about procedures, see Section 12.1, page 59.)SH
12 SS 
13680 47456 MT
(11.2.)SH
11 /Courier AF
16380 XM
(IF)SH
/Times-Roman SF
13680 49507 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 51162 MT
(IfStatement = IF BooleanExpression THEN statements)SH
24576 52193 MT
({ELSIF BooleanExpression THEN statements})SH
24576 53224 MT
([ELSE statements])SH
24576 54255 MT
(END)SH
11 /Times-Roman AF
13680 56872 MT
(The expression following an)SH
10 /Courier AF
26510 XM
(IF)SH
11 /Times-Roman AF
27985 XM
(or an)SH
10 /Courier AF
30489 XM
(ELSIF)SH
11 /Times-Roman AF
33764 XM
(is of type)SH
10 /Courier AF
38133 XM
(BOOLEAN)SH
11 /Times-Roman AF
(. The)275 W
13680 58249 MT
(expressions following the)SH
10 /Courier AF
25259 XM
(IF)SH
11 /Times-Roman AF
26734 XM
(and any)SH
10 /Courier AF
30460 XM
(ELSIF)SH
11 /Times-Roman AF
(s are evaluated in order till one)SH
13680 59626 MT
(yields the value)SH
10 /Courier AF
20859 XM
(TRUE)SH
11 /Times-Roman AF
(. Then)
275 W( its associated statement sequence is executed.)SH
13680 61554 MT
(If there's an)SH
10 /Courier AF
19267 XM
(ELSE)SH
11 /Times-Roman AF
21942 XM
(clause and if all the Booleans following the)SH
10 /Courier AF
41310 XM
(IF)SH
11 /Times-Roman AF
42785 XM
(and)SH
10 /Courier AF
13680 62931 MT
(ELSIF)SH
11 /Times-Roman AF
(s evaluate to)SH
10 /Courier AF
22453 XM
(FALSE)SH
11 /Times-Roman AF
(, the)SH
10 /Courier AF
27622 XM
(ELSE)SH
11 /Times-Roman AF
30297 XM
(statement sequence gets executed.)SH
ES
%%Page: 54 55
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(54)SH
37638 XM
(Control Structures)SH
11 /Times-Roman AF
11520 7955 MT
(For example:)SH
10 /Courier AF
14016 9610 MT
(IF parm^.kind = PARAMVAR THEN)SH
16416 10641 MT
(mode := EVALPUT;)SH
14016 11672 MT
(ELSIF parm^.reference THEN)SH
16416 12703 MT
(mode := EVALPOINT;)SH
14016 13734 MT
(ELSE)SH
16416 14765 MT
(mode := EVALGET;)SH
14016 15796 MT
(END;)SH
11 /Times-Roman AF
11520 17847 MT
(Pragmatic note in Section 20.1, page 125.)SH
12 SS 
11520 22128 MT
(11.3.)SH
11 /Courier AF
14220 XM
(CASE)SH
/Times-Roman SF
11520 24179 MT
(Syntax in EBNF:)SH
10 /Courier AF
14016 25834 MT
(CaseStatement = CASE OrdinalExpression OF case {"|" case})SH
23616 26865 MT
([ELSE statements] END)SH
14016 27896 MT
(case =)
5400 W( [CaseLabel {"," CaseLabel} ":" statements])SH
14016 28927 MT
(CaseLabel =)
2400 W( ConstExpr [".." ConstExpr])SH
11 /Times-Roman AF
11520 31544 MT
(A)SH
10 /Courier AF
12589 XM
(CASE)SH
11 /Times-Roman AF
15264 XM
(statement decides what statement sequence to execute according to)SH
11520 32921 MT
(the value of an expression.  The case labels are constant expressions or)SH
11520 34298 MT
(ranges of constant expressions.)SH
11520 36226 MT
(The basetype of the expression must be an ordinal type.  The types of the)SH
11520 37603 MT
(constant expressions in the case labels must be compatible with that type \050see)SH
11520 38980 MT
(Section 16.5.1, page 90\051.  No value may occur more than once in the case)SH
11520 40357 MT
(labels.)SH
11520 42285 MT
(At runtime, the expression is evaluated, its value is matched against the case)SH
11520 43662 MT
(labels, and the statement sequence whose label contains the value is)SH
11520 45039 MT
(executed. If)
275 W( the value of the expression doesn't occur in any of the labels,)SH
11520 46416 MT
(the)SH
10 /Courier AF
13139 XM
(ELSE)SH
11 /Times-Roman AF
15814 XM
(statement sequence is selected; if there is no)SH
10 /Courier AF
35546 XM
(ELSE)SH
11 /Times-Roman AF
(, you get a fatal)SH
11520 47793 MT
(error \050so it's fairly common for)SH
10 /Courier AF
25570 XM
(ELSE)SH
11 /Times-Roman AF
28245 XM
(to have an empty statement sequence\051.)SH
11520 49844 MT
(Straightforward example:)SH
10 /Courier AF
14016 51499 MT
(CASE v OF)SH
14016 52530 MT
(| "a", "e", "i", "o", "u":)SH
16416 53561 MT
(IO.WriteF\050IO.output, "Always a Vowel: %c\134n", v\051;)SH
14016 54592 MT
(| "y":)SH
16416 55623 MT
(IO.WriteF\050IO.output, "Sometimes a Vowel: %c\134n", v\051;)SH
14016 56654 MT
(| "w":)SH
16416 57685 MT
(IO.WriteF\050IO.output, "Welsh Vowel: %c\134n", v\051;)SH
14016 58716 MT
(| "l".."n", "r":)SH
16416 59747 MT
(IO.WriteF\050IO.output, "Liquid: %c\134n", v\051;)SH
14016 60778 MT
(| ELSE)SH
16416 61809 MT
(IO.WriteF\050IO.output, "Not a Vowel or Liquid: %c\134n", v\051;)SH
14016 62840 MT
(END;)SH
11 /Times-Roman AF
11520 64891 MT
(Pragmatic note in Section 20.1, page 125.)SH
ES
%%Page: 55 56
BS
0 SI
9 /Courier AF
13680 4270 MT
(CASE)SH
10 /Times-Bold AF
46880 XM
(55)SH
12 /Times-Roman AF
13680 8023 MT
(11.4.)SH
11 /Courier AF
16380 XM
(LOOP)SH
12 /Times-Roman AF
19320 XM
(and)SH
11 /Courier AF
21353 XM
(EXIT)SH
/Times-Roman SF
13680 10074 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 11729 MT
(LoopStatement = LOOP statements END)SH
16176 12760 MT
(ExitStatement = EXIT [LOOP | FOR | WHILE | REPEAT])SH
11 /Times-Roman AF
13680 15377 MT
(The statement sequence between)SH
10 /Courier AF
28400 XM
(LOOP)SH
11 /Times-Roman AF
31075 XM
(and)SH
10 /Courier AF
32938 XM
(END)SH
11 /Times-Roman AF
35013 XM
(is executed repeatedly.  One)SH
13680 16754 MT
(way to stop looping is to execute an)SH
10 /Courier AF
29750 XM
(EXIT)SH
11 /Times-Roman AF
32425 XM
(statement:)SH
10 /Courier AF
16176 18409 MT
(LOOP)SH
18576 19440 MT
(IO.WriteF\050IO.output, "%s", node^.name\051;)SH
18576 20471 MT
(node := node^.next;)SH
18576 21502 MT
(IF node = NIL THEN EXIT END;)SH
18576 22533 MT
(IO.WriteF\050IO.output, ", "\051;)SH
16176 23564 MT
(END;)SH
11 /Times-Roman AF
13680 25615 MT
(Another way to stop looping is to execute a)SH
10 /Courier AF
33079 XM
(RETURN)SH
11 /Times-Roman AF
36954 XM
(statement.)SH
13680 27543 MT
(Executing an)SH
10 /Courier AF
19728 XM
(EXIT)SH
11 /Times-Roman AF
22403 XM
(statement terminates the smallest enclosing)SH
10 /Courier AF
41742 XM
(LOOP)SH
11 /Times-Roman AF
(. So)
275 W( if)SH
13680 28920 MT
(you have a)SH
10 /Courier AF
18719 XM
(LOOP)SH
11 /Times-Roman AF
21394 XM
(within a)SH
10 /Courier AF
25244 XM
(LOOP)SH
11 /Times-Roman AF
(, you can't terminate the outer)SH
10 /Courier AF
41175 XM
(LOOP)SH
11 /Times-Roman AF
43850 XM
(using)SH
10 /Courier AF
13680 30297 MT
(EXIT)SH
11 /Times-Roman AF
(.)SH
13680 32225 MT
(You can also exit from)SH
10 /Courier AF
24035 XM
(FOR)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
26385 XM
(WHILE)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
31798 XM
(REPEAT)SH
11 /Times-Roman AF
35673 XM
(loops using)SH
10 /Courier AF
40991 XM
(EXIT FOR)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
13680 33602 MT
(EXIT WHILE)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
22093 XM
(EXIT REPEAT)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
29518 XM
(EXIT LOOP)SH
11 /Times-Roman AF
35193 XM
(is a synonym for just plain)SH
10 /Courier AF
13680 34979 MT
(EXIT)SH
11 /Times-Roman AF
(.)SH
/Times-Bold SF
13680 36907 MT
(Extension:)SH
10 /Courier AF
18967 XM
(EXIT LOOP)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24917 XM
(EXIT FOR)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
30267 XM
(EXIT WHILE)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
38680 XM
(EXIT REPEAT)SH
11 /Times-Roman AF
45555 XM
(are)SH
13680 38284 MT
(all non-standard.)SH
12 SS 
13680 42565 MT
(11.5.)SH
11 /Courier AF
16380 XM
(FOR)SH
/Times-Roman SF
13680 44616 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 46271 MT
(ForStatement = FOR ident ":=" OrdinalExpression)SH
25176 47302 MT
(TO OrdinalExpression)SH
25176 48333 MT
([BY ConstExpr] DO statements END)SH
11 /Times-Roman AF
13680 50950 MT
(The statement sequence in a)SH
10 /Courier AF
26355 XM
(FOR)SH
11 /Times-Roman AF
28430 XM
(statement gets executed repeatedly while a)SH
13680 52327 MT
(progression of values is assigned to its ``control variable,'' the variable)SH
13680 53704 MT
(whose name appears immediately after the)SH
10 /Courier AF
32738 XM
(FOR)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
16176 55359 MT
(FOR i := 0 TO HIGH\050a\051 DO a[i] := 0 END;)SH
11 /Times-Roman AF
13680 57145 MT
(In this example the control variable is)SH
10 /Courier AF
30573 XM
(i)SH
11 /Times-Roman AF
31448 XM
(and the progression of values)SH
13680 58522 MT
(assigned to it is)SH
10 /Courier AF
20770 XM
(0, 1, 2, 3, ..., HIGH\050a\051)SH
11 /Times-Roman AF
(.)SH
13680 60573 MT
(There's a more general form of)SH
10 /Courier AF
27726 XM
(FOR)SH
11 /Times-Roman AF
(-loop that allows the difference between)SH
13680 61950 MT
(successive values of the control variable to be something other than 1,)SH
13680 63327 MT
(including negative differences \050which let you iterate downwards instead of)SH
13680 64704 MT
(upwards\051. For)
275 W( instance:)SH
10 /Courier AF
16176 66359 MT
(FOR i := HIGH\050a\051 - 1 TO 0 BY -1 DO)SH
18576 67390 MT
(a[i + 1] := a[i];)SH
16176 68421 MT
(END;)SH
11 /Times-Roman AF
13680 70207 MT
(The)SH
10 /Courier AF
15665 XM
(BY)SH
11 /Times-Roman AF
(-value has to be a nonzero constant expression of basetype)SH
10 /Courier AF
42887 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 56 57
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(56)SH
37638 XM
(Control Structures)SH
11 /Times-Roman AF
11520 7955 MT
(The control variable must have an ordinal type.  It can't be a component of a)SH
11520 9332 MT
(structured variable \050i.e. can't contain any square brackets or uparrows and)SH
11520 10709 MT
(can contain only qualification dots, not record-field dots\051; it cannot be)SH
11520 12086 MT
(imported; it can be a value parameter, but it can't be a)SH
10 /Courier AF
35557 XM
(VAR)SH
11 /Times-Roman AF
37632 XM
(or)SH
10 /Courier AF
38823 XM
(CONST)SH
11 /Times-Roman AF
11520 13463 MT
(parameter. The)
275 W( value of the control variable after the end of the)SH
10 /Courier AF
39982 XM
(FOR)SH
11 /Times-Roman AF
(-loop is)SH
11520 14840 MT
(undefined.)SH
11520 16891 MT
(The from-value \050there's no explicit)SH
10 /Courier AF
27249 XM
(FROM)SH
11 /Times-Roman AF
(\051 and the)SH
10 /Courier AF
33772 XM
(TO)SH
11 /Times-Roman AF
(-value can be arbitrary)SH
11520 18268 MT
(expressions as long as their types allow the control variable to be assigned)SH
11520 19645 MT
(the from-value and compared to the)SH
10 /Courier AF
27524 XM
(TO)SH
11 /Times-Roman AF
(-value. \050That)
275 W( is, the from-value must)SH
11520 21022 MT
(be assignable to the control variable, and the)SH
10 /Courier AF
31405 XM
(TO)SH
11 /Times-Roman AF
(-value must be compatible)SH
11520 22399 MT
(with the control variable.\051)SH
11520 24327 MT
(The from-value and)SH
10 /Courier AF
20529 XM
(TO)SH
11 /Times-Roman AF
(-value are evaluated once before the)SH
10 /Courier AF
37911 XM
(FOR)SH
11 /Times-Roman AF
(-loop is)SH
11520 25704 MT
(entered \050so assignment statements in the loop body can't affect them\051.  If the)SH
11520 27081 MT
(from-value is greater than the)SH
10 /Courier AF
24805 XM
(TO)SH
11 /Times-Roman AF
(-value in an incrementing)SH
10 /Courier AF
37551 XM
(FOR)SH
11 /Times-Roman AF
(, or smaller)SH
11520 28458 MT
(than the)SH
10 /Courier AF
15308 XM
(TO)SH
11 /Times-Roman AF
(-value in an decrementing)SH
10 /Courier AF
28236 XM
(FOR)SH
11 /Times-Roman AF
(, then the body of the loop is not)SH
11520 29835 MT
(executed at all.)SH
11520 31886 MT
(A)SH
10 /Courier AF
12589 XM
(FOR)SH
11 /Times-Roman AF
(-loop of the form:)SH
10 /Courier AF
14016 33541 MT
(FOR i := fromExpr TO toExpr BY step DO statements END)SH
11 /Times-Roman AF
11520 35327 MT
(when step is positive can be considered as an abbreviation for:)SH
10 /Courier AF
14016 36982 MT
(fromTemp := fromExpr;)SH
14016 38013 MT
(toTemp := toExpr;)SH
14016 39044 MT
(IF fromTemp <= toTemp THEN)SH
16416 40075 MT
(i := fromTemp;)SH
16416 41106 MT
(LOOP)SH
18816 42137 MT
(statements;)SH
18816 43168 MT
(IF i+step > toTemp THEN EXIT END;)SH
18816 44199 MT
(INC\050i, step\051;)SH
16416 45230 MT
(END;)SH
14016 46261 MT
(END;)SH
11 /Times-Roman AF
11520 48047 MT
(and when step is negative can be considered as an abbreviation for:)SH
10 /Courier AF
14016 49702 MT
(fromTemp := fromExpr;)SH
14016 50733 MT
(toTemp := toExpr;)SH
14016 51764 MT
(IF fromTemp >= toTemp THEN)SH
16416 52795 MT
(i := fromTemp;)SH
16416 53826 MT
(LOOP)SH
18816 54857 MT
(statements;)SH
18816 55888 MT
(IF i-step < toTemp THEN EXIT END;)SH
18816 56919 MT
(DEC\050i, step\051;)SH
16416 57950 MT
(END;)SH
14016 58981 MT
(END;)SH
11 /Times-Roman AF
11520 60767 MT
(except that the value in control variable)SH
10 /Courier AF
29205 XM
(i)SH
11 /Times-Roman AF
30080 XM
(is undefined after the loop.)SH
11520 62818 MT
(Do not change the value of the control variable within the body of a)SH
10 /Courier AF
11520 64195 MT
(FOR)SH
11 /Times-Roman AF
(-loop; the behavior of a loop whose control variable has been tampered)SH
11520 65572 MT
(with is undefined.)SH
11520 67500 MT
(If runtime checking is enabled, the control variable is range-checked before)SH
11520 68877 MT
(the loop is entered, rather than every iteration.  First, the from-value is)SH
11520 70254 MT
(checked to make sure that it can be assigned to the control variable.  Then, if)SH
11520 71631 MT
(the loop will be executed at least once, the)SH
10 /Courier AF
30458 XM
(TO)SH
11 /Times-Roman AF
(-value is checked.)SH
ES
%%Page: 57 58
BS
0 SI
9 /Courier AF
13680 4270 MT
(FOR)SH
10 /Times-Bold AF
46880 XM
(57)SH
12 /Times-Roman AF
13680 8023 MT
(11.6.)SH
11 /Courier AF
16380 XM
(WHILE)SH
/Times-Roman SF
13680 10074 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 11729 MT
(WhileStatement = WHILE BooleanExpression DO statements END)SH
11 /Times-Roman AF
13680 14346 MT
(The expression after the)SH
10 /Courier AF
24552 XM
(WHILE)SH
11 /Times-Roman AF
27827 XM
(in a)SH
10 /Courier AF
29721 XM
(WHILE)SH
11 /Times-Roman AF
32996 XM
(statement has to be of type)SH
10 /Courier AF
13680 15723 MT
(BOOLEAN)SH
11 /Times-Roman AF
(. The)
275 W( expression gets evaluated before each execution of the)SH
13680 17100 MT
(statement sequence, and the repetition stops as soon as it yields the value)SH
10 /Courier AF
13680 18477 MT
(FALSE)SH
11 /Times-Roman AF
(. So)
275 W( the statement sequence may never be executed.)SH
13680 20528 MT
(Example:)SH
10 /Courier AF
16176 22183 MT
(WHILE node # NIL DO)SH
18576 23214 MT
(ProcessNode\050node\051;)SH
18576 24245 MT
(node := node^.next;)SH
16176 25276 MT
(END;)SH
11 /Times-Roman AF
13680 27327 MT
(Pragmatic note in Section 20.1, page 125.)SH
12 SS 
13680 31608 MT
(11.7.)SH
11 /Courier AF
16380 XM
(REPEAT)SH
/Times-Roman SF
13680 33659 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 35314 MT
(RepeatStatement = REPEAT statements UNTIL BooleanExpression)SH
11 /Times-Roman AF
13680 37931 MT
(The expression after the)SH
10 /Courier AF
24552 XM
(UNTIL)SH
11 /Times-Roman AF
27827 XM
(in a)SH
10 /Courier AF
29721 XM
(REPEAT)SH
11 /Times-Roman AF
33596 XM
(statement has to be of type)SH
10 /Courier AF
13680 39308 MT
(BOOLEAN)SH
11 /Times-Roman AF
(. The)
275 W( expression gets evaluated after each execution of the)SH
13680 40685 MT
(statement sequence, and the repetition stops as soon as it yields the value)SH
10 /Courier AF
13680 42062 MT
(TRUE)SH
11 /Times-Roman AF
(. So)
275 W( the statement sequence is executed at least once.)SH
13680 44113 MT
(Example:)SH
10 /Courier AF
16176 45768 MT
(REPEAT)SH
18576 46799 MT
(k := i MOD j;)SH
18576 47830 MT
(i := j;)SH
18576 48861 MT
(j := k;)SH
16176 49892 MT
(UNTIL j = 0;)SH
ES
%%Page: 58 59
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(58)SH
37638 XM
(Control Structures)SH
ES
%%Page: 59 60
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(59)SH
14 /Times-Roman AF
26619 11760 MT
(12. Procedures)SH
11 SS 
13680 15249 MT
(This chapter describes ordinary procedures written in Modula-2.)SH
13680 17177 MT
(If you want to call procedures written in another language from Modula-2 or)SH
13680 18554 MT
(vice-versa, you should read Chapter 19, page 109.  See especially Section)SH
13680 19931 MT
(19.3.1, page 111 for information on controlling the external name of a)SH
13680 21308 MT
(procedure using)SH
10 /Courier AF
21010 XM
(@EXTERNAL)SH
11 /Times-Roman AF
26685 XM
(or a constant string, and Section 19.4, page 113)SH
13680 22685 MT
(for information on procedure calling sequences.)SH
12 SS 
13680 26966 MT
(12.1. Procedure Declarations)SH
11 SS 
13680 29007 MT
(Remember that the keyword)SH
10 /Courier AF
26448 XM
(PROCEDURE)SH
11 /Times-Roman AF
32123 XM
(is used both for procedures and for)SH
13680 30384 MT
(procedure types.  In this section we're going to be talking about procedures)SH
13680 31761 MT
(declarations, not procedure types.  However, all the information about)SH
13680 33138 MT
(parameter passing applies to procedure types as well.)SH
13680 35189 MT
(In EBNF:)SH
10 /Courier AF
16176 36844 MT
(heading =)
3000 W( PROCEDURE ProcName [FormalParams] [":" qualident])SH
16176 37875 MT
(FormalParams = "\050" [FormalParam {";" FormalParam}] "\051")SH
16176 38906 MT
(FormalParam =)
600 W( [VAR | CONST] idents ":" [{[SUB]ARRAY OF} qualident])SH
16176 39937 MT
(ProcName =)
2400 W( [@INLINE | @EXTERNAL] ident | ident string)SH
11 /Times-Roman AF
13680 42554 MT
(Some idealized procedure headings:)SH
10 /Courier AF
16176 44209 MT
(PROCEDURE P;)SH
16176 45240 MT
(PROCEDURE P\050\051;)SH
16176 46271 MT
(PROCEDURE P\050param1 : T1; param2 : T2; VAR param3, param4 : T3\051;)SH
16176 47302 MT
(PROCEDURE P\050CONST param : T\051;)SH
16176 48333 MT
(PROCEDURE P\050CONST param1, param2 : T1\051 : T2;)SH
16176 49364 MT
(PROCEDURE @INLINE P\050param : T\051;)SH
11 /Times-Roman AF
13680 51415 MT
(The heading of a procedure declaration specifies the procedure's name and)SH
13680 52792 MT
(its ``formal'' parameters, and its result, if any.  \050A procedure heading with no)SH
13680 54169 MT
(parameter list is equivalent to a procedure with an empty parameter list.\051)SH
13680 55546 MT
(The procedure body contains declarations and statements.  The procedure's)SH
13680 56923 MT
(name is repeated at the end of the procedure body.)SH
13680 58974 MT
(For instance:)SH
10 /Courier AF
16176 60629 MT
(PROCEDURE Fill\050CONST src : Text; CONST ch : CHAR\051 : Text;)SH
16176 61660 MT
(BEGIN)SH
18576 62691 MT
(Statements;)SH
16176 63722 MT
(END Fill;)SH
11 /Times-Roman AF
13680 65773 MT
(If the procedure heading specifies a result, the body of the procedure must)SH
13680 67150 MT
(contain one or more)SH
10 /Courier AF
22782 XM
(RETURN)SH
11 /Times-Roman AF
26657 XM
(statements; you'll get either a compile-time or a)SH
13680 68527 MT
(runtime error if you omit a necessary)SH
10 /Courier AF
30265 XM
(RETURN)SH
11 /Times-Roman AF
34140 XM
(statement. The)
275 W( expression you)SH
13680 69904 MT
(return must be assignable to the type of the result you declared; see Section)SH
13680 71281 MT
(16.6, page 93.)SH
ES
%%Page: 60 61
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(60)SH
40888 XM
(Procedures)SH
11 /Times-Roman AF
11520 7955 MT
(A formal parameter name stands for the actual parameter specified when the)SH
11520 9332 MT
(procedure gets called.  There are three kinds of formal parameters: ``)SH
10 /Courier AF
(VAR)SH
11 /Times-Roman AF
11520 10709 MT
(parameters,'' ``)SH
10 /Courier AF
(CONST)SH
11 /Times-Roman AF
21633 XM
(parameters,'' and ``value parameters.'')SH
10 /Courier AF
39372 XM
(VAR)SH
11 /Times-Roman AF
11520 12086 MT
(parameters are indicated by the symbol)SH
10 /Courier AF
29052 XM
(VAR)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
31402 XM
(CONST)SH
11 /Times-Roman AF
34677 XM
(parameters by the)SH
11520 13463 MT
(symbol)SH
10 /Courier AF
15035 XM
(CONST)SH
11 /Times-Roman AF
(, and value parameters by the absence of the symbol)SH
10 /Courier AF
41278 XM
(VAR)SH
11 /Times-Roman AF
43353 XM
(or)SH
10 /Courier AF
11520 14840 MT
(CONST)SH
11 /Times-Roman AF
(. For)
275 W( example:)SH
10 /Courier AF
14016 16495 MT
(PROCEDURE AllocateGlobal\050CONST name)
SH( :)
1800 W( String;)SH
32616 17526 MT
(size :)
1800 W( MemoryOffset;)SH
29016 18557 MT
(VAR address)
1200 W( : Address\051;)SH
11520 20343 MT
(name)SH
11 /Times-Roman AF
14195 XM
(is a)SH
10 /Courier AF
15967 XM
(CONST)SH
11 /Times-Roman AF
19242 XM
(parameter,)SH
10 /Courier AF
24188 XM
(size)SH
11 /Times-Roman AF
26863 XM
(is a value parameter, and)SH
10 /Courier AF
38101 XM
(address)SH
11 /Times-Roman AF
42576 XM
(is a)SH
10 /Courier AF
11520 21720 MT
(VAR)SH
11 /Times-Roman AF
13595 XM
(parameter.)SH
11520 23771 MT
(You use a)SH
10 /Courier AF
16193 XM
(VAR)SH
11 /Times-Roman AF
18268 XM
(parameter when you want to pass a value out of a procedure)SH
11520 25148 MT
(\050and possibly also into the procedure\051.)SH
10 /Courier AF
28932 XM
(VAR)SH
11 /Times-Roman AF
31007 XM
(parameters use call by reference:)SH
11520 26525 MT
(the compiler passes the address of the variable, and this address is implicitly)SH
11520 27902 MT
(dereferenced whenever you access the formal parameter.)SH
11520 29953 MT
(You use a)SH
10 /Courier AF
16193 XM
(CONST)SH
11 /Times-Roman AF
19468 XM
(parameter when you want to pass a value into a procedure)SH
11520 31330 MT
(which will only access the value of the parameter, and not modify it.  You)SH
11520 32707 MT
(cannot assign to a)SH
10 /Courier AF
19646 XM
(CONST)SH
11 /Times-Roman AF
22921 XM
(parameter, nor pass it as a)SH
10 /Courier AF
34618 XM
(VAR)SH
11 /Times-Roman AF
36693 XM
(parameter to)SH
11520 34084 MT
(another procedure.)SH
10 /Courier AF
20314 XM
(CONST)SH
11 /Times-Roman AF
23589 XM
(parameters use call by copy for small objects, and)SH
11520 35461 MT
(use call by reference for large objects.  The compiler does not detect the)SH
11520 36838 MT
(aliasing of a)SH
10 /Courier AF
17171 XM
(CONST)SH
11 /Times-Roman AF
20446 XM
(parameter with a global variable; the following program)SH
11520 38215 MT
(will write ``)SH
10 /Courier AF
(3 5)SH
11 /Times-Roman AF
('' rather than the expected ``)SH
10 /Courier AF
(3 3)SH
11 /Times-Roman AF
('':)SH
10 /Courier AF
14016 39870 MT
(TYPE)SH
16416 40901 MT
(LargeObject = RECORD i, j, k : INTEGER END;)SH
14016 41932 MT
(VAR)SH
15216 42963 MT
(global : LargeObject;)SH
14016 45025 MT
(PROCEDURE Fooled\050CONST local : LargeObject\051;)SH
14016 46056 MT
(BEGIN)SH
15216 47087 MT
(IO.WriteF\050IO.output, "%d ", local.j\051;)SH
15216 48118 MT
(global.j := 5;)SH
15216 49149 MT
(IO.WriteF\050IO.output, "%d", local.j\051;)SH
14016 50180 MT
(END Fooled;)SH
14016 52242 MT
(BEGIN)SH
15216 53273 MT
(global.i := 2;)SH
15216 54304 MT
(global.j := 3;)SH
15216 55335 MT
(global.k := 4;)SH
15216 56366 MT
(Fooled\050global\051;)SH
11 /Times-Roman AF
11520 58417 MT
(You use a value parameter as a shorthand for passing a value into a)SH
11520 59794 MT
(procedure then making a local copy of that value.  A value parameter can be)SH
11520 61171 MT
(modified by the calling procedure, but this change will not be reflected)SH
11520 62548 MT
(outside the procedure.)SH
11520 64476 MT
(Anything you declare within the procedure body is local to the procedure;)SH
11520 65853 MT
(see Section 2.4, page 9.)SH
11520 67781 MT
(Procedure declarations can be nested inside procedures or modules.)SH
11520 69709 MT
(Procedures can be directly or indirectly recursive; no special declaration is)SH
11520 71086 MT
(required.)SH
ES
%%Page: 61 62
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Procedure Declarations)SH
46880 XM
(61)SH
12 /Times-Roman AF
13680 8023 MT
(12.2. Procedure Calls)SH
11 SS 
13680 10074 MT
(There are two kinds of procedure call:)SH
6 /Symbol AF
15879 12025 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(procedure call as a statement, for a procedure that returns no)SH
16430 13402 MT
(value)SH
6 /Symbol AF
15879 15330 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(procedure call as part of an expression, for a procedure that does)SH
16430 16707 MT
(return a value)SH
13680 18758 MT
(The correspondence between the actual parameters, the ones that you give to)SH
13680 20135 MT
(a procedure in calling it, and their matching formals, the ones that appeared)SH
13680 21512 MT
(in the declaration, depends entirely on ordering-)SH
34747 XM
(-)SH
35013 XM
(-the first actual matches the)SH
13680 22889 MT
(first formal, the second actual matches the second formal, etc.)SH
13680 24817 MT
(See Section 16.7, page 93, for what kinds of actuals you can pass to what)SH
13680 26194 MT
(kinds of formals.)SH
13680 28122 MT
(When you call a procedure, the actual parameter you supply to a)SH
10 /Courier AF
42297 XM
(VAR)SH
11 /Times-Roman AF
44372 XM
(formal)SH
13680 29499 MT
(has to be a variable designator.  The identity of the variable is determined at)SH
13680 30876 MT
(the time of the call and does not change during the call.  If you use the)SH
10 /Courier AF
13680 32253 MT
(@ALIGN)SH
11 /Times-Roman AF
17555 XM
(or)SH
10 /Courier AF
18746 XM
(@SIZE)SH
11 /Times-Roman AF
22021 XM
(constructors to control the layout of variables in memory,)SH
13680 33630 MT
(you may not be able to pass those variables by)SH
10 /Courier AF
34392 XM
(VAR)SH
11 /Times-Roman AF
(; see Section 18.3, page)SH
13680 35007 MT
(104.)SH
13680 36935 MT
(The actual parameter you supply to a)SH
10 /Courier AF
30265 XM
(CONST)SH
11 /Times-Roman AF
33540 XM
(or value formal can be any)SH
13680 38312 MT
(\050passable\051 expression.  The expression is evaluated at the time of the call and)SH
13680 39689 MT
(is then assigned to the formal.  The name of the formal behaves like a)SH
13680 41066 MT
(constant or local variable inside the procedure.)SH
13680 43117 MT
(Example of procedure calls:)SH
10 /Courier AF
16176 44772 MT
(ch := GetChar\050f\051;)SH
16176 45803 MT
(PutChar\050f, ch\051;)SH
12 /Times-Roman AF
13680 50084 MT
(12.3. Inline Procedures)SH
11 SS 
13680 52125 MT
(If a procedure is small and you are worried about call and return overhead,)SH
13680 53502 MT
(you can declare it an inline procedure using)SH
10 /Courier AF
33166 XM
(@INLINE)SH
11 /Times-Roman AF
(. Each)
275 W( time you ``call'')SH
13680 54879 MT
(the procedure, the compiler does not generate a procedure call, but instead)SH
13680 56256 MT
(copies the procedure code ``in-line.''  Unlike macros in other languages,)SH
13680 57633 MT
(inline procedures have parameter-passing semantics that are identical to)SH
13680 59010 MT
(normal procedures.)SH
13680 60938 MT
(For example, the compiler itself uses inline procedures like)SH
10 /Courier AF
40012 XM
(GenOp)SH
11 /Times-Roman AF
13680 62315 MT
(extensively:)SH
10 /Courier AF
16176 63970 MT
(PROCEDURE @INLINE GenOp\050CONST op : PCodeOp\051;)SH
16176 65001 MT
(BEGIN)SH
18576 66032 MT
(WriteF\050codeFile, '\134t%s\134t', pCodeOpNames[op]\051;)SH
16176 67063 MT
(END GenOp;)SH
11 /Times-Roman AF
13680 68991 MT
(Inline procedures impose some implementation restrictions.  Normally, when)SH
13680 70368 MT
(you compile a module, you can import a definition module that has no)SH
13680 71745 MT
(implementation module or an incomplete implementation module.  But if you)SH
ES
%%Page: 62 63
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(62)SH
40888 XM
(Procedures)SH
11 /Times-Roman AF
11520 7955 MT
(declare an inline procedure in the definition module, the compiler needs to)SH
11520 9332 MT
(know what the procedure body looks like.  Before you can import such a)SH
11520 10709 MT
(definition module, you must create the corresponding implementation)SH
11520 12086 MT
(module, and you must define the body of the inline procedure.  You must)SH
11520 13463 MT
(also declare the procedure)SH
10 /Courier AF
23306 XM
(@INLINE)SH
11 /Times-Roman AF
27781 XM
(in both the definition and)SH
11520 14840 MT
(implementation modules.)SH
11520 16768 MT
(All modules that import inline procedures depend upon the procedure)SH
11520 18145 MT
(definition in the implementation module.  The inter-module checker is not)SH
11520 19522 MT
(very intelligent about this dependency, and just recompiles all dependent)SH
11520 20899 MT
(modules if the implementation module is modified in any way.  Inline)SH
11520 22276 MT
(procedures are best relegated to an infrequently-edited implementation)SH
11520 23653 MT
(module.)SH
11520 25581 MT
(Inline procedures cannot be recursive, either directly or indirectly.  You)SH
11520 26958 MT
(cannot define nested procedures or modules within an inline procedure.)SH
/Courier SF
11520 28886 MT
([[)SH
/Times-Roman SF
13500 XM
(I vaguely remember something about inline procedures, dynamic arrays,)SH
11520 30263 MT
(and the optimizer all used in conjunction as causing a problem.  This is not)SH
11520 31640 MT
(really an implementation restriction, but a bug.)SH
/Courier SF
32832 XM
(]])SH
/Times-Roman SF
11520 33568 MT
(Pragmatic note in Section 20.1, page 125.)SH
/Times-Bold SF
11520 35496 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Inline procedure are non-standard.)SH
ES
%%Page: 63 64
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(63)SH
14 /Times-Roman AF
23955 11760 MT
(13. Supplied Procedures)SH
11 SS 
13680 15249 MT
(Here's a classification of the supplied procedures:)SH
13680 17200 MT
(Ordinal Arithmetic)SH
10 /Courier AF
16080 18396 MT
(ABS CAP DEC INC MAX MIN)600 W
11 /Times-Roman AF
13680 20788 MT
(Conversions)SH
10 /Courier AF
16080 21984 MT
(CHR FLOAT LONGFLOAT ODD ORD TRUNC VAL)600 W
11 /Times-Roman AF
13680 24376 MT
(Sets)SH
10 /Courier AF
16080 25572 MT
(EXCL INCL)600 W
11 /Times-Roman AF
13680 27964 MT
(Storage Allocation)SH
10 /Courier AF
16080 29160 MT
(DISPOSE LOCAL NEW)600 W
11 /Times-Roman AF
13680 31552 MT
(Control)SH
10 /Courier AF
16080 32748 MT
(ASSERT HALT)600 W
11 /Times-Roman AF
13680 35140 MT
(Constructors and Deconstructors)SH
10 /Courier AF
16080 36336 MT
(DESCRIPTOR FIRST LAST LOW HIGH NUMBER)600 W
11 /Times-Roman AF
13680 38264 MT
(We're going to try to present these supplied procedures as if they were in a)SH
13680 39641 MT
(definition module.  But many of the functions can't be expressed in ordinary)SH
13680 41018 MT
(Modula-2. Liberties)
275 W( are taken as necessary when the language is inadequate)SH
13680 42395 MT
(to describe procedures like)SH
10 /Courier AF
25774 XM
(NEW)SH
11 /Times-Roman AF
(, which takes arguments of any pointer type;)SH
13680 43772 MT
(or)SH
10 /Courier AF
14871 XM
(ABS)SH
11 /Times-Roman AF
(, which returns a value of the same type as its parameter.)SH
13680 45700 MT
(Some standard procedures take either an)SH
10 /Courier AF
31760 XM
(INTEGER)SH
11 /Times-Roman AF
36235 XM
(or)SH
10 /Courier AF
37426 XM
(UNSIGNED)SH
11 /Times-Roman AF
42501 XM
(argument.)SH
13680 47077 MT
(Other standard procedures are described as taking only an)SH
10 /Courier AF
39425 XM
(INTEGER)SH
11 /Times-Roman AF
13680 48454 MT
(argument; these procedures also accept)SH
10 /Courier AF
31179 XM
(UNSIGNED)SH
11 /Times-Roman AF
36254 XM
(arguments, which are)SH
13680 49831 MT
(runtime checked to ensure that they are in the range)SH
10 /Courier AF
36708 XM
([0..LAST\050INTEGER)SH
11 /Times-Roman AF
(\051.)SH
13680 51759 MT
(The following types are frequently used in the descriptions below:)SH
10 /Courier AF
16176 53414 MT
(TYPE)SH
18576 54445 MT
(Numeric = INTEGER | UNSIGNED | Subrange of INTEGER)SH
23376 55476 MT
(| Subrange of UNSIGNED | REAL | LONGREAL;)SH
18576 57538 MT
(Ordinal = INTEGER | UNSIGNED | BOOLEAN | CHAR)SH
23376 58569 MT
(| Enumeration | Subrange)SH
18576 60631 MT
(Natural = [1 .. LAST\050INTEGER\051];)SH
ES
%%Page: 64 65
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(64)SH
36858 XM
(Supplied Procedures)SH
12 /Times-Roman AF
11520 8023 MT
(13.1. Ordinal Arithmetic)SH
11520 11218 MT
(13.1.1.)SH
11 /Courier AF
15120 XM
(ABS)SH
10 SS 
14016 13128 MT
(PROCEDURE ABS\050CONST x : INTEGER\051  : INTEGER;)SH
14016 14159 MT
(PROCEDURE ABS\050CONST x : REAL\051)
SH( :)
2400 W( REAL;)SH
14016 15190 MT
(PROCEDURE ABS\050CONST x : LONGREAL\051 : LONGREAL;)SH
11520 17118 MT
(ABS)SH
11 /Times-Roman AF
13595 XM
(returns the absolute value of its argument.)SH
12 SS 
11520 20313 MT
(13.1.2.)SH
11 /Courier AF
15120 XM
(CAP)SH
10 SS 
14016 22223 MT
(PROCEDURE CAP\050CONST x : CHAR\051 : CHAR;)SH
11520 24151 MT
(CAP)SH
11 /Times-Roman AF
13595 XM
(returns the corresponding upper-case letter if its argument is a)SH
11520 25528 MT
(lower-case letter \050"a".."z"\051, otherwise)SH
10 /Courier AF
28247 XM
(CAP)SH
11 /Times-Roman AF
30322 XM
(just returns its argument.)SH
12 SS 
11520 28723 MT
(13.1.3.)SH
11 /Courier AF
15120 XM
(DEC)SH
10 SS 
14016 30633 MT
(PROCEDURE DEC\050VAR x : Ordinal\051;)SH
14016 31664 MT
(PROCEDURE DEC\050VAR x : Ordinal; CONST n : INTEGER\051;)SH
11520 33592 MT
(DEC)SH
11 /Times-Roman AF
13595 XM
(with one argument decrements the ordinal value of its parameter by 1.)SH
10 /Courier AF
11520 34969 MT
(DEC)SH
11 /Times-Roman AF
13595 XM
(with two argument decrements the ordinal value of its first parameter by)SH
11520 36346 MT
(the second parameter.)SH
11520 38274 MT
(You cannot use)SH
10 /Courier AF
18637 XM
(DEC)SH
11 /Times-Roman AF
20712 XM
(if the first argument has a non-contiguous enumeration)SH
11520 39651 MT
(type.)SH
/Courier SF
11520 41579 MT
([[)SH
/Times-Roman SF
13500 XM
(The Titan version does not let you)SH
10 /Courier AF
28867 XM
(INC/DEC)SH
11 /Times-Roman AF
33342 XM
(a variable that is not byte)SH
11520 42956 MT
(aligned.)SH
/Courier SF
15693 XM
(]])SH
/Times-Roman SF
11520 44884 MT
(In both cases the decrement is checked to be sure the result is within bounds)SH
11520 46261 MT
(if runtime checking is enabled.  Underflow or overflow is not detected.)SH
/Courier SF
43317 XM
([[)SH
/Times-Roman SF
11520 47638 MT
(It's not actually range-checked, but should be.)SH
/Courier SF
32522 XM
(]])SH
12 /Times-Roman AF
11520 50833 MT
(13.1.4.)SH
11 /Courier AF
15120 XM
(INC)SH
10 SS 
14016 52743 MT
(PROCEDURE INC\050VAR x : Ordinal\051;)SH
14016 53774 MT
(PROCEDURE INC\050VAR x : Ordinal; CONST n : INTEGER\051;)SH
11520 55702 MT
(INC)SH
11 /Times-Roman AF
13595 XM
(with one argument increments the ordinal value of its parameter by 1.)SH
10 /Courier AF
11520 57079 MT
(INC)SH
11 /Times-Roman AF
13595 XM
(with two argument increments the ordinal value of its first parameter by)SH
11520 58456 MT
(the second parameter.)SH
11520 60384 MT
(You cannot use)SH
10 /Courier AF
18637 XM
(INC)SH
11 /Times-Roman AF
20712 XM
(if the first argument has a non-contiguous enumeration)SH
11520 61761 MT
(type.)SH
11520 63689 MT
(In both cases the increment is checked to be sure the result is within bounds)SH
11520 65066 MT
(if runtime checking is enabled.  Underflow or overflow is not detected.)SH
/Courier SF
43317 XM
([[)SH
/Times-Roman SF
11520 66443 MT
(It's not actually range-checked, but should be.)SH
/Courier SF
32522 XM
(]])SH
ES
%%Page: 65 66
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Ordinal Arithmetic)SH
46880 XM
(65)SH
12 /Times-Roman AF
13680 8023 MT
(13.1.5.)SH
11 /Courier AF
17280 XM
(MAX)SH
10 SS 
16176 9933 MT
(PROCEDURE MAX\050CONST a, b : Numeric\051 : Numeric;)SH
13680 11861 MT
(MAX)SH
11 /Times-Roman AF
15755 XM
(returns the larger of its two arguments.  Both arguments must have the)SH
13680 13238 MT
(same basetype-)SH
20329 XM
(-)SH
20595 XM
(-in particular, you cannot compare an)SH
10 /Courier AF
37362 XM
(INTEGER)SH
11 /Times-Roman AF
41837 XM
(to an)SH
10 /Courier AF
13680 14615 MT
(UNSIGNED)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 16543 MT
(MAX)SH
11 /Times-Roman AF
15755 XM
(is also a synonym for)SH
10 /Courier AF
25440 XM
(LAST)SH
11 /Times-Roman AF
28115 XM
(for compatibility with Wirth's awkward)SH
13680 17920 MT
(choice of names; see Section 13.6.3, page 72.)SH
/Times-Bold SF
13680 19848 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2,)SH
10 /Courier AF
29047 XM
(MAX\050T\051)SH
11 /Times-Roman AF
32922 XM
(returns ``the maximum value of)SH
13680 21225 MT
(type T.'' It is unclear what types are valid arguments.)SH
/Courier SF
13680 23153 MT
([[)SH
/Times-Roman SF
15660 XM
(There's no particular reason why)SH
10 /Courier AF
30471 XM
(MIN)SH
11 /Times-Roman AF
32546 XM
(and)SH
10 /Courier AF
34409 XM
(MAX)SH
11 /Times-Roman AF
36484 XM
(shouldn't work on)SH
13680 24530 MT
(Ordinal | Numeric.  I suppose I should make this change.)SH
/Courier SF
39364 XM
(]])SH
12 /Times-Roman AF
13680 27725 MT
(13.1.6.)SH
11 /Courier AF
17280 XM
(MIN)SH
10 SS 
16176 29635 MT
(PROCEDURE MIN\050CONST a, b : Numeric\051 : Numeric;)SH
13680 31563 MT
(MIN)SH
11 /Times-Roman AF
15755 XM
(returns the smaller of its two arguments.  Both arguments must have the)SH
13680 32940 MT
(same basetype-)SH
20329 XM
(-)SH
20595 XM
(-in particular, you cannot compare an)SH
10 /Courier AF
37362 XM
(INTEGER)SH
11 /Times-Roman AF
41837 XM
(to an)SH
10 /Courier AF
13680 34317 MT
(UNSIGNED)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 36245 MT
(MIN)SH
11 /Times-Roman AF
15755 XM
(is also a synonym for)SH
10 /Courier AF
25440 XM
(FIRST)SH
11 /Times-Roman AF
(; see Section 13.6.2, page 71.)SH
/Times-Bold SF
13680 38173 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2,)SH
10 /Courier AF
29047 XM
(MIN\050T\051)SH
11 /Times-Roman AF
32922 XM
(returns ``the minimum value of)SH
13680 39550 MT
(type T.'' It is unclear what types are valid arguments.)SH
ES
%%Page: 66 67
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(66)SH
36858 XM
(Supplied Procedures)SH
12 /Times-Roman AF
11520 8023 MT
(13.2. Conversions)SH
11520 11218 MT
(13.2.1.)SH
11 /Courier AF
15120 XM
(CHR)SH
10 SS 
14016 13128 MT
(PROCEDURE CHR\050CONST x : [0..255]\051: CHAR;)SH
11520 15056 MT
(CHR)SH
11 /Times-Roman AF
13595 XM
(converts its argument into the character with that ordinal value.  Right)SH
11520 16433 MT
(now no runtime checking is done.)SH
10 /Courier AF
26978 XM
(CHR)SH
11 /Times-Roman AF
29053 XM
(is an abbreviation for:)SH
10 /Courier AF
14016 18088 MT
(VAL\050CHAR, x\051)SH
12 /Times-Roman AF
11520 21283 MT
(13.2.2.)SH
11 /Courier AF
15120 XM
(FLOAT)SH
10 SS 
14016 23193 MT
(PROCEDURE FLOAT\050CONST x : INTEGER\051  : REAL;)SH
14016 24224 MT
(PROCEDURE FLOAT\050CONST x : LONGREAL\051 : REAL;)SH
11520 26152 MT
(FLOAT)SH
11 /Times-Roman AF
14795 XM
(converts a number into a)SH
10 /Courier AF
25944 XM
(REAL)SH
11 /Times-Roman AF
(.)SH
11520 28080 MT
(If the basetype of the parameter is)SH
10 /Courier AF
26759 XM
(INTEGER)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
31509 XM
(FLOAT)SH
11 /Times-Roman AF
34784 XM
(returns the)SH
10 /Courier AF
39732 XM
(REAL)SH
11 /Times-Roman AF
42407 XM
(that)SH
11520 29457 MT
(most closely approximates that integer-)SH
28772 XM
(-)SH
29038 XM
(-some precision may be lost when)SH
11520 30834 MT
(numbers larger than 24 bits are converted.)SH
11520 32762 MT
(If the basetype is)SH
10 /Courier AF
19278 XM
(UNSIGNED)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24628 XM
(FLOAT)SH
11 /Times-Roman AF
27903 XM
(first ensures that the value is between 0)SH
11520 34139 MT
(and)SH
10 /Courier AF
13383 XM
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
21458 XM
(if runtime checking is enabled, then returns the closest)SH
10 /Courier AF
11520 35516 MT
(REAL)SH
11 /Times-Roman AF
(. If)
275 W( runtime checking is disabled,)SH
10 /Courier AF
28919 XM
(FLOAT)SH
11 /Times-Roman AF
32194 XM
(of an)SH
10 /Courier AF
34698 XM
(UNSIGNED x)SH
11 /Times-Roman AF
40973 XM
(returns)SH
10 /Courier AF
11520 36893 MT
(FLOAT\050INTEGER\050x\051\051)SH
11 /Times-Roman AF
(.)SH
11520 38821 MT
(If the basetype is)SH
10 /Courier AF
19278 XM
(LONGREAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24628 XM
(FLOAT)SH
11 /Times-Roman AF
27903 XM
(simply truncates the extra digits of)SH
11520 40198 MT
(precision \050rather than rounding\051.)SH
/Courier SF
26364 XM
([[)SH
/Times-Roman SF
28344 XM
(It should round, which would mean)SH
11520 41575 MT
(that)SH
10 /Courier AF
13445 XM
(FLOAT)SH
11 /Times-Roman AF
16720 XM
(can overflow.  MIPS can overflow regardless.)SH
/Courier SF
37598 XM
(]])SH
/Times-Bold SF
11520 43503 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(The standard Modula-2 procedure)SH
10 /Courier AF
32077 XM
(FLOAT)SH
11 /Times-Roman AF
35352 XM
(takes a standard)SH
10 /Courier AF
11520 44880 MT
(CARDINAL)SH
11 /Times-Roman AF
16595 XM
(parameter, not an)SH
10 /Courier AF
24535 XM
(INTEGER)SH
11 /Times-Roman AF
(. Standard)
275 W( Modula-2 provides no way)SH
11520 46257 MT
(to convert a)SH
10 /Courier AF
16987 XM
(LONGREAL)SH
11 /Times-Roman AF
22062 XM
(to a)SH
10 /Courier AF
23956 XM
(REAL)SH
11 /Times-Roman AF
(.)SH
12 SS 
11520 49452 MT
(13.2.3.)SH
11 /Courier AF
15120 XM
(LONGFLOAT)SH
10 SS 
14016 51362 MT
(PROCEDURE LONGFLOAT\050CONST x : INTEGER\051 : LONGREAL;)SH
14016 52393 MT
(PROCEDURE LONGFLOAT\050CONST x : REAL\051)
SH( :)
1800 W( LONGREAL;)SH
11520 54321 MT
(LONGFLOAT)SH
11 /Times-Roman AF
17195 XM
(converts a number into a)SH
10 /Courier AF
28344 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
11520 56249 MT
(If the basetype of the parameter is)SH
10 /Courier AF
26759 XM
(INTEGER)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
31509 XM
(LONGFLOAT)SH
11 /Times-Roman AF
37184 XM
(returns the)SH
10 /Courier AF
11520 57626 MT
(LONGREAL)SH
11 /Times-Roman AF
16595 XM
(that represents the integer-)SH
28192 XM
(-)SH
28458 XM
(-no precision is lost.)SH
11520 59554 MT
(If the basetype is)SH
10 /Courier AF
19278 XM
(UNSIGNED)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24628 XM
(LONGFLOAT)SH
11 /Times-Roman AF
30303 XM
(first ensures that the value is)SH
11520 60931 MT
(between 0 and)SH
10 /Courier AF
18147 XM
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
26222 XM
(if runtime checking is enabled, returns the)SH
11520 62308 MT
(equivalent)SH
10 /Courier AF
16377 XM
(LONGREAL)SH
11 /Times-Roman AF
(. If)
275 W( runtime checking is disabled,)SH
10 /Courier AF
36176 XM
(LONGFLOAT)SH
11 /Times-Roman AF
41851 XM
(of an)SH
10 /Courier AF
11520 63685 MT
(UNSIGNED x)SH
11 /Times-Roman AF
17795 XM
(returns)SH
10 /Courier AF
21124 XM
(LONGFLOAT\050INTEGER\050x\051\051)SH
11 /Times-Roman AF
(.)SH
11520 65613 MT
(If the basetype is)SH
10 /Courier AF
19278 XM
(REAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
22228 XM
(LONGFLOAT)SH
11 /Times-Roman AF
27903 XM
(returns the)SH
10 /Courier AF
32851 XM
(LONGREAL)SH
11 /Times-Roman AF
37926 XM
(that represents)SH
11520 66990 MT
(the real-)SH
15053 XM
(-)SH
15319 XM
(-no precision is lost.)SH
/Times-Bold SF
11520 68918 MT
(Extension:)SH
10 /Courier AF
16807 XM
(LONGFLOAT)SH
11 /Times-Roman AF
22482 XM
(is non-standard.)SH
ES
%%Page: 67 68
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Conversions)SH
46880 XM
(67)SH
12 /Times-Roman AF
13680 8023 MT
(13.2.4.)SH
11 /Courier AF
17280 XM
(ODD)SH
10 SS 
16176 9933 MT
(PROCEDURE ODD\050CONST x : INTEGER\051  : BOOLEAN;)SH
16176 10964 MT
(PROCEDURE ODD\050CONST x : UNSIGNED\051 : BOOLEAN;)SH
13680 12892 MT
(ODD)SH
11 /Times-Roman AF
15755 XM
(returns)SH
10 /Courier AF
19084 XM
(TRUE)SH
11 /Times-Roman AF
21759 XM
(if its argument is odd,)SH
10 /Courier AF
31659 XM
(FALSE)SH
11 /Times-Roman AF
34934 XM
(if it is even.)SH
12 SS 
13680 16087 MT
(13.2.5.)SH
11 /Courier AF
17280 XM
(ORD)SH
10 SS 
16176 17997 MT
(PROCEDURE ORD\050CONST x : Pointer\051  : UNSIGNED;)SH
16176 19028 MT
(PROCEDURE ORD\050CONST x : UNSIGNED\051 : UNSIGNED;)SH
16176 20059 MT
(PROCEDURE ORD\050CONST x : Ordinal\051  : INTEGER;)SH
13680 21987 MT
(ORD)SH
11 /Times-Roman AF
15755 XM
(returns the ordinal value of its argument.)SH
13680 23915 MT
(The ordinal value of a pointer is the physical address referenced.)SH
13680 25843 MT
(The ordinal value of an)SH
10 /Courier AF
24217 XM
(INTEGER)SH
11 /Times-Roman AF
28692 XM
(or)SH
10 /Courier AF
29883 XM
(UNSIGNED)SH
11 /Times-Roman AF
34958 XM
(is simply the number.)SH
13680 27771 MT
(The ordinal value of an enumeration is determined by the declaration.)SH
13680 29148 MT
(Normally the ordinal value of enumeration constants start at 0 and are)SH
13680 30525 MT
(contiguous, but the ordinal values can be specified; see Section 5.4, page 23.)SH
13680 32453 MT
(The ordinal value of a subrange is determined by the basetype, and is not)SH
13680 33830 MT
(affected by the declared lower bound of the subrange.)SH
/Times-Bold SF
13680 35758 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(Standard Modula-2 does not allow using)SH
10 /Courier AF
37115 XM
(ORD)SH
11 /Times-Roman AF
39190 XM
(on a pointer.)SH
12 SS 
13680 38953 MT
(13.2.6.)SH
11 /Courier AF
17280 XM
(TRUNC)SH
10 SS 
16176 40863 MT
(PROCEDURE TRUNC\050CONST x : REAL\051)
SH( :)
2400 W( INTEGER;)SH
16176 41894 MT
(PROCEDURE TRUNC\050CONST x : LONGREAL\051 : INTEGER;)SH
13680 43822 MT
(TRUNC)SH
11 /Times-Roman AF
16955 XM
(converts a)SH
10 /Courier AF
21719 XM
(REAL)SH
11 /Times-Roman AF
24394 XM
(or)SH
10 /Courier AF
25585 XM
(LONGREAL)SH
11 /Times-Roman AF
30660 XM
(an)SH
10 /Courier AF
31973 XM
(INTEGER)SH
11 /Times-Roman AF
36448 XM
(by truncating towards 0.)SH
13680 45199 MT
(If the truncated value cannot be represented as an)SH
10 /Courier AF
35697 XM
(INTEGER)SH
11 /Times-Roman AF
(, the result will be)SH
13680 46576 MT
(some undefined value with no error indication of the overflow.)SH
/Times-Bold SF
13680 48504 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(Standard Modula-2's)SH
10 /Courier AF
28559 XM
(TRUNC)SH
11 /Times-Roman AF
31834 XM
(returns a standard)SH
10 /Courier AF
39927 XM
(CARDINAL)SH
11 /Times-Roman AF
(, and)SH
13680 49881 MT
(provides no way of converting a)SH
10 /Courier AF
28158 XM
(LONGFLOAT)SH
11 /Times-Roman AF
33833 XM
(to either a standard)SH
10 /Courier AF
42507 XM
(CARDINAL)SH
11 /Times-Roman AF
13680 51258 MT
(or an)SH
10 /Courier AF
16184 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
12 SS 
13680 54453 MT
(13.2.7.)SH
11 /Courier AF
17280 XM
(VAL)SH
10 SS 
16176 56363 MT
(PROCEDURE VAL\050TYPE T : Ordinal; CONST x : INTEGER\051  : T;)SH
16176 57394 MT
(PROCEDURE VAL\050TYPE T : Ordinal; CONST x : UNSIGNED\051 : T;)SH
13680 59322 MT
(VAL)SH
11 /Times-Roman AF
15755 XM
(converts a number to the corresponding value in the specified ordinal)SH
13680 60699 MT
(type. If)275 W
10 /Courier AF
17406 XM
(T)SH
11 /Times-Roman AF
18281 XM
(is an enumeration for which you have specified ordinal values, you)SH
13680 62076 MT
(should not convert numbers that have no corresponding enumeration)SH
13680 63453 MT
(constant; see Section 5.4, page 23.  If)SH
10 /Courier AF
30389 XM
(T)SH
11 /Times-Roman AF
31264 XM
(is a subrange,)SH
10 /Courier AF
37556 XM
(VAL)SH
11 /Times-Roman AF
39631 XM
(returns the)SH
13680 64830 MT
(element corresponding to ordinal value)SH
10 /Courier AF
31183 XM
(x)SH
11 /Times-Roman AF
32058 XM
(in the basetype, and is not affected)SH
13680 66207 MT
(by the declared lower bound of the subrange.)SH
ES
%%Page: 68 69
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(68)SH
36858 XM
(Supplied Procedures)SH
12 /Times-Roman AF
11520 8023 MT
(13.3. Sets)SH
11520 11218 MT
(13.3.1.)SH
11 /Courier AF
15120 XM
(EXCL)SH
10 SS 
14016 13128 MT
(PROCEDURE EXCL\050VAR s : Set; CONST e : Set.ElementType\051;)SH
11520 15056 MT
(EXCL)SH
11 /Times-Roman AF
14195 XM
(excludes an element from a set.  The type of the element must be)SH
11520 16433 MT
(assignable \050see Section 16.6, page 93\051 to the element type of the set.)SH
10 /Courier AF
42097 XM
(EXCL)SH
11 /Times-Roman AF
44772 XM
(is)SH
11520 17810 MT
(an abbreviation for:)SH
10 /Courier AF
14016 19465 MT
(s := s - Set{e};)SH
11 SS 
11520 21393 MT
([[)SH
/Times-Roman SF
13500 XM
(EXCL only works on sets aligned to 8 bits.)SH
/Courier SF
33135 XM
(]])SH
12 /Times-Roman AF
11520 24588 MT
(13.3.2.)SH
11 /Courier AF
15120 XM
(INCL)SH
10 SS 
14016 26498 MT
(PROCEDURE INCL\050VAR s : Set; CONST e : Set.ElementType\051;)SH
11520 28426 MT
(INCL)SH
11 /Times-Roman AF
14195 XM
(includes an element in a set.  The type of the element must be)SH
11520 29803 MT
(assignable \050see Section 16.6, page 93\051 to the element type of the set.)SH
10 /Courier AF
42097 XM
(INCL)SH
11 /Times-Roman AF
44772 XM
(is)SH
11520 31180 MT
(an abbreviation for:)SH
10 /Courier AF
14016 32835 MT
(s := s + Set{e};)SH
11 SS 
11520 34763 MT
([[)SH
/Times-Roman SF
13500 XM
(INCL only works on sets aligned to 8 bits.)SH
/Courier SF
32829 XM
(]])SH
ES
%%Page: 69 70
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Sets)SH
46880 XM
(69)SH
12 /Times-Roman AF
13680 8023 MT
(13.4. Storage Allocation and Deallocation)SH
13680 11218 MT
(13.4.1.)SH
11 /Courier AF
17280 XM
(LOCAL)SH
10 SS 
16176 13128 MT
(PROCEDURE LOCAL\050)
SH( VAR)
1200 W( dyn)
SH( :)
3000 W( DynamicArray)SH
25776 14159 MT
({; CONST length : Natural}\051;)SH
13680 16087 MT
(LOCAL)SH
11 /Times-Roman AF
16955 XM
(allocates space in the current procedure for a dynamic array.  It)SH
13680 17464 MT
(requires as many dimension lengths as the dynamic array has dimensions.)SH
13680 18841 MT
(See Section 5.7, page 29 for warnings and an example.)SH
/Times-Bold SF
13680 20769 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(The)SH
10 /Courier AF
20952 XM
(LOCAL)SH
11 /Times-Roman AF
24227 XM
(procedure is non-standard.)SH
12 SS 
13680 23964 MT
(13.4.2.)SH
11 /Courier AF
17280 XM
(NEW)SH
10 SS 
16176 25874 MT
(PROCEDURE NEW\050VAR p : Pointer\051;)SH
16176 26905 MT
(PROCEDURE NEW\050VAR p : Pointer {; CONST tag : TagConstant}\051;)SH
16176 27936 MT
(PROCEDURE NEW\050VAR p : DynamicArray {; CONST length : Natural}\051;)SH
13680 29864 MT
(NEW)SH
11 /Times-Roman AF
15755 XM
(allocates global storage at runtime for a new variable to which a pointer)SH
13680 31241 MT
(or dynamic array will refer.  Normally)SH
10 /Courier AF
30844 XM
(NEW)SH
11 /Times-Roman AF
32919 XM
(calls allocation procedures that)SH
13680 32618 MT
(are defined for you.  To use)SH
10 /Courier AF
26140 XM
(NEW)SH
11 /Times-Roman AF
28215 XM
(to allocate storage using an allocator you've)SH
13680 33995 MT
(defined, see Section 20.4, page 128.)SH
13680 35923 MT
(The simplest form is the one you will use most often.  If the pointer points to)SH
13680 37300 MT
(a variant record, enough space is allocated for the largest variant.)SH
13680 39228 MT
(If the variants of a record vary widely in size, and you are never going to)SH
13680 40605 MT
(change any of the tag fields, you can specify a constant expression for each)SH
13680 41982 MT
(tag field in the last variant.  A)SH
10 /Courier AF
27091 XM
(NEW)SH
11 /Times-Roman AF
29166 XM
(call with tag fields allocates just enough)SH
13680 43359 MT
(space for the variant you specify.  See Section 5.11, page 36 for an example.)SH
13680 45287 MT
(To allocate space for a dynamic array, you specify the number of elements)SH
13680 46664 MT
(for each dimension.)SH
10 /Courier AF
22935 XM
(NEW)SH
11 /Times-Roman AF
25010 XM
(uses these lengths to compute the required space)SH
13680 48041 MT
(for the array, and saves the lengths for subscript calculations and)SH
13680 49418 MT
(range-checking. See)
275 W( Section 5.7, page 29 for examples.)SH
/Times-Bold SF
13680 51346 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(The)SH
10 /Courier AF
20952 XM
(NEW)SH
11 /Times-Roman AF
23027 XM
(procedure is non-standard.)SH
12 SS 
13680 54541 MT
(13.4.3.)SH
11 /Courier AF
17280 XM
(DISPOSE)SH
10 SS 
16176 56451 MT
(PROCEDURE DISPOSE\050VAR p : Pointer\051;)SH
16176 57482 MT
(PROCEDURE DISPOSE\050VAR p : Pointer {; CONST tag : TagConstant}\051;)SH
16176 58513 MT
(PROCEDURE DISPOSE\050VAR p : DynamicArray\051;)SH
16176 59544 MT
(PROCEDURE DISPOSE\050VAR)
SH( p  :)
1200 W( NocountDynamicArray;)SH
26976 60575 MT
(CONST length : Natural\051;)SH
13680 62503 MT
(DISPOSE)SH
11 /Times-Roman AF
18155 XM
(deallocates storage that was allocated with)SH
10 /Courier AF
37153 XM
(NEW)SH
11 /Times-Roman AF
(. To)
275 W( deallocate)SH
13680 63880 MT
(pointers, variant records, and dynamic arrays declared)SH
10 /Courier AF
37775 XM
(@NOCOUNT)SH
11 /Times-Roman AF
42850 XM
(you call)SH
10 /Courier AF
13680 65257 MT
(DISPOSE)SH
11 /Times-Roman AF
18155 XM
(with exactly the same parameters you used to call)SH
10 /Courier AF
40300 XM
(NEW)SH
11 /Times-Roman AF
(.)SH
13680 67185 MT
(When you)SH
10 /Courier AF
18506 XM
(DISPOSE)SH
11 /Times-Roman AF
22981 XM
(a normal dynamic array the compiler already knows the)SH
13680 68562 MT
(length of each dimension, so it does the required calculations to keep you)SH
13680 69939 MT
(from screwing up.  Don't even try to tell it otherwise.)SH
/Times-Bold SF
13680 71867 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(The)SH
10 /Courier AF
20952 XM
(DISPOSE)SH
11 /Times-Roman AF
25427 XM
(procedure is non-standard.)SH
ES
%%Page: 70 71
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(70)SH
36858 XM
(Supplied Procedures)SH
12 /Times-Roman AF
11520 8023 MT
(13.5. Control)SH
11520 11218 MT
(13.5.1.)SH
11 /Courier AF
15120 XM
(ASSERT)SH
10 SS 
14016 13128 MT
(PROCEDURE ASSERT\050CONST condition : BOOLEAN\051;)SH
14016 14159 MT
(PROCEDURE ASSERT\050CONST condition : BOOLEAN;)SH
24216 15190 MT
(CONST message)
SH( :)
1200 W( ARRAY OF CHAR\051;)SH
11 /Times-Roman AF
11520 17118 MT
(If runtime checking is not enabled,)SH
10 /Courier AF
27129 XM
(ASSERT)SH
11 /Times-Roman AF
31004 XM
(is a null statement.)SH
11520 19046 MT
(Otherwise, if the condition is)SH
10 /Courier AF
24596 XM
(FALSE)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
28146 XM
(ASSERT)SH
11 /Times-Roman AF
32021 XM
(aborts the program, dumping)SH
11520 20423 MT
(core and printing the message, if there is one.)SH
10 /Courier AF
32046 XM
(ASSERT)SH
11 /Times-Roman AF
35921 XM
(generates code even)SH
11520 21800 MT
(if the condition is a constant expression that evaluates to)SH
10 /Courier AF
36632 XM
(TRUE)SH
11 /Times-Roman AF
39307 XM
(or)SH
10 /Courier AF
40498 XM
(FALSE)SH
11 /Times-Roman AF
(.)SH
/Courier SF
11520 23728 MT
([[)SH
/Times-Roman SF
13500 XM
(I made the compiler check constant assertions at compile time on the)SH
11520 25105 MT
(assumption that they would only be used to ascertain information about the)SH
11520 26482 MT
(implementation...integers are big enough, etc.  But people use)SH
10 /Courier AF
11520 27859 MT
(ASSERT\050FALSE\051)SH
11 /Times-Roman AF
19595 XM
(to blow up programs and get a core dump.  There should)SH
11520 29236 MT
(be another procedure called, say,)SH
10 /Courier AF
26269 XM
(TERMINATE)SH
11 /Times-Roman AF
31944 XM
(that takes a message and)SH
11520 30613 MT
(dies.)SH
/Courier SF
14227 XM
(]])SH
/Times-Bold SF
11520 32541 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(The)SH
10 /Courier AF
18792 XM
(ASSERT)SH
11 /Times-Roman AF
22667 XM
(procedure is non-standard.)SH
12 SS 
11520 35736 MT
(13.5.2.)SH
11 /Courier AF
15120 XM
(HALT)SH
10 SS 
14016 37646 MT
(PROCEDURE HALT\050\051;)SH
14016 38677 MT
(PROCEDURE HALT\050CONST status : CARDINAL\051;)SH
11520 40605 MT
(HALT)SH
11 /Times-Roman AF
14195 XM
(terminates an Ultrix process and never returns.)SH
10 /Courier AF
35300 XM
(HALT)SH
11 /Times-Roman AF
37975 XM
(with no)SH
11520 41982 MT
(parameter is a synonym for)SH
10 /Courier AF
23829 XM
(HALT\0500\051)SH
11 /Times-Roman AF
(. Returning)
275 W( from or falling off the)SH
11520 43359 MT
(bottom of the main program causes)SH
10 /Courier AF
27344 XM
(HALT\0500\051)SH
11 /Times-Roman AF
(.)SH
11520 45287 MT
(By convention,)SH
10 /Courier AF
18517 XM
(HALT\0500\051)SH
11 /Times-Roman AF
22992 XM
(means that the program completed normally;)SH
11520 46664 MT
(passing anything else means that it failed in some way.  Most programs use)SH
10 /Courier AF
11520 48041 MT
(HALT\0501\051)SH
11 /Times-Roman AF
15995 XM
(to indicate failure.)SH
10 /Courier AF
11520 49969 MT
(HALT)SH
11 /Times-Roman AF
14195 XM
(first ``cleans up,'' which means flushing the profiling buffers if the)SH
11520 51346 MT
(program was compiled with the gprof switch.  It then calls the UNIX)SH
10 /Courier AF
42128 XM
(exit)SH
11 /Times-Roman AF
11520 52723 MT
(routine, which flushes any buffered output and passes)SH
10 /Courier AF
35437 XM
(status)SH
11 /Times-Roman AF
39312 XM
(back to the)SH
11520 54100 MT
(calling process.)SH
/Times-Bold SF
11520 56028 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(In standard Modula-2,)SH
10 /Courier AF
26887 XM
(HALT)SH
11 /Times-Roman AF
29562 XM
(takes no parameters.)SH
ES
%%Page: 71 72
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Control)SH
46880 XM
(71)SH
12 /Times-Roman AF
13680 8023 MT
(13.6. Constructors and Deconstructors)SH
11 SS 
13680 10064 MT
(\050See also the procedures in)SH
10 /Courier AF
25805 XM
(SYSTEM)SH
11 /Times-Roman AF
(, Section 15.1.3, page 81.\051)SH
12 SS 
13680 13259 MT
(13.6.1.)SH
11 /Courier AF
17280 XM
(DESCRIPTOR)SH
10 SS 
16176 15169 MT
(PROCEDURE DESCRIPTOR\050TYPE  ElementType;)SH
28776 16200 MT
(CONST base)
SH( :)
1200 W( SYSTEM.ADDRESS)SH
26976 17231 MT
({; CONST length : Natural\051}\051)SH
18576 18262 MT
(: ARRAY OF {ARRAY OF} ElementType;)SH
13680 20190 MT
(DESCRIPTOR)SH
11 /Times-Roman AF
19955 XM
(constructs an open array from a base address and a list of)SH
13680 21567 MT
(dimension lengths.  The element type of the open array will be the specified)SH
10 /Courier AF
13680 22944 MT
(ElementType)SH
11 /Times-Roman AF
(. The)
275 W( base of the array can be)SH
10 /Courier AF
33776 XM
(NIL)SH
11 /Times-Roman AF
(, in which case the)SH
13680 24321 MT
(dimension length\050s\051 are assumed to be 0; a)SH
10 /Courier AF
32742 XM
(NIL)SH
11 /Times-Roman AF
34817 XM
(open array is compatible)SH
13680 25698 MT
(with an open array parameter of any number of dimensions, as long as the)SH
13680 27075 MT
(element types are compatible.  To create a)SH
10 /Courier AF
32523 XM
(@NOCOUNT)SH
11 /Times-Roman AF
37598 XM
(array, you specify a)SH
13680 28452 MT
(non-)SH
10 /Courier AF
(NIL)SH
11 /Times-Roman AF
17771 XM
(base and no dimensions.  To create a normal)SH
10 /Courier AF
37625 XM
(n)SH
11 /Times-Roman AF
(-dimensional open)SH
13680 29829 MT
(array, you specify a non-)SH
10 /Courier AF
(NIL)SH
11 /Times-Roman AF
26718 XM
(base and a length for each dimension.)SH
13680 31757 MT
(The primary use of)SH
10 /Courier AF
22354 XM
(DESCRIPTOR)SH
11 /Times-Roman AF
28629 XM
(is to call C procedures that take an)SH
13680 33134 MT
(unbounded array or)SH
10 /Courier AF
22567 XM
(NIL)SH
11 /Times-Roman AF
(. For)
275 W( example, the X11 library procedure)SH
10 /Courier AF
13680 34511 MT
(XOpenDisplay)SH
11 /Times-Roman AF
21155 XM
(takes either a display name or a)SH
10 /Courier AF
35296 XM
(NIL)SH
11 /Times-Roman AF
37371 XM
(pointer, in which case)SH
13680 35888 MT
(the display name is fetched from the)SH
10 /Courier AF
29961 XM
(DISPLAY)SH
11 /Times-Roman AF
34436 XM
(environment variable:)SH
10 /Courier AF
16176 37543 MT
(PROCEDURE @EXTERNAL XOpenDisplay\050)SH
18576 38574 MT
(CONST displayName : ARRAY OF CHAR\051 : DisplayPtr;)SH
16176 39605 MT
(. . .)SH
16176 40636 MT
(display := XOpenDisplay\050"pandora:0"\051;)SH
16176 41667 MT
(display := XOpenDisplay\050DESCRIPTOR\050CHAR, NIL\051\051;)SH
11 /Times-Roman AF
13680 43595 MT
(You cannot pass a)SH
10 /Courier AF
21988 XM
(NIL)SH
11 /Times-Roman AF
24063 XM
(open array to a pass-by-value open array parameter.)SH
12 SS 
13680 46790 MT
(13.6.2.)SH
11 /Courier AF
17280 XM
(FIRST)SH
10 SS 
16176 48700 MT
(PROCEDURE FIRST\050TYPE T\051 : T;)SH
13680 50628 MT
(FIRST)SH
11 /Times-Roman AF
16955 XM
(returns the first \050smallest\051 value of a type.)SH
13680 52556 MT
(After peeling off any layers of)SH
10 /Courier AF
27300 XM
(@ALIGN)SH
11 /Times-Roman AF
31175 XM
(and)SH
10 /Courier AF
33038 XM
(@SIZE)SH
11 /Times-Roman AF
36313 XM
(type declarations \050but not)SH
13680 53933 MT
(subrange\051,)SH
10 /Courier AF
18566 XM
(T)SH
11 /Times-Roman AF
19441 XM
(must be an ordinal,)SH
10 /Courier AF
28148 XM
(REAL)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
32289 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
9 SS 
26862 55498 MT
(31)SH
11 SS 
13680 55861 MT
(For)SH
10 /Courier AF
15483 XM
(INTEGER)SH
11 /Times-Roman AF
(, the result is -\0502)SH
27762 XM
(\051. For)275 W
10 /Courier AF
30756 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, the result is 0.)SH
13680 57789 MT
(For an enumeration type, the result is the smallest enumeration constant.)SH
13680 59166 MT
(This is usually the first enumeration constant in the list, but may be another)SH
13680 60543 MT
(constant if the enumeration is non-contiguous.)SH
13680 62471 MT
(For a subrange type, the result is the lower bound of the subrange.)SH
13680 64522 MT
(For)SH
10 /Courier AF
15483 XM
(REAL)SH
11 /Times-Roman AF
18158 XM
(and)SH
10 /Courier AF
20021 XM
(LONGREAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
25371 XM
(FIRST)SH
11 /Times-Roman AF
28646 XM
(returns the largest negative number)SH
13680 65899 MT
(representable; see Section 18.2.6, page 99 and Section 18.2.7, page 100 for)SH
13680 67276 MT
(details.)SH
/Times-Bold SF
13680 69327 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(The)SH
10 /Courier AF
20952 XM
(FIRST)SH
11 /Times-Roman AF
24227 XM
(procedure is non-standard.)SH
ES
%%Page: 72 73
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(72)SH
36858 XM
(Supplied Procedures)SH
12 /Times-Roman AF
11520 8023 MT
(13.6.3.)SH
11 /Courier AF
15120 XM
(LAST)SH
10 SS 
14016 9933 MT
(PROCEDURE LAST\050TYPE T\051 : T;)SH
11520 11861 MT
(LAST)SH
11 /Times-Roman AF
14195 XM
(returns the last \050largest\051 value of a type.)SH
11520 13789 MT
(After peeling off any layers of)SH
10 /Courier AF
25140 XM
(@ALIGN)SH
11 /Times-Roman AF
29015 XM
(and)SH
10 /Courier AF
30878 XM
(@SIZE)SH
11 /Times-Roman AF
34153 XM
(type declarations \050but not)SH
11520 15166 MT
(subrange\051, T must be an ordinal,)SH
10 /Courier AF
26060 XM
(REAL)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
30201 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
9 SS 
23970 16731 MT
(31)SH
40211 XM
(32)SH
11 SS 
11520 17094 MT
(For)SH
10 /Courier AF
13323 XM
(INTEGER)SH
11 /Times-Roman AF
(, the result is 2)SH
25145 XM
(- 1.  For)SH
10 /Courier AF
28964 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, the result is 2)SH
41386 XM
(- 1.)SH
11520 19022 MT
(For an enumeration type, the result is the largest enumeration constant.  This)SH
11520 20399 MT
(is usually the last enumeration constant in the list, but may be another)SH
11520 21776 MT
(constant if the enumeration is non-contiguous.)SH
11520 23704 MT
(For a subrange type, the result is the upper bound of the subrange.)SH
11520 25755 MT
(For)SH
10 /Courier AF
13323 XM
(REAL)SH
11 /Times-Roman AF
15998 XM
(and)SH
10 /Courier AF
17861 XM
(LONGREAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
23211 XM
(FIRST)SH
11 /Times-Roman AF
26486 XM
(returns the largest positive number)SH
11520 27132 MT
(representable; see Section 18.2.6, page 99 and Section 18.2.7, page 100 for)SH
11520 28509 MT
(details.)SH
/Times-Bold SF
11520 30560 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(The)SH
10 /Courier AF
18792 XM
(LAST)SH
11 /Times-Roman AF
21467 XM
(procedure is non-standard.)SH
12 SS 
11520 33755 MT
(13.6.4.)SH
11 /Courier AF
15120 XM
(LOW)SH
10 SS 
14016 35665 MT
(PROCEDURE LOW\050CONST a : Array\051 : Array.IndexType;)SH
14016 36696 MT
(PROCEDURE LOW\050CONST a : Array;)SH
22416 37727 MT
(CONST n : Natural\051 : Array.IndexType[n];)SH
11520 39655 MT
(LOW)SH
11 /Times-Roman AF
13595 XM
(returns the smallest index of a dimension of array)SH
10 /Courier AF
35680 XM
(a)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
37105 XM
(LOW\050a\051)SH
11 /Times-Roman AF
40980 XM
(returns the)SH
11520 41032 MT
(lower bound of the first dimension;)SH
10 /Courier AF
27346 XM
(LOW\050a,n\051)SH
11 /Times-Roman AF
32421 XM
(returns the lower bound of the)SH
9 SS 
12120 42046 MT
(th)SH
10 /Courier AF
11520 42409 MT
(n)SH
11 /Times-Roman AF
13095 XM
(dimension.)SH
10 /Courier AF
18504 XM
(LOW)SH
11 /Times-Roman AF
20579 XM
(returns 0 if)SH
10 /Courier AF
25680 XM
(a)SH
11 /Times-Roman AF
26555 XM
(is an open, dynamic, or subarray.)SH
/Times-Bold SF
11520 44337 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(The)SH
10 /Courier AF
18792 XM
(LOW)SH
11 /Times-Roman AF
20867 XM
(procedure is non-standard.)SH
12 SS 
11520 47532 MT
(13.6.5.)SH
11 /Courier AF
15120 XM
(HIGH)SH
10 SS 
14016 49442 MT
(PROCEDURE HIGH\050CONST a : Array\051 : Array.IndexType;)SH
14016 50473 MT
(PROCEDURE HIGH\050CONST a : Array;)SH
23016 51504 MT
(CONST n : Natural\051 : Array.IndexType[n];)SH
11520 53432 MT
(HIGH)SH
11 /Times-Roman AF
14195 XM
(returns the largest index of a dimension of array)SH
10 /Courier AF
35606 XM
(a)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
37031 XM
(HIGH\050a\051)SH
11 /Times-Roman AF
41506 XM
(returns)SH
11520 54809 MT
(the upper bound of the first dimension;)SH
10 /Courier AF
28965 XM
(HIGH\050a,n\051)SH
11 /Times-Roman AF
34640 XM
(returns the upper bound)SH
9 SS 
14930 55823 MT
(th)SH
11 SS 
11520 56186 MT
(of the)SH
10 /Courier AF
14330 XM
(n)SH
11 /Times-Roman AF
15905 XM
(dimension.)SH
/Times-Bold SF
11520 58114 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(In standard Modula-2, the)SH
10 /Courier AF
28506 XM
(HIGH)SH
11 /Times-Roman AF
31181 XM
(procedure takes one parameter.)SH
12 SS 
11520 61309 MT
(13.6.6.)SH
11 /Courier AF
15120 XM
(NUMBER)SH
10 SS 
14016 63219 MT
(PROCEDURE NUMBER\050CONST a : Array\051 : Array.IndexType;)SH
14016 64250 MT
(PROCEDURE NUMBER\050CONST a : Array;)SH
24216 65281 MT
(CONST n : Natural\051 : Array.IndexType[n];)SH
11520 67209 MT
(NUMBER)SH
11 /Times-Roman AF
15395 XM
(returns the number of elements in a dimension of array)SH
10 /Courier AF
39831 XM
(a)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
11520 68586 MT
(NUMBER\050a\051)SH
11 /Times-Roman AF
17195 XM
(returns the number of elements in the first dimension;)SH
9 SS 
37323 69600 MT
(th)SH
10 /Courier AF
11520 69963 MT
(NUMBER\050a,n\051)SH
11 /Times-Roman AF
18395 XM
(returns the number of elements in the the)SH
10 /Courier AF
36723 XM
(n)SH
11 /Times-Roman AF
38298 XM
(dimension.)SH
/Times-Bold SF
11520 71891 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(The)SH
10 /Courier AF
18792 XM
(NUMBER)SH
11 /Times-Roman AF
22667 XM
(procedure is non-standard.)SH
ES
%%Page: 73 74
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(73)SH
14 /Times-Roman AF
27279 11760 MT
(14. Modules)SH
11 SS 
13680 15249 MT
(There are four kinds of modules: definition, implementation, main, and)SH
13680 16626 MT
(nested. You)
275 W( can have exactly one definition, implementation, or main)SH
13680 18003 MT
(module in a file.)SH
12 SS 
13680 22284 MT
(14.1. Definition Modules)SH
10 /Courier AF
16176 24194 MT
(DefModule =)
600 W( DEFINITION MODULE ident [@NOINIT] ";")SH
25176 25225 MT
({import} [export] {definition})SH
23976 26256 MT
(END ident ".")SH
16176 27287 MT
(import =)
2400 W( IMPORT idents ";")SH
22776 28318 MT
(| FROM ident IMPORT idents ";")SH
22776 29349 MT
(| FROM ident IMPORT "*" ";")SH
16176 30380 MT
(export =)
2400 W( EXPORT [QUALIFIED] idents ";")SH
22776 31411 MT
(| EXPORT "*" ";")SH
16176 32442 MT
(definition = CONST)
SH( {)
1800 W( ident "=" ConstExpr)
SH( ";"})10200 W
22776 33473 MT
(| TYPE)
SH( {\050ident)
2400 W( "=" type | OpaqueDeclaration\051  ";"})SH
22776 34504 MT
(| VAR)
SH( {)
3000 W( ident ":" type [":=" initial])
SH( ";"})4200 W
22776 35535 MT
(| PROCEDURE  ident [FormalParams] [":" qualident] ";")SH
16176 36566 MT
(OpaqueDeclaration = ident ["=" @SIZE ConstExpr])SH
11 /Times-Roman AF
13680 40214 MT
(The point of a definition module is to make the objects it declares available)SH
13680 41591 MT
(to clients, which are other modules that import it.  Definition modules are)SH
13680 42968 MT
(also called interfaces.  To find out about import, see Section 2.6, page 11.)SH
13680 44896 MT
(A definition module contains constant, type, and variable declarations, and)SH
13680 46273 MT
(procedure headings.  It does not include complete procedure declarations or)SH
13680 47650 MT
(executable statements.)SH
13680 49578 MT
(A definition module cannot import itself, nor can two or more definition)SH
13680 50955 MT
(modules form an import cycle \050)SH
10 /Courier AF
(A)SH
11 /Times-Roman AF
28454 XM
(imports)SH
10 /Courier AF
32091 XM
(B)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
33241 XM
(B)SH
11 /Times-Roman AF
34116 XM
(imports)SH
10 /Courier AF
37753 XM
(A)SH
11 /Times-Roman AF
(\051.)SH
13680 52883 MT
(The export list in a definition module specifies the names in the module)SH
13680 54260 MT
(available for import by clients.  All exports from definition modules are)SH
13680 55637 MT
(qualified regardless of how they get exported.)SH
13680 57565 MT
(If you don't provide any export list in a definition module, then all identifiers)SH
13680 58942 MT
(declared in the module are automatically exported.  This is the most practical)SH
13680 60319 MT
(form of export, as it avoids the common problem of adding a declaration to a)SH
13680 61696 MT
(definition module but not updating the export list.)SH
13680 63747 MT
(When you use the forms:)SH
10 /Courier AF
16176 65402 MT
(EXPORT X, Y;)SH
16176 66433 MT
(EXPORT QUALIFIED X, Y;)SH
11 /Times-Roman AF
13680 68219 MT
(only the names listed in the export list are made available to clients.  This is)SH
13680 69596 MT
(useful when you wish to export a pointer but not the referent type:)SH
ES
%%Page: 74 75
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(74)SH
42053 XM
(Modules)SH
/Courier SF
14016 7824 MT
(EXPORT QUALIFIED PointerType;)SH
14016 8855 MT
(TYPE)SH
16416 9886 MT
(PointerType = POINTER TO Referent;)SH
16416 10917 MT
(Referent = RECORD)SH
18816 11948 MT
(next : PointerType;)SH
18816 12979 MT
(x, y : INTEGER;)SH
16416 14010 MT
(END;)SH
11 /Times-Roman AF
11520 16061 MT
(The last form of export is a now-redundant extension from the early days of)SH
11520 17438 MT
(Modula-2, when definition modules had to have export lists.  The form:)SH
10 /Courier AF
14016 19093 MT
(EXPORT *;)SH
11 /Times-Roman AF
11520 20879 MT
(exports all names declared in the module.  You should instead use a standard)SH
11520 22256 MT
(Modula-2 definition module with no export list; I mention)SH
10 /Courier AF
37401 XM
(EXPORT *)SH
11 /Times-Roman AF
42476 XM
(only)SH
11520 23633 MT
(because you might run across some old code that uses it.)SH
/Times-Bold SF
11520 25684 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Standard Modula-2 automatically exports all identifiers declared)SH
11520 27061 MT
(in a definition module; an)SH
10 /Courier AF
23161 XM
(EXPORT)SH
11 /Times-Roman AF
27036 XM
(declaration is neither required nor)SH
11520 28438 MT
(allowed.)SH
12 SS 
11520 32719 MT
(14.2. Implementation Modules)SH
10 /Courier AF
14016 34629 MT
(ImpModule =)
600 W( IMPLEMENTATION MODULE ident ";")SH
23016 35660 MT
({import} {declaration})SH
21816 36691 MT
([BEGIN Statements])SH
21816 37722 MT
(END ident ".")SH
11 /Times-Roman AF
11520 40339 MT
(An implementation module contains local objects and statements hidden)SH
11520 41716 MT
(from the clients of its definition module.)SH
11520 43644 MT
(Most definition modules have matching implementation modules.  Your)SH
11520 45021 MT
(definition module can get away without an implementation module if you)SH
11520 46398 MT
(declare no procedures or variables-)SH
26870 XM
(-)SH
27136 XM
(-only constant and type definitions are)SH
11520 47775 MT
(allowed. Further,)
275 W( you must declare the definition module to be)SH
10 /Courier AF
39595 XM
(@NOINIT)SH
11 /Times-Roman AF
44070 XM
(so)SH
11520 49152 MT
(that clients will not try to call an initialization section that doesn't exist.)SH
11520 51080 MT
(If you create a definition module without a matching implementation)SH
11520 52457 MT
(module, the debugger will know nothing about the names in the definition;)SH
10 /Courier AF
11520 53834 MT
(@NOINIT)SH
11 /Times-Roman AF
15995 XM
(definition modules at most should be used to provide Modula-2)SH
11520 55211 MT
(interfaces to implementations written in other languages.)SH
11520 57139 MT
(An implementation module automatically gets all the declared and imported)SH
11520 58516 MT
(names from its definition module.  Opaque types have to be made concrete)SH
11520 59893 MT
(and procedure headings need to be repeated and filled out with procedure)SH
11520 61270 MT
(bodies, but other types, variables, constants, and all imports are available)SH
11520 62647 MT
(with no further ado.)SH
11520 64575 MT
(An implementation module is not actually obliged to implement everything)SH
11520 65952 MT
(\050or for that matter anything\051 in its matching definition module.)SH
/Times-Bold SF
11520 67880 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Standard Modula-2 does not automatically import into the)SH
11520 69257 MT
(implementation module what is imported into the definition module.  You)SH
11520 70634 MT
(must explicitly import these identifiers into the implementation module.)SH
ES
%%Page: 75 76
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Implementation Modules)SH
46880 XM
(75)SH
12 /Times-Roman AF
13680 8023 MT
(14.3. Opaque Types)SH
11 SS 
13680 10064 MT
(In a definition module, you can declare a type without giving the type's)SH
13680 11441 MT
(complete definition.  Such a type is called ``opaque.''  You declare an)SH
13680 12818 MT
(opaque type to hide the details of the complete definition, called the)SH
13680 14195 MT
(``concrete type,'' from the importers of the definition module.  In EBNF:)SH
10 /Courier AF
16176 15850 MT
(definition = ...)SH
22776 16881 MT
(| TYPE {\050ident "=" type | OpaqueDeclaration\051 ";"})SH
16176 17912 MT
(OpaqueDeclaration = ident ["=" @SIZE ConstExpr])SH
11 /Times-Roman AF
13680 20529 MT
(You usually declare an opaque type by saying:)SH
10 /Courier AF
16176 22184 MT
(TYPE)SH
18576 23215 MT
(T;)SH
11 /Times-Roman AF
13680 25001 MT
(The importer knows only that the concrete takes one word of storage.)SH
13680 26929 MT
(You can also declare a sized opaque type by saying:)SH
10 /Courier AF
16176 28584 MT
(TYPE)SH
18576 29615 MT
(T = @SIZE declaredSize;)SH
11 /Times-Roman AF
13680 31401 MT
(The importer knows only that the concrete type has a size \050in bits\051 of)SH
10 /Courier AF
13680 32778 MT
(declaredSize)SH
11 /Times-Roman AF
(, which must be a constant expression.)SH
13680 34829 MT
(These declarations provide the importer with enough information so that she)SH
13680 36206 MT
(can do an assignment to, or an equal/non-equal comparison with, a variable)SH
13680 37583 MT
(of the opaque type.  But she can't use any of the other operations normally)SH
13680 38960 MT
(provided for user-defined types like:)SH
10 /Courier AF
16176 40615 MT
(+ < ^)2400 W
11 /Times-Roman AF
13680 42666 MT
(She gets access to the concrete type by calling procedures implemented in)SH
13680 44043 MT
(modules that define the concrete type.  There is almost always a procedure to)SH
13680 45420 MT
(allocate and initialize the underlying concrete type, and usually a procedure)SH
13680 46797 MT
(to deallocate the concrete type.)SH
13680 48725 MT
(She can declare variables of the opaque type and she can create variables of)SH
13680 50102 MT
(the opaque type with)SH
10 /Courier AF
23150 XM
(NEW)SH
11 /Times-Roman AF
25225 XM
(of a pointer to the opaque type.)SH
13680 52153 MT
(If)SH
10 /Courier AF
14687 XM
(T1)SH
11 /Times-Roman AF
16162 XM
(and)SH
10 /Courier AF
18025 XM
(T2)SH
11 /Times-Roman AF
19500 XM
(are opaque word types declared in definition module)SH
10 /Courier AF
42958 XM
(D)SH
11 /Times-Roman AF
(, then the)SH
13680 53530 MT
(implementation module for)SH
10 /Courier AF
25993 XM
(D)SH
11 /Times-Roman AF
26868 XM
(declares the concrete types)SH
10 /Courier AF
38960 XM
(T1)SH
11 /Times-Roman AF
40435 XM
(and)SH
10 /Courier AF
42298 XM
(T2)SH
11 /Times-Roman AF
43773 XM
(using a)SH
13680 54907 MT
(standard type declaration.  For instance:)SH
10 /Courier AF
16176 56562 MT
(TYPE)SH
18576 57593 MT
(T1 = INTEGER;)SH
18576 58624 MT
(T2 = POINTER TO RecordType;)SH
11 /Times-Roman AF
13680 60675 MT
(The concrete definition of an opaque word type is usually a pointer; it is)SH
13680 62052 MT
(occasionally an ordinal numeric type.  In any case, the concrete definition of)SH
13680 63429 MT
(an opaque word type)SH
10 /Courier AF
23148 XM
(T)SH
11 /Times-Roman AF
24023 XM
(must satisfy:)SH
10 /Courier AF
16176 65084 MT
(SYSTEM.TSIZE\050T\051 = SYSTEM.TSIZE\050SYSTEM.WORD\051)SH
ES
%%Page: 76 77
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(76)SH
42053 XM
(Modules)SH
11 /Times-Roman AF
11520 7955 MT
(If)SH
10 /Courier AF
12527 XM
(T)SH
11 /Times-Roman AF
13402 XM
(is an opaque type declared in definition module)SH
10 /Courier AF
34602 XM
(D)SH
11 /Times-Roman AF
35477 XM
(with specified size)SH
10 /Courier AF
11520 9332 MT
(declaredSize)SH
11 /Times-Roman AF
(, then the module implementing)SH
10 /Courier AF
33020 XM
(D)SH
11 /Times-Roman AF
33895 XM
(declares the concrete type)SH
10 /Courier AF
11520 10709 MT
(T)SH
11 /Times-Roman AF
12395 XM
(using a standard type declaration.  For instance:)SH
10 /Courier AF
14016 12364 MT
(TYPE)SH
16416 13395 MT
(T = LONGREAL;)SH
11 /Times-Roman AF
11520 15446 MT
(The concrete definition of an opaque type with specified size is usually a)SH
10 /Courier AF
11520 16823 MT
(LONGREAL)SH
11 /Times-Roman AF
(, a record, or an array.  In any case, the concrete definition of)SH
10 /Courier AF
43436 XM
(T)SH
11 /Times-Roman AF
11520 18200 MT
(must satisfy:)SH
10 /Courier AF
14016 19855 MT
(SYSTEM.TSIZE\050T\051 = declaredSize)SH
11 /Times-Bold AF
11520 21783 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Specifying a size for an opaque type is non-standard.  Using)SH
11520 23160 MT
(anything but a pointer for the concrete type of an opaque is non-standard.)SH
12 SS 
11520 27441 MT
(14.4. Main Modules)SH
10 /Courier AF
14016 29351 MT
(ProgramModule =)
600 W( MODULE ident ";")SH
24216 30382 MT
({import} {declaration})SH
24216 31413 MT
([BEGIN Statements])SH
24216 32444 MT
(END ident ".")SH
11 /Times-Roman AF
11520 35061 MT
(A main module is essentially an implementation module with no definition)SH
11520 36438 MT
(module and thus no exports.  All you can do with a main module is run it.)SH
12 SS 
11520 40719 MT
(14.5. Nested Modules)SH
10 /Courier AF
14016 42629 MT
(Module =)
600 W( MODULE ident ";")SH
21216 43660 MT
({import} [export] {declaration})SH
20016 44691 MT
([BEGIN Statements])SH
20016 45722 MT
(END ident ".")SH
11 /Times-Roman AF
11520 48339 MT
(Nested modules let you structure large implementation or main modules)SH
11520 49716 MT
(without introducing separate interfaces.  You can declare a nested module)SH
11520 51093 MT
(inside of a procedure, or inside of another module.)SH
11520 53021 MT
(A nested module can import things only from its containing scope.  In other)SH
11520 54398 MT
(words, if a nested module wants to use)SH
10 /Courier AF
28841 XM
(IO)SH
11 /Times-Roman AF
(, then the containing scope must)SH
11520 55775 MT
(declare or import)SH
10 /Courier AF
19369 XM
(IO)SH
11 /Times-Roman AF
(, or if the containing scope is a procedure, then)SH
10 /Courier AF
41461 XM
(IO)SH
11 /Times-Roman AF
42936 XM
(must)SH
11520 57152 MT
(be accessible to the procedure.)SH
11520 59080 MT
(The export list in a nested module header makes names from within the)SH
11520 60457 MT
(nested module available to its containing scope.  If)SH
10 /Courier AF
34126 XM
(EXPORT)SH
11 /Times-Roman AF
38001 XM
(is followed by)SH
10 /Courier AF
11520 61834 MT
(QUALIFIED)SH
11 /Times-Roman AF
(, references to these names in the containing scope must be)SH
11520 63211 MT
(qualified with the name of the nested module.)SH
11520 65262 MT
(If a procedure is declared in an interface, its implementation can't be in a)SH
11520 66639 MT
(nested module; it has to be at the outer level of its implementation module.)SH
11520 68690 MT
(Section 2.9, page 14 contains an example of a nested module.)SH
/Times-Bold SF
11520 70618 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Standard Modula-2 allows any exported object to be defined)SH
11520 71995 MT
(inside of a nested module.)SH
ES
%%Page: 77 78
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Nested Modules)SH
46880 XM
(77)SH
12 /Times-Roman AF
13680 8023 MT
(14.6. Initialization)SH
11 SS 
13680 10064 MT
(The statement sequence before the)SH
10 /Courier AF
29163 XM
(END)SH
11 /Times-Roman AF
31238 XM
(of a module is its body.  Every main)SH
13680 11441 MT
(module contains a body; its body is its reason for being.  The typical)SH
13680 12818 MT
(implementation module contains a body too; the purpose of an)SH
13680 14195 MT
(implementation module's body is to initialize the module's variables.)SH
13680 16246 MT
(A module expects its initialization body to execute before a client calls any)SH
13680 17623 MT
(of its procedures.  There is an invisible Boolean variable, ``)SH
10 /Courier AF
(initialized)SH
11 /Times-Roman AF
(,'')SH
13680 19000 MT
(that's associated with each implementation module.  Suppose you have an)SH
13680 20377 MT
(implementation module)SH
10 /Courier AF
24436 XM
(M)SH
11 /Times-Roman AF
(; the compiler generates code for the body of)SH
10 /Courier AF
45041 XM
(M)SH
11 /Times-Roman AF
45916 XM
(that)SH
13680 21754 MT
(looks something like this:)SH
10 /Courier AF
16176 23409 MT
(PROCEDURE M__init\050\051;)SH
16176 24440 MT
(BEGIN)SH
18576 25471 MT
(IF initialized THEN RETURN END;)SH
18576 26502 MT
(initialized := TRUE;)SH
18576 27533 MT
(FOREACH Module IN <M's imports> DO)SH
20976 28564 MT
(Module._init\050\051;)SH
18576 29595 MT
(END;)SH
18576 30626 MT
(<explicitly programmed statements of body, if any>)SH
16176 31657 MT
(END M__init;)SH
11 /Times-Roman AF
13680 33708 MT
(Now suppose you take a group of modules that use this scheme for)SH
13680 35085 MT
(initialization and you link them together and run them.  If they have no)SH
13680 36462 MT
(import cycles then each module will be initialized before a client can call any)SH
13680 37839 MT
(of its procedures.)SH
13680 39767 MT
(An import cycle is a chain of imports of the form implementation module)SH
10 /Courier AF
46339 XM
(A)SH
11 /Times-Roman AF
13680 41144 MT
(imports definition module)SH
10 /Courier AF
25445 XM
(B)SH
11 /Times-Roman AF
26320 XM
(and implementation module)SH
10 /Courier AF
38939 XM
(B)SH
11 /Times-Roman AF
39814 XM
(imports definition)SH
13680 42521 MT
(module)SH
10 /Courier AF
17255 XM
(A)SH
11 /Times-Roman AF
18130 XM
(\050with as many steps in between as you need to disguise this effect\051.)SH
13680 44449 MT
(A cyclic import structure may result in unpleasant surprises at runtime.  For)SH
13680 45826 MT
(example, suppose module)SH
10 /Courier AF
25350 XM
(A)SH
11 /Times-Roman AF
26225 XM
(contains procedure)SH
10 /Courier AF
34837 XM
(P)SH
11 /Times-Roman AF
(, which relies on the)SH
13680 47203 MT
(initialization of module)SH
10 /Courier AF
24283 XM
(A)SH
11 /Times-Roman AF
25158 XM
(to execute correctly; module)SH
10 /Courier AF
37986 XM
(A)SH
11 /Times-Roman AF
38861 XM
(imports module)SH
10 /Courier AF
46073 XM
(B)SH
11 /Times-Roman AF
(,)SH
13680 48580 MT
(and)SH
10 /Courier AF
15543 XM
(B)SH
11 /Times-Roman AF
16418 XM
(calls)SH
10 /Courier AF
18709 XM
(A.P)SH
11 /Times-Roman AF
20784 XM
(as part of)SH
10 /Courier AF
25151 XM
(B)SH
11 /Times-Roman AF
('s initialization.  When)SH
10 /Courier AF
36108 XM
(A)SH
11 /Times-Roman AF
('s initialization)SH
13680 49957 MT
(procedure is called, the first thing it does is to call the initialization procedure)SH
13680 51334 MT
(of)SH
10 /Courier AF
14871 XM
(B)SH
11 /Times-Roman AF
(. That)
275 W( calls)SH
10 /Courier AF
20878 XM
(A.P)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
23503 XM
(A.P)SH
11 /Times-Roman AF
25578 XM
(executes incorrectly because)SH
10 /Courier AF
38433 XM
(A)SH
11 /Times-Roman AF
39308 XM
(has not yet been)SH
13680 52711 MT
(completely initialized.)SH
13680 54639 MT
(Guarding against import cycles is your responsibility.)SH
/Courier SF
13680 56567 MT
([[)SH
/Times-Roman SF
15660 XM
(I have discovered a truly wonderful algorithm to discover import cycles,)SH
13680 57944 MT
(but it is too small to scribble in the margin of this document.  And it's a)SH
13680 59321 MT
(hassle to implement, because just basing a cycle warning on import is too)SH
13680 60698 MT
(paranoid, therefore useless.  To do it right requires knowing which of the)SH
13680 62075 MT
(imports the initialization body uses.  I'd like to implement the correct)SH
13680 63452 MT
(algorithm someday, as I've been burned by initialization cycles before.)SH
/Courier SF
45587 XM
(]])SH
ES
%%Page: 78 79
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(78)SH
42053 XM
(Modules)SH
ES
%%Page: 79 80
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(79)SH
14 /Times-Roman AF
25024 11760 MT
(15. Pseudo-Modules)SH
11 SS 
13680 15249 MT
(Pseudo-modules are special modules known to the compiler.  Here's a)SH
13680 16626 MT
(classification of the pseudo-modules:)SH
13680 18577 MT
(System-dependent Constants, Types, and Procedures)SH
10 /Courier AF
16080 19773 MT
(SYSTEM)SH
11 /Times-Roman AF
13680 22165 MT
(Bit Manipulations)SH
10 /Courier AF
16080 23361 MT
(BITOPERATIONS)SH
11 /Times-Roman AF
13680 25753 MT
(Raw and Formatted Input and Output)SH
10 /Courier AF
16080 26949 MT
(IO)SH
11 /Times-Roman AF
13680 28877 MT
(As with supplied procedures, we'll try to present pseudo-modules as if they)SH
13680 30254 MT
(were ordinary definition modules.  But again, many of the declarations can't)SH
13680 31631 MT
(be expressed in ordinary Modula-2, and we'll take the same liberties to)SH
13680 33008 MT
(describe them as we did with supplied procedures.)SH
13680 34936 MT
(Case is not significant in identifiers defined in)SH
13680 36313 MT
(pseudo-modules-)SH
21156 XM
(-)SH
21422 XM
(-)SH
10 /Courier AF
(SYSTEM.WORD)SH
11 /Times-Roman AF
28663 XM
(and)SH
10 /Courier AF
30526 XM
(System.Word)SH
11 /Times-Roman AF
37401 XM
(and)SH
10 /Courier AF
39264 XM
(system.word)SH
11 /Times-Roman AF
46139 XM
(are)SH
13680 37690 MT
(all the same identifier.)SH
/Times-Bold SF
13680 39618 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2 case is significant in pseudo-module)SH
13680 40995 MT
(identifiers, and these identifiers are usually spelled in all upper case.)SH
/Courier SF
13680 42923 MT
([[)SH
/Times-Roman SF
15660 XM
(I've used all upper case, because this is how you must spell them if you)SH
13680 44300 MT
(use the ``)SH
10 /Courier AF
(-s)SH
11 /Times-Roman AF
('' or ``)SH
10 /Courier AF
(-sk)SH
11 /Times-Roman AF
('' flags.  \050Actually, I can't really imagine why you)SH
13680 45677 MT
(should get to use)SH
/Times-Italic SF
21380 XM
(any)SH
/Times-Roman SF
23243 XM
(of these modules if you used the ``)SH
10 /Courier AF
(-s)SH
11 /Times-Roman AF
('' flag\051.  Should I)SH
13680 47054 MT
(change the compiler, and capitalize)SH
10 /Courier AF
29500 XM
(BITOPERATIONS)SH
11 /Times-Roman AF
37575 XM
(and)SH
10 /Courier AF
39438 XM
(IO)SH
11 /Times-Roman AF
40913 XM
(according to)SH
13680 48431 MT
(the conventions described in Chapter 21, page 131?  Since)SH
10 /Courier AF
39675 XM
(SYSTEM)SH
11 /Times-Roman AF
43550 XM
(is)SH
13680 49808 MT
(somewhat ``standard,'' leaving its definition in capitals seems reasonable.)SH
/Courier SF
13680 51185 MT
(]])SH
12 /Times-Roman AF
13680 55466 MT
(15.1. Module)SH
11 /Courier AF
20414 XM
(SYSTEM)SH
/Times-Roman SF
13680 57507 MT
(The module)SH
10 /Courier AF
19240 XM
(SYSTEM)SH
11 /Times-Roman AF
23115 XM
(contains system-dependent constants, types, and)SH
13680 58884 MT
(procedures. According)
275 W( to Wirth:)SH
10 SS 
15680 60675 MT
(The facilities exported from the module)SH
9 /Courier AF
31844 XM
(SYSTEM)SH
10 /Times-Roman AF
35334 XM
(are specified by)SH
15680 61780 MT
(individual implementations.  Normally, the types)SH
9 /Courier AF
35569 XM
(WORD)SH
10 /Times-Roman AF
37979 XM
(and)SH
9 /Courier AF
39673 XM
(ADDRESS)SH
10 /Times-Roman AF
(, and)SH
15680 62885 MT
(the procedures)SH
9 /Courier AF
21789 XM
(ADR)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
23909 XM
(TSIZE)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
27109 XM
(NEWPROCESS)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
33009 XM
(TRANSFER)SH
10 /Times-Roman AF
(, are among them.)SH
ES
%%Page: 80 81
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(80)SH
38664 XM
(Pseudo-Modules)SH
12 /Times-Roman AF
11520 8023 MT
(15.1.1. Numeric Constants)SH
10 /Courier AF
14016 9933 MT
(CONST)SH
16416 10964 MT
(MININT =)
3000 W( -\0502^31\051;)SH
16416 11995 MT
(MAXINT =)
3000 W( 2^31-1;)SH
16416 14057 MT
(MINUNSIGNED = 0;)SH
16416 15088 MT
(MAXUNSIGNED = 2^32-1;)SH
16416 17150 MT
(MINCARD =)
2400 W( 0;)SH
14016 18181 MT
($IF standard THEN)SH
16416 19212 MT
(MAXCARD =)
2400 W( MAXUNSIGNED;)SH
14016 20243 MT
($ELSE)SH
16416 21274 MT
(MAXCARD =)
2400 W( MAXINT;)SH
14016 22305 MT
($END)SH
16416 24367 MT
(MINREAL =)
2400 W( largest negative real;)SH
16416 25398 MT
(MINPOSREAL =)
600 W( minimum positive real;)SH
16416 26429 MT
(MAXREAL =)
2400 W( largest positive real;)SH
16416 28491 MT
(MINLONGREAL =)
1800 W( largest negative longreal;)SH
16416 29522 MT
(MINPOSLONGREAL = minimum positive longreal;)SH
16416 30553 MT
(MAXLONGREAL =)
1800 W( largest positive longreal;)SH
11 /Times-Roman AF
11520 32481 MT
(The minimum, maximum, and precision limits of the numeric types are)SH
11520 33858 MT
(available in)SH
10 /Courier AF
16896 XM
(SYSTEM)SH
11 /Times-Roman AF
(. For)
275 W( base-10 approximations of the)SH
10 /Courier AF
36748 XM
(REAL)SH
11 /Times-Roman AF
39423 XM
(constants, see)SH
11520 35235 MT
(Section 18.2.6, page 99; for the)SH
10 /Courier AF
25603 XM
(LONGREAL)SH
11 /Times-Roman AF
30678 XM
(constants, see Section 18.2.7,)SH
11520 36612 MT
(page 100.)SH
11520 38540 MT
(Except for the precision limits)SH
10 /Courier AF
25115 XM
(MINPOSREAL)SH
11 /Times-Roman AF
31390 XM
(and)SH
10 /Courier AF
33253 XM
(MINPOSLONGREAL)SH
11 /Times-Roman AF
(, it is)SH
11520 39917 MT
(better style to use the supplied procedures)SH
10 /Courier AF
30245 XM
(FIRST)SH
11 /Times-Roman AF
33520 XM
(\050page 71\051 or)SH
10 /Courier AF
39169 XM
(LAST)SH
11 /Times-Roman AF
41844 XM
(\050page)SH
11520 41294 MT
(72\051 than constants from)SH
10 /Courier AF
22212 XM
(SYSTEM)SH
11 /Times-Roman AF
(.)SH
12 SS 
11520 44489 MT
(15.1.2. Bytes and Words)SH
10 /Courier AF
14016 46399 MT
(CONST)SH
16416 47430 MT
(BITSPERWORD =)
600 W( 32;)SH
16416 48461 MT
(BYTESPERWORD =  4;)SH
16416 49492 MT
(BITSPERBYTE =)
600 W( BITSPERWORD DIV BYTESPERWORD;)SH
16416 51554 MT
(LEASTSIGBIT = 0;)600 W
16416 52585 MT
(MOSTSIGBIT =)
1200 W( 31;)SH
14016 54647 MT
(TYPE)SH
16416 55678 MT
(WORD;)SH
16416 56709 MT
(BYTE = @SIZE BITSPERBYTE WORD;)SH
11 /Times-Roman AF
11520 58637 MT
(The constants are self-explanatory.)SH
11520 60565 MT
(Type)SH
10 /Courier AF
14055 XM
(WORD)SH
11 /Times-Roman AF
16730 XM
(has a size of one machine word.  When used as the type a formal)SH
11520 61942 MT
(parameter in a procedure,)SH
10 /Courier AF
23031 XM
(WORD)SH
11 /Times-Roman AF
25706 XM
(is compatible with any type of the same size)SH
11520 63319 MT
(or smaller;)SH
10 /Courier AF
16530 XM
(ARRAY OF WORD)SH
11 /Times-Roman AF
24605 XM
(is compatible with any type.)SH
11520 65247 MT
(Type)SH
10 /Courier AF
14055 XM
(BYTE)SH
11 /Times-Roman AF
16730 XM
(has a size of one machine byte \0508 bits\051.  When used as the type of)SH
11520 66624 MT
(a formal parameter in a procedure,)SH
10 /Courier AF
27001 XM
(BYTE)SH
11 /Times-Roman AF
29676 XM
(is compatible with any type of the)SH
11520 68001 MT
(same size or smaller;)SH
10 /Courier AF
21050 XM
(ARRAY OF BYTE)SH
11 /Times-Roman AF
29125 XM
(is compatible with any type.)SH
ES
%%Page: 81 82
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Module)SH
9 /Courier AF
17208 XM
(SYSTEM)SH
10 /Times-Bold AF
46880 XM
(81)SH
12 /Times-Roman AF
13680 8023 MT
(15.1.3. Addresses and Sizes)SH
10 /Courier AF
16176 9933 MT
(CONST)SH
18576 10964 MT
(BITSPERUNIT = 8;)SH
16176 13026 MT
(TYPE)SH
18576 14057 MT
(UNIT =)
1800 W( BYTE;)SH
18576 15088 MT
(ADDRESS = POINTER @NOCHECK TO WORD;)SH
16176 17150 MT
(PROCEDURE ADR\050VAR v : ARRAY OF BYTE\051 : ADDRESS;)SH
16176 19212 MT
(PROCEDURE SIZE\050VAR v : ARRAY OF BYTE\051 : CARDINAL;)SH
16176 20243 MT
(PROCEDURE TSIZE\050TYPE T {; CONST tag : TagConstant}\051 : CARDINAL;)SH
16176 22305 MT
(PROCEDURE BITSIZE\050VAR v : ARRAY OF BYTE\051 : CARDINAL;)SH
16176 23336 MT
(PROCEDURE TBITSIZE\050TYPE T {; CONST tag : TagConstant}\051 : CARDINAL;)SH
16176 25398 MT
(PROCEDURE BYTESIZE\050VAR v : ARRAY OF BYTE\051 : CARDINAL;)SH
16176 26429 MT
(PROCEDURE TBYTESIZE\050TYPE T {; CONST tag : TagConstant}\051 : CARDINAL;)SH
16176 28491 MT
(PROCEDURE WORDSIZE\050VAR v : ARRAY OF BYTE\051 : CARDINAL;)SH
16176 29522 MT
(PROCEDURE TWORDSIZE\050TYPE T {; CONST tag : TagConstant}\051 : CARDINAL;)SH
11 /Times-Roman AF
13680 31450 MT
(Type)SH
10 /Courier AF
16215 XM
(UNIT)SH
11 /Times-Roman AF
18890 XM
(has a size of one machine addressing unit.  On the VAX, Titan,)SH
13680 32827 MT
(and MIPS,)SH
10 /Courier AF
18661 XM
(UNIT)SH
11 /Times-Roman AF
21336 XM
(is identical to)SH
10 /Courier AF
27539 XM
(BYTE)SH
11 /Times-Roman AF
(.)SH
13680 34755 MT
(Type)SH
10 /Courier AF
16215 XM
(ADDRESS)SH
11 /Times-Roman AF
20690 XM
(represents a normal machine address, and is compatible with)SH
13680 36132 MT
(any pointer \050including dynamic array pointers\051, as well as with)SH
10 /Courier AF
41569 XM
(INTEGER)SH
11 /Times-Roman AF
46044 XM
(and)SH
10 /Courier AF
13680 37509 MT
(UNSIGNED)SH
11 /Times-Roman AF
(. However,)
275 W( to prevent those nasty errors where you forget to use)SH
10 /Courier AF
13680 38886 MT
(SYSTEM.ADR)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
20230 XM
(INTEGER)SH
11 /Times-Roman AF
24705 XM
(and)SH
10 /Courier AF
26568 XM
(UNSIGNED)SH
11 /Times-Roman AF
31643 XM
(values cannot be passed to an)SH
10 /Courier AF
13680 40263 MT
(ADDRESS)SH
11 /Times-Roman AF
18155 XM
(parameter in a procedure.  You must type-transfer such value first.)SH
13680 42191 MT
(The function)SH
10 /Courier AF
19606 XM
(ADR)SH
11 /Times-Roman AF
21681 XM
(returns the address of a variable of any type.  The variable)SH
13680 43568 MT
(must be aligned to a)SH
10 /Courier AF
22815 XM
(UNIT)SH
11 /Times-Roman AF
(.)SH
13680 45496 MT
(The function)SH
10 /Courier AF
19606 XM
(SIZE)SH
11 /Times-Roman AF
22281 XM
(returns the size of a variable in addressing units.  If you)SH
13680 46873 MT
(allocate a pointer to a record using tag fields, then pass the dereferenced)SH
13680 48250 MT
(pointer to)SH
10 /Courier AF
18202 XM
(SIZE)SH
11 /Times-Roman AF
(, you)SH
/Times-Italic SF
23077 XM
(will not)SH
/Times-Roman SF
26685 XM
(get the allocated size, but the maximum size of)SH
13680 49627 MT
(the record; use)SH
10 /Courier AF
20429 XM
(TSIZE)SH
11 /Times-Roman AF
23704 XM
(on the record type instead.  On the other hand, if you)SH
13680 51004 MT
(allocate a pointer to a dynamic array,)SH
10 /Courier AF
30294 XM
(SIZE)SH
11 /Times-Roman AF
32969 XM
(will return the allocated size.)SH
13680 52932 MT
(The function)SH
10 /Courier AF
19606 XM
(TSIZE)SH
11 /Times-Roman AF
22881 XM
(returns the size of a type in addressing units.  You can)SH
13680 54309 MT
(specify a constant expression for each tag field in the last variant of a record)SH
13680 55686 MT
(to determine the size of a particular variant.  You cannot specify dynamic)SH
13680 57063 MT
(array dimensions; use)SH
10 /Courier AF
23547 XM
(SIZE)SH
11 /Times-Roman AF
26222 XM
(on the variable instead.)SH
/Courier SF
13680 58991 MT
([[)SH
/Times-Roman SF
15660 XM
(Sorry about the the weirdness between)SH
10 /Courier AF
32948 XM
(SIZE)SH
11 /Times-Roman AF
35623 XM
(and)SH
10 /Courier AF
37486 XM
(TSIZE)SH
11 /Times-Roman AF
(. It)
275 W( used to be)SH
13680 60368 MT
(even more inconsistent.)SH
/Courier SF
25032 XM
(]])SH
/Times-Roman SF
13680 62296 MT
(The rest of the size functions return the size of a variable or type in bits,)SH
13680 63673 MT
(bytes, or words.  Sizes are always rounded up, so a type of 17 bits would)SH
13680 65050 MT
(return 17 from)SH
10 /Courier AF
20369 XM
(TBITSIZE)SH
11 /Times-Roman AF
25444 XM
(, 3 from)SH
10 /Courier AF
29232 XM
(TBYTESIZE)SH
11 /Times-Roman AF
(, and 1 from)SH
10 /Courier AF
40283 XM
(TWORDSIZE)SH
11 /Times-Roman AF
(.)SH
/Times-Bold SF
13680 66978 MT
(Extension:)SH
/Times-Roman SF
18967 XM
(In standard Modula-2,)SH
10 /Courier AF
29047 XM
(INTEGER)SH
11 /Times-Roman AF
33522 XM
(and standard)SH
10 /Courier AF
39386 XM
(CARDINAL)SH
11 /Times-Roman AF
44461 XM
(values)SH
13680 68355 MT
(can be passed to an)SH
10 /Courier AF
22445 XM
(ADDRESS)SH
11 /Times-Roman AF
26920 XM
(parameter, and procedure)SH
10 /Courier AF
38400 XM
(SIZE)SH
11 /Times-Roman AF
41075 XM
(has evidently)SH
13680 69732 MT
(been upgraded to a supplied procedure.)SH
ES
%%Page: 82 83
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(82)SH
38664 XM
(Pseudo-Modules)SH
12 /Times-Roman AF
11520 8023 MT
(15.1.4. Coroutines)SH
10 /Courier AF
14016 9933 MT
(TYPE PROCESS;)SH
14016 11995 MT
(PROCEDURE NEWPROCESS\050proc)
SH( :)
1800 W( PROCEDURE;)SH
26616 13026 MT
(base :)
1800 W( ADDRESS;)SH
26616 14057 MT
(size :)
1800 W( CARDINAL;)SH
24216 15088 MT
(VAR process : PROCESS\051;)SH
14016 17150 MT
(PROCEDURE TRANSFER\050VAR current, new : PROCESS\051;)SH
11 /Times-Roman AF
11520 19078 MT
(The type)SH
10 /Courier AF
15674 XM
(PROCESS)SH
11 /Times-Roman AF
20149 XM
(represents the complete machine state.  This may include)SH
11520 20455 MT
(any registers, flags, stack limits, and other information needed to describe an)SH
11520 21832 MT
(independent thread of control.)SH
11520 23760 MT
(The procedure)SH
10 /Courier AF
18176 XM
(NEWPROCESS)SH
11 /Times-Roman AF
24451 XM
(creates a process.  You provide a parameterless)SH
11520 25137 MT
(procedure to execute, as well as the base address and size \050in addressing)SH
11520 26514 MT
(units\051 of a block of memory the process can use for a stack.  The necessary)SH
11520 27891 MT
(size is dependent not only upon the machine type, but also on the procedure)SH
11520 29268 MT
(being executed.  Better to allocate a lot of memory than to recurse into)SH
11520 30645 MT
(darkness.)SH
11520 32573 MT
(The procedure)SH
10 /Courier AF
18176 XM
(TRANSFER)SH
11 /Times-Roman AF
23251 XM
(saves the current machine state in)SH
10 /Courier AF
38339 XM
(current)SH
11 /Times-Roman AF
(, and)SH
11520 33950 MT
(\050re\051starts the machine state saved in)SH
10 /Courier AF
27524 XM
(new)SH
11 /Times-Roman AF
(. If)
275 W( you are bouncing back and forth)SH
11520 35327 MT
(between two processes, you can pass the same process variable to both)SH
10 /Courier AF
11520 36704 MT
(current)SH
11 /Times-Roman AF
15995 XM
(and)SH
10 /Courier AF
17858 XM
(new)SH
11 /Times-Roman AF
(.)SH
/Times-Bold SF
11520 38632 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(In standard Modula-2, the type)SH
10 /Courier AF
30675 XM
(PROCESS)SH
11 /Times-Roman AF
35150 XM
(has been replaced by)SH
11520 40009 MT
(type)SH
10 /Courier AF
13689 XM
(ADDRESS)SH
11 /Times-Roman AF
(.)SH
12 SS 
11520 43204 MT
(15.1.5. Miscellaneous)SH
10 /Courier AF
14016 45114 MT
(PROCEDURE CPUTIME\050\051 : CARDINAL;)SH
11 /Times-Roman AF
11520 47042 MT
(The function)SH
10 /Courier AF
17446 XM
(CPUTIME)SH
11 /Times-Roman AF
21921 XM
(returns the accumulated CPU time used by the)SH
11520 48419 MT
(program in milliseconds.)SH
ES
%%Page: 83 84
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Module)SH
9 /Courier AF
17208 XM
(SYSTEM)SH
10 /Times-Bold AF
46880 XM
(83)SH
12 /Times-Roman AF
13680 8023 MT
(15.2. Module)SH
11 /Courier AF
20414 XM
(BITOPERATIONS)SH
/Times-Roman SF
13680 10064 MT
(The module)SH
10 /Courier AF
19240 XM
(BITOPERATIONS)SH
11 /Times-Roman AF
27315 XM
(provides efficient bit manipulation of 32-bit)SH
13680 11441 MT
(words, including logical operations, shifts, and bit fields.)SH
10 /Courier AF
16176 13096 MT
(TYPE)SH
18576 14127 MT
(FieldOffset = [0 .. SYSTEM.BITSPERWORD-1];)SH
18576 15158 MT
(FieldSize =)
1200 W( [1 .. SYSTEM.BITSPERWORD];)SH
18576 16189 MT
(Bits =)
4200 W( INTEGER | UNSIGNED | SYSTEM.WORD;)SH
16176 18251 MT
(PROCEDURE BITNOT\050a : Bits\051 : TypeOf\050a\051;)SH
16176 20313 MT
(PROCEDURE BITAND\050a, b : Bits\051 : TypeOf\050a\051;)SH
16176 21344 MT
(PROCEDURE BITOR \050a, b : Bits\051 : TypeOf\050a\051;)SH
16176 22375 MT
(PROCEDURE BITXOR\050a, b : Bits\051 : TypeOf\050a\051;)SH
16176 24437 MT
(PROCEDURE BITSHIFTLEFT \050a : Bits; shift : FieldOffset\051 : TypeOf\050a\051;)SH
16176 25468 MT
(PROCEDURE BITSHIFTRIGHT\050a : Bits; shift : FieldOffset\051 : TypeOf\050a\051;)SH
16176 27530 MT
(PROCEDURE BITEXTRACT\050word)
SH( :)
1200 W( Bits;)SH
28776 28561 MT
(offset : FieldOffset;)SH
28776 29592 MT
(size :)
1200 W( FieldSize\051 : TypeOf\050word\051;)SH
16176 31654 MT
(PROCEDURE BITINSERT\050field  : Bits;)SH
28176 32685 MT
(offset : FieldOffset;)SH
28176 33716 MT
(size :)
1200 W( FieldSize;)SH
28176 34747 MT
(word :)
1200 W( Bits\051 : TypeOf\050word\051;)SH
11 /Times-Roman AF
13680 36675 MT
(Function)SH
10 /Courier AF
17867 XM
(BITNOT)SH
11 /Times-Roman AF
21742 XM
(returns the bit complement of its argument.  The return)SH
13680 38052 MT
(type is the same as the argument type.)SH
13680 39980 MT
(Functions)SH
10 /Courier AF
18295 XM
(BITAND)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
22445 XM
(BITOR)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
27858 XM
(BITXOR)SH
11 /Times-Roman AF
31733 XM
(perform the indicated operation)SH
13680 41357 MT
(across all bits.  The return type is the same as the type of the first argument.)SH
13680 43285 MT
(Functions)SH
10 /Courier AF
18295 XM
(BITSHIFTLEFT)SH
11 /Times-Roman AF
25770 XM
(and)SH
10 /Courier AF
27633 XM
(BITSHIFTRIGHT)SH
11 /Times-Roman AF
35708 XM
(logically shift a word left)SH
13680 44662 MT
(or right by 0 to 31 bits.  If runtime checking is enabled, the number of bits is)SH
13680 46039 MT
(checked to make sure it lies inside the range.  If runtime checking is not)SH
13680 47416 MT
(enabled and an out-of-range shift amount is specified, the result is)SH
13680 48793 MT
(machine-dependent. The)
275 W( VAX returns 0.  The Titan and MIPS use the least)SH
13680 50170 MT
(significant five bits of the shift amount.)SH
13680 52098 MT
(Function)SH
10 /Courier AF
17867 XM
(BITEXTRACT)SH
11 /Times-Roman AF
24142 XM
(returns the field of)SH
10 /Courier AF
32572 XM
(size)SH
11 /Times-Roman AF
35247 XM
(bits starting at bit)SH
10 /Courier AF
43193 XM
(offset)SH
11 /Times-Roman AF
13680 53475 MT
(in)SH
10 /Courier AF
14811 XM
(word)SH
11 /Times-Roman AF
(. The)
275 W( field is right-justified, and the high bits of the returned value)SH
13680 54852 MT
(are 0.  If runtime checking is enabled, the)SH
10 /Courier AF
32219 XM
(offset)SH
11 /Times-Roman AF
36094 XM
(and)SH
10 /Courier AF
37957 XM
(size)SH
11 /Times-Roman AF
40632 XM
(parameters are)SH
13680 56229 MT
(checked.)SH
13680 58157 MT
(Function)SH
10 /Courier AF
17867 XM
(BITINSERT)SH
11 /Times-Roman AF
23542 XM
(returns the word obtained by inserting)SH
10 /Courier AF
40588 XM
(field)SH
11 /Times-Roman AF
43863 XM
(for)SH
10 /Courier AF
45420 XM
(size)SH
11 /Times-Roman AF
13680 59534 MT
(bits into)SH
10 /Courier AF
17532 XM
(word)SH
11 /Times-Roman AF
20207 XM
(starting at bit)SH
10 /Courier AF
26288 XM
(offset)SH
11 /Times-Roman AF
(. If)
275 W( runtime checking is enable, the)SH
10 /Courier AF
13680 60911 MT
(offset)SH
11 /Times-Roman AF
17555 XM
(and)SH
10 /Courier AF
19418 XM
(size)SH
11 /Times-Roman AF
22093 XM
(parameters are checked.)SH
ES
%%Page: 84 85
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(84)SH
38664 XM
(Pseudo-Modules)SH
12 /Times-Roman AF
11520 8023 MT
(15.3. Module)SH
11 /Courier AF
18254 XM
(IO)SH
/Times-Roman SF
11520 10064 MT
(The module IO provides a type-checked interface to the C runtime library,)SH
11520 11441 MT
(but with the names changed and occasionally parameters rearranged.  In all)SH
11520 12818 MT
(cases the underlying C routines are identified so that you can use the UNIX)SH
10 /Courier AF
11520 14195 MT
(man)SH
11 /Times-Roman AF
13595 XM
(command for more details.)SH
12 SS 
11520 17390 MT
(15.3.1. Files)SH
10 /Courier AF
14016 19300 MT
(TYPE)SH
16416 20331 MT
(FILE;)SH
14016 22393 MT
(VAR)SH
16416 23424 MT
(INPUT, OUTPUT, TERMINAL : FILE;)SH
14016 25486 MT
(PROCEDURE OPEN\050CONST name : ARRAY @NOCOUNT OF CHAR;)SH
23016 26517 MT
(CONST mode : ARRAY @NOCOUNT OF CHAR\051 : FILE;)SH
14016 27548 MT
(PROCEDURE CLOSE\050f : FILE\051;)SH
11 /Times-Roman AF
11520 29476 MT
(The module)SH
10 /Courier AF
17080 XM
(IO)SH
11 /Times-Roman AF
18555 XM
(declares the opaque type)SH
10 /Courier AF
29671 XM
(FILE)SH
11 /Times-Roman AF
(. The)
275 W( files)SH
10 /Courier AF
37050 XM
(INPUT)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
40600 XM
(OUTPUT)SH
11 /Times-Roman AF
(,)SH
11520 30853 MT
(and)SH
10 /Courier AF
13383 XM
(TERMINAL)SH
11 /Times-Roman AF
18458 XM
(correspond to the C files)SH
10 /Courier AF
29547 XM
(input)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
33097 XM
(output)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
39110 XM
(stderr)SH
11 /Times-Roman AF
(.)SH
11520 32781 MT
(The function)SH
10 /Courier AF
17446 XM
(OPEN)SH
11 /Times-Roman AF
20121 XM
(calls the C library procedure)SH
10 /Courier AF
32918 XM
(fopen)SH
11 /Times-Roman AF
36193 XM
(to open the file)SH
11520 34158 MT
(named)SH
10 /Courier AF
14727 XM
(name)SH
11 /Times-Roman AF
(. If)
275 W( the open fails,)SH
10 /Courier AF
25435 XM
(OPEN)SH
11 /Times-Roman AF
28110 XM
(returns)SH
10 /Courier AF
31439 XM
(NIL)SH
11 /Times-Roman AF
(. On)
275 W( Ultrix, the)SH
10 /Courier AF
40480 XM
(mode)SH
11 /Times-Roman AF
43155 XM
(string)SH
11520 35535 MT
(can be one of the following:)SH
10 /Courier AF
13720 37486 MT
("r")SH
11 /Times-Roman AF
18760 XM
(Open for reading)SH
10 /Courier AF
13720 38682 MT
("w")SH
11 /Times-Roman AF
18760 XM
(Truncate or create for writing)SH
10 /Courier AF
13720 39878 MT
("a")SH
11 /Times-Roman AF
18760 XM
(Append: open for writing at end of file, or create for writing)SH
10 /Courier AF
13720 41074 MT
("A")SH
11 /Times-Roman AF
18760 XM
(Append with no overwrite: open for writing at end-of-file, or)SH
18760 42270 MT
(create for writing)SH
10 /Courier AF
13720 43466 MT
("r+")SH
11 /Times-Roman AF
18760 XM
(Open for reading and writing)SH
10 /Courier AF
13720 44662 MT
("w+")SH
11 /Times-Roman AF
18760 XM
(Truncate or create for reading and writing)SH
10 /Courier AF
13720 45858 MT
("a+")SH
11 /Times-Roman AF
18760 XM
(Append: open or create for reading and writing at end-of-file)SH
10 /Courier AF
13720 47054 MT
("A+")SH
11 /Times-Roman AF
18760 XM
(Append with no overwrite: open or create for update at)SH
18760 48250 MT
(end-of-file)SH
11520 50178 MT
(The procedure)SH
10 /Courier AF
18176 XM
(CLOSE)SH
11 /Times-Roman AF
21451 XM
(calls the C library procedure)SH
10 /Courier AF
34248 XM
(fclose)SH
11 /Times-Roman AF
38123 XM
(to close the file.)SH
12 SS 
11520 53373 MT
(15.3.2. Binary IO)SH
10 /Courier AF
14016 55283 MT
(PROCEDURE READB \050)
SH( f)
1800 W( :)
3000 W( FILE;)SH
24216 56314 MT
(VAR buff)
SH( :)
1200 W( ARRAY @NOCOUNT OF BYTE;)SH
26616 57345 MT
(length : INTEGER\051 : INTEGER;)SH
14016 58376 MT
(PROCEDURE WRITEB\050)
SH( f)
1800 W( :)
3000 W( FILE;)SH
24216 59407 MT
(VAR buff)
SH( :)
1200 W( ARRAY @NOCOUNT OF BYTE;)SH
26616 60438 MT
(length : INTEGER\051;)SH
11 /Times-Roman AF
11520 62366 MT
(The function)SH
10 /Courier AF
17446 XM
(READB)SH
11 /Times-Roman AF
20721 XM
(calls the C routine)SH
10 /Courier AF
29031 XM
(fread)SH
11 /Times-Roman AF
32306 XM
(to read up to)SH
10 /Courier AF
38110 XM
(length)SH
11 /Times-Roman AF
41985 XM
(bytes of)SH
11520 63743 MT
(data from file)SH
10 /Courier AF
17781 XM
(f)SH
11 /Times-Roman AF
18656 XM
(into)SH
10 /Courier AF
20643 XM
(buff)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
23868 XM
(READB)SH
11 /Times-Roman AF
27143 XM
(returns the actual number of bytes read; it)SH
11520 65120 MT
(returns 0 upon end-of-file or error.)SH
11520 67048 MT
(The procedure)SH
10 /Courier AF
18176 XM
(WRITEB)SH
11 /Times-Roman AF
22051 XM
(calls the C routine)SH
10 /Courier AF
30361 XM
(fwrite)SH
11 /Times-Roman AF
34236 XM
(to write)SH
10 /Courier AF
37902 XM
(length)SH
11 /Times-Roman AF
41777 XM
(bytes of)SH
11520 68425 MT
(data from)SH
10 /Courier AF
16040 XM
(buff)SH
11 /Times-Roman AF
18715 XM
(to file)SH
10 /Courier AF
21587 XM
(f)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
23012 XM
(WRITEB)SH
11 /Times-Roman AF
26887 XM
(unfortunately throws out the value)SH
11520 69802 MT
(returned from)SH
10 /Courier AF
17872 XM
(fwrite)SH
11 /Times-Roman AF
(, so you don't how many bytes of data were actually)SH
11520 71179 MT
(written.)SH
ES
%%Page: 85 86
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Module)SH
9 /Courier AF
17208 XM
(IO)SH
10 /Times-Bold AF
46880 XM
(85)SH
12 /Times-Roman AF
13680 8023 MT
(15.3.3. Character and String IO)SH
10 /Courier AF
16176 9933 MT
(PROCEDURE READC \050f : FILE; VAR ch : CHAR\051 : INTEGER;)SH
16176 10964 MT
(PROCEDURE WRITEC\050f : FILE;)
SH( ch)
2400 W( : CHAR\051;)SH
16176 13026 MT
(PROCEDURE READS \050)
SH( f :)
3000 W( FILE;)SH
26376 14057 MT
(VAR buff :)
1200 W( ARRAY OF CHAR\051 : BOOLEAN;)SH
16176 15088 MT
(PROCEDURE READS \050)
SH( f :)
3000 W( FILE;)SH
26376 16119 MT
(VAR buff :)
1200 W( ARRAY @NOCOUNT OF CHAR;)SH
29976 17150 MT
(length : INTEGER\051 : BOOLEAN;)SH
16176 19212 MT
(PROCEDURE WRITES\050)
SH( f :)
3000 W( FILE;)SH
26376 20243 MT
(CONST buff)
SH( :)
1200 W( ARRAY @NOCOUNT OF CHAR\051;)SH
11 /Times-Roman AF
13680 22171 MT
(The function)SH
10 /Courier AF
19606 XM
(READC)SH
11 /Times-Roman AF
22881 XM
(calls the C routine)SH
10 /Courier AF
31191 XM
(fgetc)SH
11 /Times-Roman AF
34466 XM
(to read a single character from)SH
13680 23548 MT
(file)SH
10 /Courier AF
15421 XM
(f)SH
11 /Times-Roman AF
16296 XM
(into)SH
10 /Courier AF
18283 XM
(ch)SH
11 /Times-Roman AF
(. Through)
275 W( compiler magic unavailable to normal users on the)SH
13680 24925 MT
(Titan,)SH
10 /Courier AF
16552 XM
(ch)SH
11 /Times-Roman AF
18027 XM
(may be an element of an array of characters.  It returns a 1 at)SH
13680 26302 MT
(end-of-file or error, and 0 otherwise.)SH
13680 28230 MT
(The procedure)SH
10 /Courier AF
20336 XM
(WRITEC)SH
11 /Times-Roman AF
24211 XM
(calls the C routine)SH
10 /Courier AF
32521 XM
(fputc)SH
11 /Times-Roman AF
35796 XM
(to write the character)SH
10 /Courier AF
45384 XM
(ch)SH
11 /Times-Roman AF
13680 29607 MT
(into file)SH
10 /Courier AF
17408 XM
(f)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
18833 XM
(WRITEC)SH
11 /Times-Roman AF
22708 XM
(throws away the return value of)SH
10 /Courier AF
36940 XM
(fputc)SH
11 /Times-Roman AF
(, so you can't)SH
13680 30984 MT
(find out if the byte was actually written.)SH
13680 32912 MT
(The function)SH
10 /Courier AF
19606 XM
(READS)SH
11 /Times-Roman AF
22881 XM
(calls the C routine)SH
10 /Courier AF
31191 XM
(fgets)SH
11 /Times-Roman AF
34466 XM
(to read a string from file)SH
10 /Courier AF
45462 XM
(f)SH
11 /Times-Roman AF
(,)SH
13680 34289 MT
(for up to)SH
10 /Courier AF
17743 XM
(NUMBER\050buff\051-1)SH
11 /Times-Roman AF
26418 XM
(characters or a newline character, whichever)SH
13680 35666 MT
(comes first.  \050You must supply)SH
10 /Courier AF
27521 XM
(NUMBER\050buff\051)SH
11 /Times-Roman AF
34996 XM
(for an uncounted array in the)SH
13680 37043 MT
(parameter)SH
10 /Courier AF
18351 XM
(length)SH
11 /Times-Roman AF
(\051. A)
275 W( null character is then appended to the last character)SH
13680 38420 MT
(read in.)SH
10 /Courier AF
17528 XM
(READS)SH
11 /Times-Roman AF
20803 XM
(returns)SH
10 /Courier AF
24132 XM
(TRUE)SH
11 /Times-Roman AF
26807 XM
(if the read succeeded, and)SH
10 /Courier AF
38471 XM
(FALSE)SH
11 /Times-Roman AF
41746 XM
(on end-of-file)SH
13680 39797 MT
(or error.)SH
13680 41725 MT
(The procedure)SH
10 /Courier AF
20336 XM
(WRITES)SH
11 /Times-Roman AF
24211 XM
(calls the C routine)SH
10 /Courier AF
32521 XM
(fputs)SH
11 /Times-Roman AF
35796 XM
(to write a string to file)SH
10 /Courier AF
45878 XM
(f)SH
11 /Times-Roman AF
(.)SH
13680 43102 MT
(All characters up to, but not including, the null terminating character are)SH
13680 44479 MT
(written to the file.)SH
12 SS 
13680 47674 MT
(15.3.4. Formatted IO)SH
10 /Courier AF
16176 49584 MT
(TYPE)SH
18576 50615 MT
(Formattable = INTEGER | UNSIGNED | CHAR | BOOLEAN)SH
25776 51646 MT
(| Enumeration | Subrange | REAL | LONGREAL)SH
25776 52677 MT
(| ARRAY @NOCOUNT OF CHAR;)SH
16176 54739 MT
(PROCEDURE READF  \050)
SH( f :)
3000 W( FILE;)SH
26976 55770 MT
(CONST format : ARRAY @NOCOUNT OF CHAR)SH
25176 56801 MT
({; VAR arg)
SH( :)
3000 W( Formattable}\051 : INTEGER;)SH
16176 57832 MT
(PROCEDURE SREADF \050CONST s)
SH( :)
3000 W( ARRAY @NOCOUNT OF CHAR;)SH
26976 58863 MT
(CONST format : ARRAY @NOCOUNT OF CHAR)SH
25176 59894 MT
({; VAR arg)
SH( :)
3000 W( Formattable}\051 : INTEGER;)SH
16176 61956 MT
(PROCEDURE WRITEF \050)
SH( f :)
3000 W( FILE;)SH
26976 62987 MT
(CONST format : ARRAY @NOCOUNT OF CHAR)SH
25176 64018 MT
({; CONST arg)
SH( :)
1800 W( Formattable}\051;)SH
16176 65049 MT
(PROCEDURE SWRITEF\050VAR)
SH( s  :)
1200 W( ARRAY @NOCOUNT OF CHAR;)SH
26976 66080 MT
(CONST format : ARRAY @NOCOUNT OF CHAR)SH
25176 67111 MT
({; CONST arg)
SH( :)
1800 W( Formattable}\051;)SH
11 /Times-Roman AF
13680 69039 MT
(The function)SH
10 /Courier AF
19606 XM
(READF)SH
11 /Times-Roman AF
22881 XM
(calls the C routine)SH
10 /Courier AF
31191 XM
(fscanf)SH
11 /Times-Roman AF
35066 XM
(to perform formatted reads)SH
13680 70416 MT
(from a file.  The function)SH
10 /Courier AF
25073 XM
(SREADF)SH
11 /Times-Roman AF
28948 XM
(calls the C routine)SH
10 /Courier AF
37258 XM
(sscanf)SH
11 /Times-Roman AF
41133 XM
(to perform)SH
13680 71793 MT
(formatted reads from a string.  The compiler type-checks the arguments)SH
ES
%%Page: 86 87
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(86)SH
38664 XM
(Pseudo-Modules)SH
11 /Times-Roman AF
11520 7955 MT
(against the)SH
10 /Courier AF
16530 XM
(format)SH
11 /Times-Roman AF
20405 XM
(string, which must be a constant.  The format string)SH
11520 9332 MT
(behaves as described in the)SH
10 /Courier AF
23767 XM
(man)SH
11 /Times-Roman AF
25842 XM
(page for)SH
10 /Courier AF
29750 XM
(fscanf)SH
11 /Times-Roman AF
(, except that you can use)SH
11520 10709 MT
(the formatting characters ``)SH
10 /Courier AF
(E)SH
11 /Times-Roman AF
('', ``)SH
10 /Courier AF
(F)SH
11 /Times-Roman AF
('', and ``)SH
10 /Courier AF
(G)SH
11 /Times-Roman AF
('' as synonyms for ``)SH
10 /Courier AF
(le)SH
11 /Times-Roman AF
('',)SH
11520 12086 MT
(``)SH
10 /Courier AF
(lf)SH
11 /Times-Roman AF
('', and ``)SH
10 /Courier AF
(lg)SH
11 /Times-Roman AF
('' to read a)SH
10 /Courier AF
23597 XM
(LONGREAL)SH
11 /Times-Roman AF
(. Both)
275 W( functions return the number of)SH
11520 13463 MT
(items successfully read.)SH
11520 15391 MT
(Procedures)SH
10 /Courier AF
16681 XM
(WRITEF)SH
11 /Times-Roman AF
20556 XM
(and)SH
10 /Courier AF
22419 XM
(SWRITEF)SH
11 /Times-Roman AF
26894 XM
(call the C routines)SH
10 /Courier AF
35204 XM
(fprintf)SH
11 /Times-Roman AF
39679 XM
(and)SH
10 /Courier AF
11520 16768 MT
(sprintf)SH
11 /Times-Roman AF
15995 XM
(to perform formatted writes to files and strings.  Again, the)SH
11520 18145 MT
(compiler type-checks the arguments against the)SH
10 /Courier AF
32718 XM
(format)SH
11 /Times-Roman AF
36593 XM
(string, which must)SH
11520 19522 MT
(be a constant.  The format string behaves as described in the)SH
10 /Courier AF
38307 XM
(man)SH
11 /Times-Roman AF
40382 XM
(page for)SH
10 /Courier AF
11520 20899 MT
(fprintf)SH
11 /Times-Roman AF
(, except that you can use the formatting characters ``)SH
10 /Courier AF
(E)SH
11 /Times-Roman AF
('', ``)SH
10 /Courier AF
(F)SH
11 /Times-Roman AF
('', and)SH
11520 22276 MT
(``)SH
10 /Courier AF
(G)SH
11 /Times-Roman AF
('' as synonyms for ``)SH
10 /Courier AF
(le)SH
11 /Times-Roman AF
('', ``)SH
10 /Courier AF
(lf)SH
11 /Times-Roman AF
('', and ``)SH
10 /Courier AF
(lg)SH
11 /Times-Roman AF
('' to write a)SH
10 /Courier AF
37003 XM
(LONGREAL)SH
11 /Times-Roman AF
(, and)SH
11520 23653 MT
(you can use the formatting character ``)SH
10 /Courier AF
(n)SH
11 /Times-Roman AF
('' to write the name of an)SH
11520 25030 MT
(enumeration constant.  There is no way to determine if the formatted write)SH
11520 26407 MT
(was actually successful.)SH
ES
%%Page: 87 88
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(87)SH
14 /Times-Roman AF
25375 11760 MT
(16. Type-Checking)SH
10 SS 
31680 15180 MT
(If the stupid compiler won't let you run)SH
31680 16557 MT
(the program, how are you supposed to)SH
31680 17934 MT
(know whether there's really a bug?)SH
31680 19311 MT
(-)SH
31913 XM
(-)SH
32146 XM
(-David Wall)SH
11 SS 
13680 21171 MT
(Type-checking keeps you from having to debug programs in which you've)SH
13680 22548 MT
(done colossally stupid things, like calling a procedure with the wrong)SH
13680 23925 MT
(number of parameters, or comparing an unsigned number to a signed)SH
13680 25302 MT
(number. But)
275 W( type compatibility rules in Modula-2, especially with all the)SH
13680 26679 MT
(extensions, are not always obvious.  The idea of this chapter is to put most)SH
13680 28056 MT
(things about type-checking in one spot so that you have a fighting chance of)SH
13680 29433 MT
(seeing patterns in the information.)SH
12 SS 
13680 33714 MT
(16.1. Same Type)SH
11 SS 
13680 35755 MT
(Two expressions have the same type only if they have the same supplied type)SH
13680 37132 MT
(or if they have a constructed type resulting from the same occurrence of a)SH
13680 38509 MT
(type constructor.  Two different occurrences of the same type constructor)SH
13680 39886 MT
(produce two different types.  Refer to Section 5.2, page 21, if you'd like to)SH
13680 41263 MT
(worry about this point some more.)SH
13680 43314 MT
(Obviously we need to say something about renaming:)SH
10 /Courier AF
16176 44969 MT
(TYPE)SH
18576 46000 MT
(Dog = ARRAY [0..99] OF INTEGER;)SH
18576 47031 MT
(Canine = Dog;)SH
13680 48817 MT
(Canine)SH
11 /Times-Roman AF
17555 XM
(is the same type \050not just the same basetype\051 as)SH
10 /Courier AF
38633 XM
(Dog)SH
11 /Times-Roman AF
(.)SH
12 SS 
13680 53098 MT
(16.2. Basetype)SH
11 SS 
13680 55139 MT
(Throughout this chapter we're going to use the idea of basetype.  Subrange)SH
13680 56516 MT
(types inherit their basetype from the type of their bounds.)SH
10 /Courier AF
39524 XM
(@SIZE)SH
11 /Times-Roman AF
42799 XM
(and)SH
10 /Courier AF
13680 57893 MT
(@ALIGN)SH
11 /Times-Roman AF
17555 XM
(types inherit their basetype from the type they modify.  All other)SH
13680 59270 MT
(types have a basetype identical to the type itself.  An example:)SH
ES
%%Page: 88 89
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(88)SH
39164 XM
(Type-Checking)SH
/Courier SF
13920 7824 MT
(TYPE BASETYPE)15600 W
11520 8855 MT
(--------------------------------------------)SH
13920 9886 MT
(A = \050Red, Blue, Yellow\051;)
SH( A)3600 W
13920 10917 MT
(B = [Red..Blue];)
SH( A)8400 W
13920 11948 MT
(C = [Blue..Yellow];)
SH( A)6600 W
13920 14010 MT
(I = [0..10];)
SH( INTEGER)
10800 W( | UNSIGNED)SH
13920 15041 MT
(J = [-128..127])
SH( INTEGER)9000 W
13920 16072 MT
(K = UNSIGNED[0..10])
SH( UNSIGNED)6600 W
13920 17103 MT
(U = [0..LAST\050INTEGER\051+1])
SH( UNSIGNED)3600 W
13920 19165 MT
(M = SET OF A;)
SH( M)10200 W
13920 20196 MT
(N = @SIZE 32 M;)
SH( M)9000 W
13920 21227 MT
(O = @SIZE 32 @ALIGN 64 M)
SH( M)3600 W
13920 23289 MT
(X = SET OF A;)
SH( X)10200 W
13920 24320 MT
(Y = @ALIGN 64 X;)
SH( X)8400 W
11520 26937 MT
(A)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
12670 XM
(B)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
15683 XM
(C)SH
11 /Times-Roman AF
16558 XM
(all have basetype)SH
10 /Courier AF
24407 XM
(A)SH
11 /Times-Roman AF
(, as)SH
10 /Courier AF
26748 XM
(B)SH
11 /Times-Roman AF
27623 XM
(and)SH
10 /Courier AF
29486 XM
(C)SH
11 /Times-Roman AF
30361 XM
(are merely subranges of)SH
10 /Courier AF
41171 XM
(A)SH
11 /Times-Roman AF
(.)SH
11520 28988 MT
(The basetype of)SH
10 /Courier AF
18819 XM
(I)SH
11 /Times-Roman AF
19694 XM
(is)SH
10 /Courier AF
20703 XM
(INTEGER)SH
11 /Times-Roman AF
25178 XM
(or)SH
10 /Courier AF
26369 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, because the lower bound is)SH
11520 30365 MT
(non-negative, and the upper bound is not larger than)SH
10 /Courier AF
34796 XM
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
(.)SH
11520 31742 MT
(Whenever we claim a type has more than one basetype, we really mean that)SH
11520 33119 MT
(we'll pick the basetype with the least restrictions in the rules below.  For)SH
11520 34496 MT
(example, if we're trying compare)SH
10 /Courier AF
26484 XM
(I)SH
11 /Times-Roman AF
27359 XM
(to an)SH
10 /Courier AF
29803 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, we can't do it with a)SH
11520 35873 MT
(basetype of)SH
10 /Courier AF
16834 XM
(INTEGER)SH
11 /Times-Roman AF
(, but we can if we view)SH
10 /Courier AF
31540 XM
(I)SH
11 /Times-Roman AF
32415 XM
(as having a basetype of)SH
10 /Courier AF
11520 37250 MT
(UNSIGNED)SH
11 /Times-Roman AF
(.)SH
11520 39178 MT
(The basetype of)SH
10 /Courier AF
18819 XM
(J)SH
11 /Times-Roman AF
19694 XM
(is)SH
10 /Courier AF
20703 XM
(INTEGER)SH
11 /Times-Roman AF
25178 XM
(because its upper bound is not larger than)SH
10 /Courier AF
11520 40555 MT
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
(. The)
275 W( basetype of)SH
10 /Courier AF
27444 XM
(K)SH
11 /Times-Roman AF
28319 XM
(is specified as)SH
10 /Courier AF
34764 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, and the)SH
11520 41932 MT
(basetype of of)SH
10 /Courier AF
18025 XM
(U)SH
11 /Times-Roman AF
18900 XM
(is)SH
10 /Courier AF
19909 XM
(UNSIGNED)SH
11 /Times-Roman AF
24984 XM
(because its upper bound is larger than)SH
10 /Courier AF
11520 43309 MT
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
11520 45237 MT
(M)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
12670 XM
(N)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
15683 XM
(O)SH
11 /Times-Roman AF
16558 XM
(have basetype)SH
10 /Courier AF
23032 XM
(M)SH
11 /Times-Roman AF
23907 XM
(because)SH
10 /Courier AF
27662 XM
(@SIZE)SH
11 /Times-Roman AF
30937 XM
(and)SH
10 /Courier AF
32800 XM
(@ALIGN)SH
11 /Times-Roman AF
36675 XM
(type constructors do)SH
11520 46614 MT
(not change the basetype.)SH
10 /Courier AF
11520 48542 MT
(X)SH
11 /Times-Roman AF
12395 XM
(and)SH
10 /Courier AF
14258 XM
(Y)SH
11 /Times-Roman AF
15133 XM
(have basetype)SH
10 /Courier AF
21607 XM
(X)SH
11 /Times-Roman AF
(, which is a different type from)SH
10 /Courier AF
36135 XM
(M)SH
11 /Times-Roman AF
(.)SH
11520 50470 MT
(Since)SH
10 /Courier AF
14239 XM
(CARDINAL)SH
11 /Times-Roman AF
19314 XM
(is a subrange with a basetype of)SH
10 /Courier AF
33639 XM
(INTEGER | UNSIGNED)SH
11 /Times-Roman AF
(,)SH
11520 51847 MT
(the type)SH
10 /Courier AF
15308 XM
(CARDINAL)SH
11 /Times-Roman AF
20383 XM
(itself never appears in the typechecking rules.)SH
12 SS 
11520 56128 MT
(16.3. Types for Constants)SH
11 SS 
11520 58169 MT
(It makes life simpler to think of constants as having types, just the way)SH
11520 59546 MT
(variables do.)SH
11520 61597 MT
(We're going to consider a constant number without a decimal point to be a)SH
11520 62974 MT
(subrange with the appropriate basetype.  For instance, we'll consider the)SH
11520 64351 MT
(constant)SH
10 /Courier AF
15461 XM
(-5)SH
11 /Times-Roman AF
16936 XM
(to be the subrange of)SH
10 /Courier AF
26435 XM
(INTEGER)SH
14016 66006 MT
([-5..-5])SH
11 /Times-Roman AF
11520 68057 MT
(We'll consider the constant)SH
10 /Courier AF
23860 XM
(42)SH
11 /Times-Roman AF
25335 XM
(to be the subrange of)SH
10 /Courier AF
34834 XM
(INTEGER | UNSIGNED)SH
14016 69712 MT
([42..42])SH
ES
%%Page: 89 90
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Types for Constants)SH
46880 XM
(89)SH
11 /Times-Roman AF
13680 7955 MT
(And we'll consider the constant)SH
10 /Courier AF
27945 XM
(3000000000)SH
11 /Times-Roman AF
34220 XM
(to be the subrange of)SH
10 /Courier AF
13680 9332 MT
(UNSIGNED)SH
16176 10987 MT
([3000000000..3000000000])SH
11 /Times-Roman AF
13680 13038 MT
(We'll consider a constant number with a decimal point to be of type)SH
10 /Courier AF
13680 14415 MT
(REAL | LONGREAL)SH
11 /Times-Roman AF
(.)SH
13680 16343 MT
(For literal strings we'll invent the new type)SH
10 /Courier AF
32988 XM
(STRING)SH
11 /Times-Roman AF
(. We)
275 W( sometimes need to)SH
13680 17720 MT
(distinguish between one-character and multi-character strings.  One-character)SH
13680 19097 MT
(strings can have only one character and are of type)SH
10 /Courier AF
36278 XM
(CHAR | STRING)SH
11 /Times-Roman AF
(.)SH
13680 20474 MT
(Multi-character strings can have any number of characters except one, and)SH
13680 21851 MT
(have type)SH
10 /Courier AF
18200 XM
(STRING)SH
11 /Times-Roman AF
(. A)
275 W( string with zero characters is of type)SH
10 /Courier AF
39973 XM
(STRING)SH
11 /Times-Roman AF
(.)SH
13680 23779 MT
(For)SH
10 /Courier AF
15483 XM
(NIL)SH
11 /Times-Roman AF
17558 XM
(we invent a type that we'll call)SH
10 /Courier AF
31395 XM
(VOID)SH
11 /Times-Roman AF
(.)SH
13680 25707 MT
(Enumeration constants have the enumeration type.  So for instance)SH
10 /Courier AF
43341 XM
(TRUE)SH
11 /Times-Roman AF
46016 XM
(and)SH
10 /Courier AF
13680 27084 MT
(FALSE)SH
11 /Times-Roman AF
16955 XM
(have type)SH
10 /Courier AF
21475 XM
(BOOLEAN)SH
11 /Times-Roman AF
(.)SH
13680 29012 MT
(The type of a declared constant is the type of the constant expression on the)SH
13680 30389 MT
(right-hand side of the declaration.)SH
13680 32317 MT
(\050These constant types are what we need to understand type-checking and)SH
13680 33694 MT
(may have nothing to do with the way the compiler actually implements)SH
13680 35071 MT
(constants.\051)SH
12 SS 
13680 39352 MT
(16.4. Kinds of Types)SH
11 SS 
13680 41393 MT
(Here are the kinds of all the types, supplied and constructed, plus all the)SH
13680 42770 MT
(``types'' we've supplied for the constants, plus)SH
10 /Courier AF
34634 XM
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
13680 44147 MT
(SYSTEM.WORD)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
22693 XM
(SYSTEM.BYTE)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
23280 45802 MT
(numeric non-numeric)11400 W
13680 46833 MT
(--------------------------------------------------------------)SH
13680 47864 MT
(ordinal INTEGER)
4800 W( BOOLEAN)7800 W
23280 48895 MT
(CARDINAL CHAR)7200 W
23280 49926 MT
(UNSIGNED enumeration)7200 W
23280 50957 MT
(numeric subrange)
SH( non-numeric)
2400 W( subrange)SH
23280 51988 MT
(SYSTEM.ADDRESS)SH
13680 54050 MT
(non-ordinal REAL)
2400 W( BITSET)9600 W
23280 55081 MT
(LONGREAL PROC)7200 W
35880 56112 MT
(fixed-size array)SH
35880 57143 MT
(open array)SH
35880 58174 MT
(dynamic array)SH
35880 59205 MT
(subarray)SH
35880 60236 MT
(record)SH
35880 61267 MT
(set)SH
35880 62298 MT
(pointer)SH
35880 63329 MT
(procedure)SH
35880 64360 MT
(STRING)SH
35880 65391 MT
(VOID)SH
35880 66422 MT
(SYSTEM.WORD)SH
35880 67453 MT
(SYSTEM.BYTE)SH
ES
%%Page: 90 91
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(90)SH
39164 XM
(Type-Checking)SH
12 /Times-Roman AF
11520 8023 MT
(16.5. Type-Checking Expressions)SH
11 SS 
11520 10064 MT
(At the bottom of an expression there are variables and constants.)SH
11520 11441 MT
(Expressions have types that depend on the types of their operands.  For)SH
11520 12818 MT
(example)SH
10 /Courier AF
15521 XM
(x + y)SH
11 /Times-Roman AF
18796 XM
(has a type, which depends on the types of)SH
10 /Courier AF
37368 XM
(x)SH
11 /Times-Roman AF
38243 XM
(and)SH
10 /Courier AF
40106 XM
(y)SH
11 /Times-Roman AF
(.)SH
11520 14195 MT
(Variables are declared to have types.  And now you see the good of giving)SH
11520 15572 MT
(those fake ``types'' to constants too, so that when an expression mixes)SH
11520 16949 MT
(constants with variables we can talk about the types of the operands.  This)SH
11520 18326 MT
(section is about the various operators, the rules for what types they accept,)SH
11520 19703 MT
(and the types of the results they return.)SH
12 SS 
11520 22898 MT
(16.5.1. Compatibility)SH
11 SS 
11520 24939 MT
(OK, now we're going to gather a whole lot of stuff together so that we can)SH
11520 26316 MT
(use the notion of compatibility over and over.  Compatibility is symmetric: if)SH
10 /Courier AF
11520 27693 MT
(X)SH
11 /Times-Roman AF
12395 XM
(is compatible with)SH
10 /Courier AF
20798 XM
(Y)SH
11 /Times-Roman AF
(, then)SH
10 /Courier AF
24117 XM
(Y)SH
11 /Times-Roman AF
24992 XM
(is compatible with)SH
10 /Courier AF
33395 XM
(X)SH
11 /Times-Roman AF
(. Compatibility)
275 W( is not)SH
11520 29070 MT
(transitive: if)SH
10 /Courier AF
17142 XM
(X)SH
11 /Times-Roman AF
18017 XM
(is compatible with)SH
10 /Courier AF
26420 XM
(Y)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
29433 XM
(Y)SH
11 /Times-Roman AF
30308 XM
(is compatible with)SH
10 /Courier AF
38711 XM
(Z)SH
11 /Times-Roman AF
(, then)SH
10 /Courier AF
42030 XM
(X)SH
11 /Times-Roman AF
42905 XM
(may)SH
11520 30447 MT
(or may not be compatible with)SH
10 /Courier AF
25268 XM
(Z)SH
11 /Times-Roman AF
(.)SH
11520 32375 MT
(If two expressions are of the same type, they're compatible.  \050This rule)SH
11520 33752 MT
(covers compatibility of floating point constants with both)SH
10 /Courier AF
37064 XM
(REAL)SH
11 /Times-Roman AF
39739 XM
(and)SH
10 /Courier AF
11520 35129 MT
(LONGREAL)SH
11 /Times-Roman AF
(, and of one-character string constants with)SH
10 /Courier AF
35562 XM
(CHAR)SH
11 /Times-Roman AF
(.\051)SH
11520 37057 MT
(If two expressions are of the same basetype, they're compatible.  \050This rule)SH
11520 38434 MT
(covers compatibility of small non-negative subranges with both)SH
10 /Courier AF
39810 XM
(INTEGER)SH
11 /Times-Roman AF
11520 39811 MT
(and)SH
10 /Courier AF
13383 XM
(UNSIGNED)SH
11 /Times-Roman AF
(.\051)SH
11520 41739 MT
(And there are a few other compatible types:)SH
6 /Symbol AF
13719 43690 MT
(\267)SH
10 /Courier AF
14270 XM
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
22945 XM
(is compatible with)SH
10 /Courier AF
31348 XM
(INTEGER)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
36098 XM
(UNSIGNED)SH
11 /Times-Roman AF
(,)SH
14270 45067 MT
(and all pointer types.)SH
6 /Symbol AF
13719 46995 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(A)SH
10 /Courier AF
15339 XM
(STRING)SH
11 /Times-Roman AF
19214 XM
(constant \050which includes one-character strings\051 is)SH
14270 48372 MT
(compatible with fixed-size and open arrays of)SH
10 /Courier AF
34703 XM
(CHAR)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
13719 50300 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Procedure types are compatible if they ``match'':  They must)SH
14270 51677 MT
(have the same number of formal parameters.  If there are)SH
14270 53054 MT
(parameters, corresponding parameters must either be of the same)SH
14270 54431 MT
(type or be open arrays of the same element type; parameters)SH
14270 55808 MT
(need not have the same names.  If there are results, the result)SH
14270 57185 MT
(types must be the same.)SH
6 /Symbol AF
13719 59113 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(The)SH
10 /Courier AF
16255 XM
(VOID)SH
11 /Times-Roman AF
18930 XM
(type, whose only representative is)SH
10 /Courier AF
34142 XM
(NIL)SH
11 /Times-Roman AF
(, is compatible)SH
14270 60490 MT
(with)SH
10 /Courier AF
16501 XM
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
(, any pointer type, and any procedure)SH
14270 61867 MT
(type.)SH
ES
%%Page: 91 92
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Type-Checking Expressions)SH
46880 XM
(91)SH
11 /Times-Roman AF
13680 7955 MT
(Laid out longways, the things that are compatible even though they don't)SH
13680 9332 MT
(have the same basetype are:)SH
10 /Courier AF
13680 10987 MT
(fixed-size array of CHAR)
SH( STRING)7200 W
13680 12018 MT
(INTEGER SYSTEM.ADDRESS)17400 W
13680 13049 MT
(pointer SYSTEM.ADDRESS,)
17400 W( VOID)SH
13680 14080 MT
(procedure matching)
16200 W( procedure, VOID)SH
13680 15111 MT
(STRING fixed-size)
18000 W( array of CHAR)SH
13680 16142 MT
(SYSTEM.ADDRESS INTEGER,)
13200 W( UNSIGNED, pointer, VOID)SH
13680 17173 MT
(UNSIGNED SYSTEM.ADDRESS)16800 W
13680 18204 MT
(VOID pointer,)
19200 W( procedure, SYSTEM.ADDRESS)SH
12 /Times-Roman AF
13680 21399 MT
(16.5.2. Relations)SH
11 SS 
13680 23450 MT
(The operators in the expressions:)SH
10 /Courier AF
16176 25105 MT
(x = y)SH
16176 26136 MT
(x # y)SH
11 /Times-Roman AF
13680 27922 MT
(both apply unless either)SH
10 /Courier AF
24434 XM
(x)SH
11 /Times-Roman AF
25309 XM
(or)SH
10 /Courier AF
26500 XM
(y)SH
11 /Times-Roman AF
27375 XM
(is)SH
16700 29873 MT
(a non-)SH
10 /Courier AF
(CHAR)SH
11 /Times-Roman AF
22154 XM
(fixed-size array)SH
16700 31069 MT
(an open array)SH
16700 32265 MT
(a subarray)SH
16700 33461 MT
(a record)SH
9 SS 
30538 35075 MT
(1)SH
11 SS 
13680 35438 MT
(and type-check if they are compatible.)SH
13680 37489 MT
(The operators in the expressions:)SH
10 /Courier AF
16176 39144 MT
(x < y)SH
16176 40175 MT
(x <= y)SH
16176 41206 MT
(x > y)SH
16176 42237 MT
(x >= y)SH
11 /Times-Roman AF
13680 44023 MT
(all apply if)SH
10 /Courier AF
18721 XM
(x)SH
11 /Times-Roman AF
19596 XM
(and)SH
10 /Courier AF
21459 XM
(y)SH
11 /Times-Roman AF
22334 XM
(are either ordinal or numeric expressions and type-check)SH
13680 45400 MT
(if they are compatible.  They also apply if)SH
10 /Courier AF
32374 XM
(x)SH
11 /Times-Roman AF
33249 XM
(and)SH
10 /Courier AF
35112 XM
(y)SH
11 /Times-Roman AF
35987 XM
(are strings and type-check)SH
13680 46777 MT
(if they are compatible.)SH
13680 48828 MT
(The operators in the expressions:)SH
10 /Courier AF
16176 50483 MT
(s <= t)SH
16176 51514 MT
(s >= t)SH
11 /Times-Roman AF
13680 53300 MT
(both apply if)SH
10 /Courier AF
19577 XM
(s)SH
11 /Times-Roman AF
20452 XM
(and)SH
10 /Courier AF
22315 XM
(t)SH
11 /Times-Roman AF
23190 XM
(are sets and type-check if they have the same basetype.)SH
10 /Courier AF
16176 54955 MT
(e IN s)SH
11 /Times-Roman AF
13680 56741 MT
(applies if)SH
10 /Courier AF
18018 XM
(s)SH
11 /Times-Roman AF
18893 XM
(is a set and)SH
10 /Courier AF
24025 XM
(e)SH
11 /Times-Roman AF
24900 XM
(is an ordinal expression, and it type-checks if)SH
10 /Courier AF
45091 XM
(e)SH
11 /Times-Roman AF
45966 XM
(is)SH
13680 58118 MT
(compatible with the element type of)SH
10 /Courier AF
29810 XM
(s)SH
11 /Times-Roman AF
(.)SH
13680 60169 MT
(The operators are overloaded-)SH
26801 XM
(-)SH
27067 XM
(-they mean different things for different kinds)SH
13680 61546 MT
(of operands.  See Chapter 8, page 43, for semantics.)SH
13680 63474 MT
(All relational operators return a)SH
10 /Courier AF
27821 XM
(BOOLEAN)SH
11 /Times-Roman AF
32296 XM
(value.)SH
10800 50 13680 68976 UL
7 SS 
14580 70477 MT
(1)SH
10 SS 
14930 70804 MT
(The compiler will let you use)SH
9 /Courier AF
26929 XM
(=)SH
10 /Times-Roman AF
27719 XM
(and)SH
9 /Courier AF
29413 XM
(#)SH
10 /Times-Roman AF
30203 XM
(on procedure variables of two different)SH
13680 72000 MT
(\050albeit matching\051 types; that's a design error.)SH
ES
%%Page: 92 93
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(92)SH
39164 XM
(Type-Checking)SH
12 /Times-Roman AF
11520 8023 MT
(16.5.3. Arithmetic and Set Operations)SH
11 SS 
11520 10074 MT
(The operators in the expressions:)SH
10 /Courier AF
14016 11729 MT
(x + y)SH
14016 12760 MT
(x - y)SH
14016 13791 MT
(x * y)SH
14016 14822 MT
(x DIV y)SH
14016 15853 MT
(x MOD y)SH
11 /Times-Roman AF
11520 17639 MT
(all apply if)SH
10 /Courier AF
16561 XM
(x)SH
11 /Times-Roman AF
17436 XM
(and)SH
10 /Courier AF
19299 XM
(y)SH
11 /Times-Roman AF
20174 XM
(are ordinal numeric types \050)SH
10 /Courier AF
(INTEGER)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
36774 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
11520 19016 MT
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
(\051 and type-check if they are compatible.)SH
11520 21067 MT
(The rules for what they return are as follows:)SH
6 /Symbol AF
13719 23018 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(If the basetype of either operand is)SH
10 /Courier AF
29815 XM
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
(, the result)SH
14270 24395 MT
(is a)SH
10 /Courier AF
16042 XM
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
13719 26323 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Else if the basetype of either operand is)SH
10 /Courier AF
31924 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, the result is)SH
14270 27700 MT
(an)SH
10 /Courier AF
15583 XM
(UNSIGNED)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
13719 29628 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Else if the basetype of either operand is)SH
10 /Courier AF
31924 XM
(INTEGER)SH
11 /Times-Roman AF
(, the result is)SH
14270 31005 MT
(an)SH
10 /Courier AF
15583 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
13719 32933 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Otherwise the basetype of both operands is)SH
10 /Courier AF
14270 34310 MT
(INTEGER | UNSIGNED)SH
11 /Times-Roman AF
(, and the result is an)SH
10 /Courier AF
14270 35687 MT
(INTEGER | UNSIGNED)SH
11 /Times-Roman AF
(.)SH
11520 37738 MT
(The operators in the expressions:)SH
10 /Courier AF
14016 39393 MT
(x + y)SH
14016 40424 MT
(x - y)SH
14016 41455 MT
(x * y)SH
14016 42486 MT
(x / y)SH
11 /Times-Roman AF
11520 44272 MT
(all apply if)SH
10 /Courier AF
16561 XM
(x)SH
11 /Times-Roman AF
17436 XM
(and)SH
10 /Courier AF
19299 XM
(y)SH
11 /Times-Roman AF
20174 XM
(are non-ordinal numeric types \050)SH
10 /Courier AF
(REAL)SH
11 /Times-Roman AF
36715 XM
(and)SH
10 /Courier AF
38578 XM
(LONGREAL)SH
11 /Times-Roman AF
(\051 and)SH
11520 45649 MT
(type-check if they are compatible.)SH
11520 47700 MT
(The rules for what they return are as follows:)SH
6 /Symbol AF
13719 49651 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(If the basetype of either operand is a)SH
10 /Courier AF
30578 XM
(REAL)SH
11 /Times-Roman AF
(, the result is a)SH
10 /Courier AF
39638 XM
(REAL)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
13719 51579 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(If the basetype of either operand is a)SH
10 /Courier AF
30578 XM
(LONGREAL)SH
11 /Times-Roman AF
(, the result is a)SH
10 /Courier AF
14270 52956 MT
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
13719 54884 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Otherwise the operands are both)SH
10 /Courier AF
28777 XM
(REAL | LONGREAL)SH
11 /Times-Roman AF
(, and the)SH
14270 56261 MT
(result is)SH
10 /Courier AF
17998 XM
(REAL | LONGREAL)SH
11 /Times-Roman AF
(.)SH
11520 58312 MT
(The operators in the expressions:)SH
10 /Courier AF
14016 59967 MT
(x + y)SH
14016 60998 MT
(x - y)SH
14016 62029 MT
(x * y)SH
14016 63060 MT
(x / y)SH
11 /Times-Roman AF
11520 64846 MT
(all apply if)SH
10 /Courier AF
16561 XM
(x)SH
11 /Times-Roman AF
17436 XM
(and)SH
10 /Courier AF
19299 XM
(y)SH
11 /Times-Roman AF
20174 XM
(are sets and type-check if they have the same basetype.)SH
11520 66897 MT
(The rule for what they return is:)SH
6 /Symbol AF
13719 68848 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(The result is the same basetype as the operands.)SH
11520 70899 MT
(See Chapter 8, page 43 for semantics of operators.)SH
ES
%%Page: 93 94
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Type-Checking Expressions)SH
46880 XM
(93)SH
12 /Times-Roman AF
13680 8023 MT
(16.6. Type-Checking Assignments)SH
11 SS 
13680 10074 MT
(Assignable is nearly like compatible, with the following exceptions:)SH
6 /Symbol AF
15879 12025 MT
(\267)SH
10 /Courier AF
16430 XM
(INTEGER)SH
11 /Times-Roman AF
20905 XM
(and)SH
10 /Courier AF
22768 XM
(UNSIGNED)SH
11 /Times-Roman AF
27843 XM
(are not compatible, but you can assign)SH
16430 13402 MT
(an)SH
10 /Courier AF
17743 XM
(INTEGER)SH
11 /Times-Roman AF
22218 XM
(to an)SH
10 /Courier AF
24662 XM
(UNSIGNED)SH
11 /Times-Roman AF
29737 XM
(and vice versa.  If the standard)SH
16430 14779 MT
(Modula flag ``)SH
10 /Courier AF
(-s)SH
11 /Times-Roman AF
('' and the runtime checking flag ``)SH
10 /Courier AF
(-C)SH
11 /Times-Roman AF
('' are)SH
16430 16156 MT
(used, the assignment range-checks; otherwise the assignment)SH
16430 17533 MT
(just copies the bits across with no checking.)SH
6 /Symbol AF
15879 19461 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(You can assign a constant string to an open array of)SH
10 /Courier AF
39491 XM
(CHAR)SH
11 /Times-Roman AF
(, and)SH
16430 20838 MT
(hence to a dereferenced dynamic array of)SH
10 /Courier AF
34901 XM
(CHAR)SH
11 /Times-Roman AF
(.)SH
6 /Symbol AF
15879 22766 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(The left-hand side can't be a constant.)SH
13680 24817 MT
(Laid out longways, the things that typecheck for assignment even though)SH
13680 26194 MT
(they don't have the same basetype are:)SH
10 /Courier AF
13680 27849 MT
(left-hand side)
SH( right-hand)
13200 W( side)SH
13680 28880 MT
(--------------------------------------------------------------------)SH
13680 29911 MT
(fixed-size array of CHAR)
SH( STRING)7200 W
13680 30942 MT
(INTEGER SYSTEM.ADDRESS)17400 W
13680 31973 MT
(INTEGER UNSIGNED)17400 W
13680 33004 MT
(open array of CHAR)
SH( STRING)10800 W
13680 34035 MT
(pointer SYSTEM.ADDRESS)17400 W
13680 35066 MT
(pointer VOID)17400 W
13680 36097 MT
(procedure matching)
16200 W( procedure)SH
13680 37128 MT
(procedure VOID)16200 W
13680 38159 MT
(SYSTEM.ADDRESS any)
13200 W( pointer)SH
13680 39190 MT
(SYSTEM.ADDRESS INTEGER)13200 W
13680 40221 MT
(SYSTEM.ADDRESS UNSIGNED)13200 W
13680 41252 MT
(SYSTEM.ADDRESS VOID)13200 W
13680 42283 MT
(UNSIGNED INTEGER)16800 W
13680 43314 MT
(UNSIGNED SYSTEM.ADDRESS)16800 W
11 /Times-Roman AF
13680 45931 MT
(For the semantics of assignment see Chapter 10, page 51.  See Section 5.12,)SH
13680 47308 MT
(page 37, for special restrictions on assigning procedure variables.)SH
12 SS 
13680 51589 MT
(16.7. Type-Checking Procedure Call)SH
11 SS 
13680 53630 MT
(Passable by value or by)SH
10 /Courier AF
24341 XM
(CONST)SH
11 /Times-Roman AF
27616 XM
(is very different from passable by)SH
10 /Courier AF
42704 XM
(VAR)SH
11 /Times-Roman AF
(.)SH
13680 55558 MT
(Let's first do passable by value and by)SH
10 /Courier AF
30908 XM
(CONST)SH
11 /Times-Roman AF
(. Here)
275 W( are the things you can)SH
13680 56935 MT
(pass by value or)SH
10 /Courier AF
21072 XM
(CONST)SH
11 /Times-Roman AF
24347 XM
(even if the actual and the formal have different)SH
13680 58312 MT
(basetypes. First)
275 W( you get everything from assignable, except that)SH
10 /Courier AF
42212 XM
(INTEGER)SH
11 /Times-Roman AF
13680 59689 MT
(and)SH
10 /Courier AF
15543 XM
(UNSIGNED)SH
11 /Times-Roman AF
20618 XM
(cannot be passed to)SH
10 /Courier AF
29476 XM
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
(. Then)
275 W( you get a)SH
13680 61066 MT
(bunch of additional stuff:)SH
ES
%%Page: 94 95
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(94)SH
39164 XM
(Type-Checking)SH
/Courier SF
11520 7824 MT
(formal actual)18000 W
11520 8855 MT
(-------------------------------------------------------------)SH
11520 9886 MT
(fixed-size array of CHAR)
SH( STRING)7200 W
11520 10917 MT
(INTEGER UNSIGNED)17400 W
11520 11948 MT
(INTEGER SYSTEM.ADDRESS)17400 W
11520 12979 MT
(open array of CHAR)
SH( STRING)10800 W
11520 14010 MT
(open array of SYSTEM.BYTE)
SH( anything)
6600 W( with size divisible by 8)SH
11520 15041 MT
(open array of SYSTEM.WORD)
SH( anything)
6600 W( with size divisible by 32)SH
11520 16072 MT
(open array of T)
SH( open)
12600 W( array of T)SH
11520 17103 MT
(open array of T)
SH( fixed-size)
12600 W( array of T)SH
11520 18134 MT
(pointer SYSTEM.ADDRESS)17400 W
11520 19165 MT
(pointer VOID)17400 W
11520 20196 MT
(SYSTEM.ADDRESS pointer)13200 W
11520 21227 MT
(SYSTEM.ADDRESS VOID)13200 W
11520 22258 MT
(SYSTEM.BYTE anything)
15000 W( with size of 8 bits)SH
11520 23289 MT
(SYSTEM.WORD anything)
15000 W( with size of 32 bits)SH
11520 24320 MT
(procedure matching)
16200 W( procedure)SH
11520 25351 MT
(procedure VOID)16200 W
11520 26382 MT
(UNSIGNED INTEGER)16800 W
11520 27413 MT
(UNSIGNED SYSTEM.ADDRESS)16800 W
11 /Times-Roman AF
11520 30030 MT
(And now let's do passable by)SH
10 /Courier AF
24778 XM
(VAR)SH
11 /Times-Roman AF
(. Here)
275 W( are the only things you can pass by)SH
10 /Courier AF
11520 31407 MT
(VAR)SH
11 /Times-Roman AF
13595 XM
(if the actual and the formal have different types-)SH
34751 XM
(-)SH
35017 XM
(-not different basetypes,)SH
11520 32784 MT
(different types:)SH
10 /Courier AF
11520 34439 MT
(formal actual)18000 W
11520 35470 MT
(-------------------------------------------------------------)SH
11520 36501 MT
(open array of SYSTEM.BYTE)
SH( anything)
6600 W( with size divisible by 8)SH
11520 37532 MT
(open array of SYSTEM.WORD)
SH( anything)
6600 W( with size divisible by 32)SH
11520 38563 MT
(open array of T)
SH( open)
12600 W( array of T)SH
11520 39594 MT
(open array of T)
SH( fixed-size)
12600 W( array of T)SH
11520 40625 MT
(pointer SYSTEM.ADDRESS)17400 W
11520 41656 MT
(SYSTEM.ADDRESS pointer)13200 W
11520 42687 MT
(SYSTEM.BYTE anything)
15000 W( with size of 8 bits)SH
11520 43718 MT
(SYSTEM.WORD anything)
15000 W( with size of 32 bits)SH
ES
%%Page: 95 96
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(95)SH
14 /Times-Roman AF
22748 11760 MT
(17. Conditional Compilation)SH
11 SS 
13680 15249 MT
(The WRL Modula-2 compiler supports conditional compilation similar to)SH
13680 16626 MT
(that available in the C preprocessor.  The syntax of conditional compilation)SH
13680 18003 MT
(directives closely mirrors that of Modula-2 itself:)SH
10 /Courier AF
16176 19658 MT
(ProgramArgument =)
600 W( "-D"Ident"="ConstExpr)SH
16176 21720 MT
(Directive =)
4200 W( "$" IF ConstExpr THEN ProgramText)SH
26976 22751 MT
({"$" ELSIF ConstExpr THEN ProgramText})SH
26976 23782 MT
(["$" ELSE ProgramText])SH
27576 24813 MT
("$" END [";"])SH
26376 25844 MT
(| "$" CONST Identifier "=" ConstExpr [";"])SH
16176 27906 MT
(ConstExpr =)
4200 W( SimpleConstExpr [Relation SimpleConstExpr])SH
16176 28937 MT
(Relation =)
4800 W( "=" | "#" | "<>" | "<" | "<=" | ">" | ">=" | IN)SH
16176 29968 MT
(SimpleConstExpr =)
600 W( ["+" | "-"] ConstTerm {AddOperator ConstTerm})SH
16176 30999 MT
(AddOperator =)
3000 W( "+" | "-" | OR)SH
16176 32030 MT
(ConstTerm =)
4200 W( ConstFactor {MultiplyOperator ConstFactor})SH
16176 33061 MT
(MultiplyOperator = "*" | DIV | MOD | AND | "&")SH
16176 34092 MT
(ConstFactor =)
3000 W( Identifier | Number | String | Set | NOT ConstFactor)SH
26376 35123 MT
(| "~" ConstFactor | "\050" ConstExpr "\051")SH
16176 37185 MT
(Set =)
7800 W( "{" SetRange {"," SetRange} "}")SH
16176 38216 MT
(SetRange =)
4800 W( Number [".." Number])SH
16176 39247 MT
(Number =)
6000 W( digit {digit})SH
16176 40278 MT
(digit =)
6600 W( "0".."9")SH
16176 41309 MT
(String =)
6000 W( "'" {character} "'")SH
26376 42340 MT
(| '"' {character} '"')SH
16176 43371 MT
(Identifier =)
3600 W( letter{letter | digit})SH
16176 44402 MT
(letter =)
6000 W( "A".."Z" | "a".."z")SH
12 /Times-Roman AF
13680 48683 MT
(17.1. Vocabulary)SH
11 SS 
13680 50724 MT
(Conditional compilation directives are set off from normal program text by a)SH
13680 52101 MT
(``)SH
10 /Courier AF
($)SH
11 /Times-Roman AF
('' character as the first non-blank character in a line.  Compiler directives)SH
13680 53478 MT
(and the predefined identifiers)SH
10 /Courier AF
26874 XM
(TRUE)SH
11 /Times-Roman AF
29549 XM
(and)SH
10 /Courier AF
31412 XM
(FALSE)SH
11 /Times-Roman AF
34687 XM
(are case-insensitive.  All)SH
13680 54855 MT
(user-defined identifiers are case-sensitive.  \050If you use the compiler's ``)SH
10 /Courier AF
(-s)SH
11 /Times-Roman AF
('')SH
13680 56232 MT
(or ``)SH
10 /Courier AF
(-sk)SH
11 /Times-Roman AF
('' options, then directives,)SH
10 /Courier AF
29195 XM
(TRUE)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
34008 XM
(FALSE)SH
11 /Times-Roman AF
37283 XM
(must be all upper-case.\051)SH
12 SS 
13680 60513 MT
(17.2. Constant Definitions)SH
11 SS 
13680 62554 MT
(There are two ways to define an identifier: with a)SH
10 /Courier AF
35670 XM
($CONST)SH
11 /Times-Roman AF
39545 XM
(directive in the)SH
13680 63931 MT
(program text, or with the ``)SH
10 /Courier AF
(-D)SH
11 /Times-Roman AF
('' compiler flag when you invoke the compiler.)SH
13680 65308 MT
(If you use ``)SH
10 /Courier AF
(-D)SH
11 /Times-Roman AF
('', you must directly append the identifier, equal sign, and)SH
13680 66685 MT
(constant value with no intervening spaces.  Constants passed in from the)SH
13680 68062 MT
(command line override those defined in)SH
10 /Courier AF
31458 XM
($CONST)SH
11 /Times-Roman AF
35333 XM
(definitions.)SH
13680 69990 MT
(The compiler processes all)SH
10 /Courier AF
25714 XM
($CONST)SH
11 /Times-Roman AF
29589 XM
(declarations, even in sections of program)SH
13680 71367 MT
(text being skipped due to an)SH
10 /Courier AF
26328 XM
($IF)SH
11 /Times-Roman AF
28403 XM
(directive.)SH
ES
%%Page: 96 97
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(96)SH
35079 XM
(Conditional Compilation)SH
12 /Times-Roman AF
11520 8023 MT
(17.3. Constant Expressions)SH
11 SS 
11520 10064 MT
(The arithmetic operators:)SH
10 /Courier AF
14016 11719 MT
(+ - * DIV MOD)600 W
11 /Times-Roman AF
11520 13505 MT
(apply only to numbers.)SH
11520 15433 MT
(The logical operators:)SH
10 /Courier AF
14016 17088 MT
(AND & OR NOT ~)600 W
11 /Times-Roman AF
11520 18874 MT
(apply only to Booleans.)SH
11520 20802 MT
(The relational operators:)SH
10 /Courier AF
14016 22457 MT
(= # <> < <= > >=)600 W
11 /Times-Roman AF
11520 24243 MT
(apply to numbers, Booleans, strings, and sets.)SH
11520 26171 MT
(The relational operator)SH
10 /Courier AF
21873 XM
(IN)SH
11 /Times-Roman AF
23348 XM
(tests membership of an element in a set.)SH
12 SS 
11520 30452 MT
(17.4. Practical Notes)SH
11 SS 
11520 32493 MT
(If you use RCS, you may have an RCS)SH
10 /Courier AF
28936 XM
($Header)SH
11 /Times-Roman AF
33411 XM
(declaration in a multi-line)SH
11520 33870 MT
(comment, where the ``)SH
10 /Courier AF
($)SH
11 /Times-Roman AF
('' is the first character in the line:)SH
10 /Courier AF
14016 35525 MT
(\050*************************************************************)SH
14616 36556 MT
(Copyright \050c\051 1990 by Digital Equipment Corp.)SH
14616 37587 MT
(...)SH
14616 38618 MT
($Header: imc.mod,v 1.9 89/09/15 14:33:25 joel Experimental $)SH
14616 39649 MT
(*************************************************************\051)SH
11 /Times-Roman AF
11520 41577 MT
(The compiler will interpret the)SH
10 /Courier AF
25297 XM
($Header)SH
11 /Times-Roman AF
29772 XM
(as a conditional compilation)SH
11520 42954 MT
(directive, and complain about the line.  Since the RCS programs will find the)SH
11520 44331 MT
(header declaration anywhere in a line, you can put another character in front)SH
11520 45708 MT
(of the ``)SH
10 /Courier AF
($)SH
11 /Times-Roman AF
('' to prevent this interpretation:)SH
10 /Courier AF
14016 47363 MT
(\050***************************************************************)SH
14616 48394 MT
(* Copyright \050c\051 1990 by Digital Equipment Corp.)SH
14616 49425 MT
(* ...)600 W
14616 50456 MT
(* $Header:)
600 W( imc.mod,v 1.9 89/09/15 14:33:25 joel Experimental $)SH
14616 51487 MT
(***************************************************************\051)SH
11 /Times-Roman AF
11520 53415 MT
(The compiler sources make use of conditional compilation to create either a)SH
11520 54792 MT
(Modula-2 compiler or a Pascal compiler.  Here's a sample:)SH
10 /Courier AF
14016 56447 MT
($if modula2 then)SH
16416 57478 MT
(ExprError\050p1, 'ABS\050x\051: x must be INTEGER, REAL, or LONGREAL'\051;)SH
14016 58509 MT
($else \050* pascal *\051)SH
16416 59540 MT
(ExprError\050p1, 'abs\050x\051: x must be integer or real'\051;)SH
14016 60571 MT
($end)SH
11 /Times-Roman AF
11520 62499 MT
(The makefile defines the conditional compilation identifiers)SH
10 /Courier AF
38189 XM
(pascal)SH
11 /Times-Roman AF
42064 XM
(and)SH
10 /Courier AF
11520 63876 MT
(modula2)SH
11 /Times-Roman AF
15995 XM
(like:)SH
10 /Courier AF
14016 65531 MT
(mod -c -C -O -Dpascal=FALSE -Dmodula2=TRUE CheckBuiltin.mod)SH
11 SS 
11520 67459 MT
([[)SH
/Times-Roman SF
13500 XM
(There is no equivalent to)SH
10 /Courier AF
24711 XM
(#if defined\050ident\051)SH
11 /Times-Roman AF
(, but there should be.)SH
11520 68836 MT
(There is no way to plug the value of a conditional compilation identifier into)SH
11520 70213 MT
(the program text itself.)SH
/Courier SF
22200 XM
(]])SH
ES
%%Page: 97 98
BS
0 SI
10 /Times-Bold AF
46880 4270 MT
(97)SH
14 /Times-Roman AF
23643 11760 MT
(18. Representation Issues)SH
11 SS 
13680 15249 MT
(Reasons to be interested in representation:)SH
6 /Symbol AF
15879 17200 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(The innocent reason: You'd like to understand roughly how)SH
16430 18577 MT
(much storage your program is going to require.)SH
6 /Symbol AF
15879 20505 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(The reason of the Tree of the Knowledge of Good and Evil: You)SH
16430 21882 MT
(have to deal with some real thing that isn't under your control,)SH
16430 23259 MT
(like a device register or a packet format defined by some)SH
16430 24636 MT
(protocol.)SH
6 /Symbol AF
15879 26564 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(The squeezing-it-out reason: You have something you're going)SH
16430 27941 MT
(to optimize to the hilt.  You therefore design a representation)SH
16430 29318 MT
(that will allow the most important operations to go as fast as)SH
16430 30695 MT
(possible, or will minimize the space occupied by the oinkiest)SH
16430 32072 MT
(data structure.  This representation won't always be the one the)SH
16430 33449 MT
(compiler would choose by default; when it's not, you have to tell)SH
16430 34826 MT
(the compiler what to do instead.)SH
6 /Symbol AF
15879 36754 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(The world-is-unenlightened reason: You must interface to an)SH
16430 38131 MT
(inferior programming language like ``C''.  In this case you)SH
16430 39508 MT
(should also read Chapter 19, page 109.)SH
12 SS 
13680 43789 MT
(18.1. The Underlying Machine Architectures)SH
11 SS 
13680 45830 MT
(The VAX, Titan, and MIPS have some support for other data sizes, but all)SH
13680 47207 MT
(are fundamentally 32-bit machines.  This is often reflected in the default)SH
13680 48584 MT
(sizes and alignments that types get.  The Titan has poor support for byte)SH
13680 49961 MT
(addressing, so it sometimes uses 32-bit representations where the VAX and)SH
13680 51338 MT
(MIPS use 8-bit representations.)SH
13680 53266 MT
(Bits in a word are numbered from 0 \050least significant\051 to 31 \050most)SH
13680 54643 MT
(significant\051. Bytes)
275 W( in a word are 0 \050least significant\051 to 3 \050most significant\051.)SH
10 /Courier AF
28680 56298 MT
(Most Significant ... Least Significant)SH
14880 57329 MT
(Words 1|)
11400 W( 0|)17400 W
14880 58360 MT
(Bytes 4|)
11400 W( 3|)
2400 W( 2| 1|)
3000 W( 0|)3600 W
14880 59391 MT
(Bits 32|)
11400 W( 24|)
1800 W( 16|)
2400 W( 8|)
3000 W( 0|)3600 W
11 /Times-Roman AF
13680 62008 MT
(Physical addresses are byte addresses-)SH
30438 XM
(-)SH
30704 XM
(-incrementing an address by one)SH
13680 63385 MT
(causes it to point to the next byte in memory.)SH
ES
%%Page: 98 99
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(98)SH
36415 XM
(Representation Issues)SH
12 /Times-Roman AF
11520 8023 MT
(18.2. Data Representation)SH
11 SS 
11520 10064 MT
(Each supplied and constructed type has a default size and alignment.)SH
11520 11441 MT
(\050Section 18.3, page 104 describes how to control the size and alignment of)SH
11520 12818 MT
(types.\051)SH
11520 14746 MT
(The size is the number of bits allocated to store values of that type.  The size)SH
11520 16123 MT
(given a type is often larger than the minimum needed: in general, 32-bit)SH
11520 17500 MT
(operations are faster than 8-bit operations, which are faster than 1-bit)SH
11520 18877 MT
(operations.)SH
11520 20805 MT
(On the Titan a type may have two sizes: one for allocation to a record field or)SH
11520 22182 MT
(variable, and another \050smaller\051 one for allocation to an array.  For example,)SH
11520 23559 MT
(the normal size for type)SH
10 /Courier AF
22241 XM
(CHAR)SH
11 /Times-Roman AF
24916 XM
(is 32 bits, but is only 8 bits when)SH
10 /Courier AF
39708 XM
(CHAR)SH
11 /Times-Roman AF
42383 XM
(is the)SH
11520 24936 MT
(element type of an array.)SH
11520 26864 MT
(The alignment is the bit boundary on which a type must be allocated.  An)SH
11520 28241 MT
(alignment of 1 means any bit is okay, an alignment of 8 means byte)SH
11520 29618 MT
(alignment, and an alignment of 32 means word alignment.  All default)SH
11520 30995 MT
(alignments are 8 or 32 bits, as fetching data from arbitrary bit boundaries is)SH
11520 32372 MT
(slow. Alignments)
275 W( larger than 32 bits are not obeyed for objects on the heap,)SH
11520 33749 MT
(because the interface to)SH
10 /Courier AF
22146 XM
(ALLOCATE)SH
11 /Times-Roman AF
27221 XM
(makes this awkward and inefficient.)SH
11520 35126 MT
(Even with an alignment of 1, the compiler never allocates objects of 32 bits)SH
11520 36503 MT
(or less across word boundaries.)SH
11520 38431 MT
(Global variables, local variables, and parameters are always allocated a)SH
11520 39808 MT
(minimum of 32 bits aligned to a 32 bit boundary, no matter what their size.)SH
11520 41185 MT
(These variables are nonetheless manipulated as if they were allocated space)SH
11520 42562 MT
(commensurate with their size.)SH
11520 44490 MT
(Variables passed to)SH
10 /Courier AF
20347 XM
(VAR)SH
11 /Times-Roman AF
22422 XM
(parameters must have an alignment that is a multiple)SH
11520 45867 MT
(of 8 bits so that byte addresses can be used.)SH
12 SS 
11520 49062 MT
(18.2.1.)SH
11 /Courier AF
15120 XM
(INTEGER)SH
/Times-Roman SF
11520 51103 MT
(Size)SH
33755 XM
(32 bits)SH
11520 52299 MT
(Alignment)SH
33755 XM
(32 bits)SH
11520 54691 MT
(Minimum value)SH
30029 XM
(-2,147,483,648)SH
11520 55887 MT
(Maximum value)SH
30395 XM
(2,147,483,647)SH
10 /Courier AF
11520 57815 MT
(INTEGER)SH
11 /Times-Roman AF
15995 XM
(values are represented in 2's complement form.)SH
12 SS 
11520 61010 MT
(18.2.2.)SH
11 /Courier AF
15120 XM
(CARDINAL)SH
/Times-Roman SF
11520 63051 MT
(Size)SH
33755 XM
(32 bits)SH
11520 64247 MT
(Alignment)SH
33755 XM
(32 bits)SH
11520 66639 MT
(Minimum value)SH
36170 XM
(0)SH
11520 67835 MT
(Maximum value)SH
30395 XM
(2,147,483,647)SH
10 /Courier AF
11520 69763 MT
(CARDINAL)SH
11 /Times-Roman AF
16595 XM
(values always have 0 in the most significant bit of a word.)SH
ES
%%Page: 99 100
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Data Representation)SH
46880 XM
(99)SH
12 /Times-Roman AF
13680 8023 MT
(18.2.3.)SH
11 /Courier AF
17280 XM
(UNSIGNED)SH
/Times-Roman SF
13680 10064 MT
(Size)SH
35915 XM
(32 bits)SH
13680 11260 MT
(Alignment)SH
35915 XM
(32 bits)SH
13680 13652 MT
(Minimum value)SH
38330 XM
(0)SH
13680 14848 MT
(Maximum value)SH
32555 XM
(4,294,967,295)SH
10 /Courier AF
13680 16776 MT
(UNSIGNED)SH
11 /Times-Roman AF
18755 XM
(values are represented as 32-bit unsigned numbers.)SH
12 SS 
13680 19971 MT
(18.2.4.)SH
11 /Courier AF
17280 XM
(BOOLEAN)SH
/Times-Roman SF
13680 22012 MT
(VAX size)SH
36465 XM
(8 bits)SH
13680 23208 MT
(VAX alignment)SH
36465 XM
(8 bits)SH
13680 25600 MT
(Titan size)SH
35915 XM
(32 bits)SH
13680 26796 MT
(Titan alignment)SH
35915 XM
(32 bits)SH
13680 27992 MT
(Titan size \050in array\051)SH
36465 XM
(8 bits)SH
13680 29188 MT
(Titan alignment \050in array\051)SH
36465 XM
(8 bits)SH
10 /Courier AF
13680 31580 MT
(FALSE)SH
11 /Times-Roman AF
16955 XM
(value)SH
38330 XM
(0)SH
10 /Courier AF
13680 32776 MT
(TRUE)SH
11 /Times-Roman AF
16355 XM
(value)SH
38330 XM
(1)SH
10 /Courier AF
13680 34704 MT
(BOOLEAN)SH
11 /Times-Roman AF
18155 XM
(values are represented in the least significant bit-)SH
39588 XM
(-)SH
39854 XM
(-all others bits are)SH
13680 36081 MT
(0.)SH
12 SS 
13680 39276 MT
(18.2.5.)SH
11 /Courier AF
17280 XM
(CHAR)SH
/Times-Roman SF
13680 41317 MT
(VAX size)SH
36465 XM
(8 bits)SH
13680 42513 MT
(VAX alignment)SH
36465 XM
(8 bits)SH
13680 44905 MT
(Titan size)SH
35915 XM
(32 bits)SH
13680 46101 MT
(Titan alignment)SH
35915 XM
(32 bits)SH
13680 47297 MT
(Titan size \050in array\051)SH
36465 XM
(8 bits)SH
13680 48493 MT
(Titan alignment \050in array\051)SH
36465 XM
(8 bits)SH
13680 50885 MT
(Minimum value)SH
38330 XM
(0)SH
13680 52081 MT
(Maximum value)SH
37230 XM
(255)SH
10 /Courier AF
13680 54009 MT
(CHAR)SH
11 /Times-Roman AF
16355 XM
(values are represented as unsigned 8-bit numbers.)SH
12 SS 
13680 57204 MT
(18.2.6.)SH
11 /Courier AF
17280 XM
(REAL)SH
/Times-Roman SF
13680 59245 MT
(Size)SH
35915 XM
(32 bits)SH
13680 60441 MT
(Alignment)SH
35915 XM
(32 bits)SH
9 SS 
41080 62470 MT
(38)SH
11 SS 
13680 62833 MT
(Minimum value)SH
28889 XM
(-1.7014117331926443)SH
39155 XM
(* 10)SH
9 SS 
41080 63691 MT
(38)SH
11 SS 
13680 64054 MT
(Maximum value)SH
29255 XM
(1.7014117331926443)SH
39155 XM
(* 10)SH
9 SS 
41080 64912 MT
(-39)SH
11 SS 
13680 65275 MT
(Minimum positive value)SH
29255 XM
(2.9387358770557188)SH
39155 XM
(* 10)SH
13680 66471 MT
(Approximate precision)SH
31852 XM
(7 decimal digits)SH
10 /Courier AF
13680 68399 MT
(REAL)SH
11 /Times-Roman AF
16355 XM
(values are represented in VAX F_floating format.)SH
10 /Courier AF
13680 70327 MT
(REAL)SH
11 /Times-Roman AF
16355 XM
(values on the MicroTitan are represented in VAX G_floating format,)SH
13680 71704 MT
(as the hardware doesn't support a 32-bit floating format.)SH
ES
%%Page: 100 101
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(100)SH
36415 XM
(Representation Issues)SH
12 /Times-Roman AF
11520 8023 MT
(18.2.7.)SH
11 /Courier AF
15120 XM
(LONGREAL)SH
/Times-Roman SF
11520 10064 MT
(Size)SH
33755 XM
(64 bits)SH
11520 11260 MT
(Alignment)SH
33755 XM
(32 bits)SH
11520 12456 MT
(MicroTitan alignment)SH
33755 XM
(64 bits)SH
9 SS 
38920 14485 MT
(38)SH
11 SS 
11520 14848 MT
(VAX minimum value)SH
26729 XM
(-1.7014118346046923)SH
36995 XM
(* 10)SH
9 SS 
38920 15706 MT
(38)SH
11 SS 
11520 16069 MT
(VAX maximum value)SH
27095 XM
(1.7014118346046923)SH
36995 XM
(* 10)SH
9 SS 
38920 16927 MT
(-39)SH
11 SS 
11520 17290 MT
(VAX minimum positive value)SH
27095 XM
(2.9387358770557188)SH
36995 XM
(* 10)SH
11520 18486 MT
(VAX approximate precision)SH
29142 XM
(16 decimal digits)SH
9 SS 
38920 20515 MT
(307)SH
11 SS 
11520 20878 MT
(Titan minimum value)SH
27279 XM
(-8.988465674311579)SH
36995 XM
(* 10)SH
9 SS 
38920 21736 MT
(307)SH
11 SS 
11520 22099 MT
(Titan maximum value)SH
27645 XM
(8.988465674311579)SH
36995 XM
(* 10)SH
9 SS 
38920 22957 MT
(-309)SH
11 SS 
11520 23320 MT
(Titan minimum positive value)SH
27645 XM
(5.562684646268003)SH
36995 XM
(* 10)SH
11520 24516 MT
(Titan approximate precision)SH
29142 XM
(15 decimal digits)SH
11520 26444 MT
(VAX)SH
10 /Courier AF
14177 XM
(LONGREAL)SH
11 /Times-Roman AF
19252 XM
(values are represented in VAX D_floating format.)SH
11520 28372 MT
(Titan)SH
10 /Courier AF
14117 XM
(LONGREAL)SH
11 /Times-Roman AF
19192 XM
(values are represented in VAX G_floating format.)SH
11520 30300 MT
(The VAX uses D_floating to be compatible with the C language, which uses)SH
11520 31677 MT
(it because it is trivial to convert between C floats and doubles.  The Titan)SH
11520 33054 MT
(uses G_floating because that's all the hardware supports.)SH
12 SS 
11520 36249 MT
(18.2.8. Subranges)SH
11 SS 
11520 38290 MT
(A subrange type inherits representation, alignment, and size from its)SH
11520 39667 MT
(basetype.)SH
12 SS 
11520 42862 MT
(18.2.9. Enumerations)SH
11 SS 
11520 44903 MT
(Size)SH
33755 XM
(32 bits)SH
11520 46099 MT
(Alignment)SH
33755 XM
(32 bits)SH
11520 48027 MT
(Unless you specify their ordinal value explicitly, enumerated constants are)SH
11520 49404 MT
(assigned ordinal values 0, 1, 2, ...  in the order they appear.)SH
12 SS 
11520 52599 MT
(18.2.10. Fixed-Size Arrays)SH
11 SS 
11520 54640 MT
(Array elements must have a size that is a multiple of 8 bits.)SH
11520 56568 MT
(The size of an array is the number of elements times the \050element size)SH
11520 57945 MT
(rounded up to the element alignment\051.)SH
11520 59873 MT
(On the VAX and MIPS, the alignment of an array is inherited from the)SH
11520 61250 MT
(element alignment, but is always a minimum of 8 bits.  The Titan has poor)SH
11520 62627 MT
(support for byte addressing, so the default alignment of arrays is a minimum)SH
11520 64004 MT
(of 32 bits; you can use)SH
10 /Courier AF
21724 XM
(@ALIGN)SH
11 /Times-Roman AF
25599 XM
(to override this if you need to.)SH
11520 65932 MT
(Multi-dimensional arrays are represented in memory in row-major order,)SH
11520 67309 MT
(with the first element of the array at the lowest memory location allocated.)SH
ES
%%Page: 101 102
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Data Representation)SH
46380 XM
(101)SH
12 /Times-Roman AF
13680 8023 MT
(18.2.11. Open Arrays)SH
11 SS 
13680 10064 MT
(An open array of dimension)SH
10 /Courier AF
26295 XM
(n)SH
11 /Times-Roman AF
27170 XM
(is represented as a descriptor of)SH
10 /Courier AF
41340 XM
(n+1)SH
11 /Times-Roman AF
43415 XM
(words.)SH
13680 11441 MT
(The alignment is 32 bits.)SH
9 SS 
16215 13006 MT
(th)SH
11 SS 
13680 13369 MT
(The 0)SH
17190 XM
(word of the descriptor is a pointer to the actual array data, which has)SH
13680 14746 MT
(the same representation and constraints as a fixed-size array.)SH
9 SS 
16265 16311 MT
(th)SH
42247 XM
(th)SH
11 SS 
13680 16674 MT
(The)SH
10 /Courier AF
15665 XM
(i)SH
11 /Times-Roman AF
17240 XM
(word of the descriptor is the number of elements in the)SH
10 /Courier AF
41647 XM
(i)SH
11 /Times-Roman AF
13680 18051 MT
(dimension.)SH
13680 19979 MT
(A)SH
10 /Courier AF
14749 XM
(@NOCOUNT)SH
11 /Times-Roman AF
19824 XM
(open array \050see Section[flame]\051 is merely a pointer to the actual)SH
13680 21356 MT
(array data, and has no dimension length information associated with it.)SH
12 SS 
13680 24551 MT
(18.2.12. Dynamic arrays)SH
11 SS 
13680 26592 MT
(A dynamic array of dimension)SH
10 /Courier AF
27395 XM
(n)SH
11 /Times-Roman AF
28270 XM
(is represented as a descriptor of)SH
10 /Courier AF
42440 XM
(n+1)SH
11 /Times-Roman AF
44515 XM
(words.)SH
13680 27969 MT
(The alignment is 32 bits.)SH
9 SS 
16215 29534 MT
(th)SH
11 SS 
13680 29897 MT
(The 0)SH
17190 XM
(word of the descriptor is a pointer to the actual array data, which has)SH
13680 31274 MT
(the same representation and constraints as a fixed-size array.  The word)SH
13680 32651 MT
(immediately before the array data normally contains a pointer-check)SH
13680 34028 MT
(signature \050see Section 18.2.16 below\051.)SH
10 /Courier AF
31061 XM
(@C)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
32811 XM
(@PASCAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
37561 XM
(@NOCHECK)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
13680 35405 MT
(@NILCHECK)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
21493 XM
(@LOCAL)SH
11 /Times-Roman AF
25368 XM
(dynamic arrays have no pointer-check signature.)SH
9 SS 
16265 36970 MT
(th)SH
42247 XM
(th)SH
11 SS 
13680 37333 MT
(The)SH
10 /Courier AF
15665 XM
(i)SH
11 /Times-Roman AF
17240 XM
(word of the descriptor is the number of elements in the)SH
10 /Courier AF
41647 XM
(i)SH
11 /Times-Roman AF
13680 38710 MT
(dimension.)SH
13680 40638 MT
(A)SH
10 /Courier AF
14749 XM
(@NOCOUNT)SH
11 /Times-Roman AF
19824 XM
(dynamic array is merely a pointer to the actual array data, and)SH
13680 42015 MT
(has no dimension length information associated with it.)SH
13680 43943 MT
(\050See Section[flame] for more information on)SH
10 /Courier AF
33656 XM
(@NOCOUNT)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
39006 XM
(@C)SH
11 /Times-Roman AF
(, etc.\051)SH
12 SS 
13680 47138 MT
(18.2.13. Subarrays)SH
11 SS 
13680 49179 MT
(A subarray of dimension)SH
10 /Courier AF
24860 XM
(n)SH
11 /Times-Roman AF
25735 XM
(is represented as a descriptor of)SH
10 /Courier AF
39905 XM
(2*n+1)SH
11 /Times-Roman AF
43180 XM
(words.)SH
13680 50556 MT
(The alignment is 32 bits.)SH
9 SS 
16215 52121 MT
(th)SH
11 SS 
13680 52484 MT
(The 0)SH
17190 XM
(word of the descriptor is a pointer to the base of the subarray data,)SH
13680 53861 MT
(which has the same representation and constraints as a fixed-size array.)SH
13680 55238 MT
(Since any dimension of an array can be sliced, subarrays may have gaps)SH
13680 56615 MT
(between successive rows.)SH
9 SS 
18665 58180 MT
(th)SH
44647 XM
(th)SH
11 SS 
13680 58543 MT
(The)SH
10 /Courier AF
15665 XM
(2*i-1)SH
11 /Times-Roman AF
19640 XM
(word of the descriptor is the number of elements in the)SH
10 /Courier AF
44047 XM
(i)SH
11 /Times-Roman AF
13680 59920 MT
(dimension of the subarray.)SH
9 SS 
17465 61485 MT
(th)SH
11 SS 
13680 61848 MT
(The)SH
10 /Courier AF
15665 XM
(2*i)SH
11 /Times-Roman AF
18440 XM
(word of the descriptor is the ``stride'' of that dimension, that is,)SH
13680 63225 MT
(the number of physically-allocated elements between successive indices in)SH
9 SS 
15899 64239 MT
(th)SH
11 SS 
13680 64602 MT
(the)SH
10 /Courier AF
15299 XM
(i)SH
11 /Times-Roman AF
16874 XM
(dimension of the subarray.  If an open array is passed to a subarray,)SH
13680 65979 MT
(the stride is 1.)SH
ES
%%Page: 102 103
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(102)SH
36415 XM
(Representation Issues)SH
12 /Times-Roman AF
11520 8023 MT
(18.2.14. Records)SH
11 SS 
11520 10064 MT
(The alignment of a record is the maximum of the alignment of each of its)SH
11520 11441 MT
(fields.)SH
11520 13492 MT
(In general, the size of a record is larger than the sum of the sizes of the)SH
11520 14869 MT
(individual fields due to alignment constraints.  For example, the record:)SH
10 /Courier AF
14016 16524 MT
(TYPE)SH
16416 17555 MT
(R = RECORD)SH
18816 18586 MT
(ch : CHAR;)SH
18816 19617 MT
(i :)
600 W( INTEGER;)SH
16416 20648 MT
(END;)SH
11 /Times-Roman AF
11520 22434 MT
(has a size of 64 bits and an alignment of 32 bits, even though the individual)SH
11520 23811 MT
(fields have a total size of 40 bits.  Since)SH
10 /Courier AF
29269 XM
(INTEGER)SH
11 /Times-Roman AF
33744 XM
(has an alignment of 32)SH
11520 25188 MT
(bits, 24 bits of unused padding are added after the field)SH
10 /Courier AF
36018 XM
(ch)SH
11 /Times-Roman AF
(.)SH
11520 27239 MT
(The tag field, if any, of a variant section is laid out like an ordinary field.)SH
11520 28616 MT
(Each variant section is laid out like an ordinary record, except that the)SH
11520 29993 MT
(variants don't necessarily start at the same offset.  \050If the tag field allocates)SH
11520 31370 MT
(part of a word, some variants may leave the rest of the word unallocated due)SH
11520 32747 MT
(to alignment constraints.\051  The next field after a variant section starts)SH
11520 34124 MT
(wherever it would have if the largest variant had been there all by itself.)SH
11520 36052 MT
(Fields smaller than 32 bits are allocated from least significant bit to most.  In)SH
11520 37429 MT
(the record:)SH
10 /Courier AF
14016 39084 MT
(TYPE)SH
16416 40115 MT
(R = RECORD)SH
18816 41146 MT
(a : CHAR;)SH
18816 42177 MT
(b : @SIZE 1 @ALIGN 1 BOOLEAN;)SH
18816 43208 MT
(c : @SIZE 2 @ALIGN 1 [0..3];)SH
16416 44239 MT
(END;)SH
11 /Times-Roman AF
11520 46025 MT
(field)SH
10 /Courier AF
13811 XM
(a)SH
11 /Times-Roman AF
14686 XM
(is allocated bits 0..7, field)SH
10 /Courier AF
26296 XM
(b)SH
11 /Times-Roman AF
27171 XM
(is allocated bit 8, and field)SH
10 /Courier AF
39116 XM
(c)SH
11 /Times-Roman AF
39991 XM
(is allocated)SH
11520 47402 MT
(bits 9..10.)SH
11520 49330 MT
(In a)SH
10 /Courier AF
13474 XM
(@LEFTTORIGHT)SH
11 /Times-Roman AF
20949 XM
(record small fields are allocated from most significant)SH
11520 50707 MT
(bit to least.)SH
12 SS 
11520 53902 MT
(18.2.15. Sets)SH
11 SS 
11520 55943 MT
(A set is represented as a bit vector indexed by the element type of the set)SH
11520 57320 MT
(biased by the first value in the element type.  If)SH
10 /Courier AF
32536 XM
(S)SH
11 /Times-Roman AF
33411 XM
(is declared:)SH
10 /Courier AF
14016 58975 MT
(TYPE)SH
16416 60006 MT
(S = SET OF [low..high];)SH
11 /Times-Roman AF
11520 61792 MT
(then)SH
10 /Courier AF
13689 XM
(i - low)SH
11 /Times-Roman AF
18164 XM
(of the vector is 1 if)SH
10 /Courier AF
26778 XM
(i)SH
11 /Times-Roman AF
27653 XM
(is a member of the set, 0 if)SH
10 /Courier AF
39658 XM
(i)SH
11 /Times-Roman AF
40533 XM
(is not.)SH
11520 63720 MT
(The set type)SH
10 /Courier AF
17171 XM
(S)SH
11 /Times-Roman AF
18046 XM
(has a size of)SH
10 /Courier AF
23726 XM
(high-low+1)SH
11 /Times-Roman AF
30001 XM
(bits rounded up to 32 bits, and an)SH
11520 65097 MT
(alignment of 32 bits.)SH
11520 67025 MT
(The predefined set type)SH
10 /Courier AF
22148 XM
(BITSET)SH
11 /Times-Roman AF
26023 XM
(has a size of 32 bits and an alignment of 32)SH
11520 68402 MT
(bits.)SH
11520 70330 MT
(The size of a set is unconstrained-)SH
26386 XM
(-)SH
26652 XM
(-you can declare a set of any ordinal type,)SH
11520 71707 MT
(including)SH
10 /Courier AF
15951 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 103 104
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Data Representation)SH
46380 XM
(103)SH
11 /Times-Roman AF
13680 7955 MT
(Set elements are allocated from least significant to most significant bit.)SH
13680 9883 MT
(A)SH
10 /Courier AF
14749 XM
(@LEFTTORIGHT)SH
11 /Times-Roman AF
22224 XM
(set allocates set elements from most significant to least)SH
13680 11260 MT
(significant bit.)SH
10 /Courier AF
20586 XM
(@LEFTTORIGHT)SH
11 /Times-Roman AF
28061 XM
(sets are limited in size to a maximum of 32)SH
13680 12637 MT
(bits.)SH
12 SS 
13680 15832 MT
(18.2.16. Pointers)SH
11 SS 
13680 17873 MT
(Size)SH
35915 XM
(32 bits)SH
13680 19069 MT
(Alignment)SH
35915 XM
(32 bits)SH
13680 21461 MT
(Minimum value)SH
38330 XM
(0)SH
13680 22657 MT
(Maximum value)SH
35952 XM
(ffffffff)SH
9 SS 
38880 23020 MT
(16)SH
11 SS 
13680 24585 MT
(A pointer is the physical byte address of the data that is referenced.  Normal)SH
13680 25962 MT
(pointers \050those declared without)SH
10 /Courier AF
28098 XM
(@C)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
29848 XM
(@PASCAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
34598 XM
(@NILCHECK)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
41739 XM
(@NOCHECK)SH
11 /Times-Roman AF
(\051)SH
13680 27339 MT
(have a ``pointer-check signature'' associated with the data that they point to.)SH
13680 28716 MT
(The signature is stored in the word immediately before the data, and contains)SH
13680 30093 MT
(the value of the pointer.  If the pointer)SH
10 /Courier AF
30724 XM
(p)SH
11 /Times-Roman AF
31599 XM
(in:)SH
10 /Courier AF
18576 31748 MT
(VAR p : POINTER TO INTEGER;)SH
16176 32779 MT
(BEGIN)SH
18576 33810 MT
(NEW\050p\051;)SH
18576 34841 MT
(p^ := 123;)SH
11 /Times-Roman AF
13680 36627 MT
(is allocated at address 25f8)SH
26492 XM
(, then after the assignment memory looks like:)SH
9 SS 
25592 36990 MT
(16)SH
10 /Courier AF
16176 38282 MT
(25f4)SH
20136 XM
(contains 25f8)SH
8 SS 
18576 38615 MT
(16)SH
27936 XM
(16)SH
10 SS 
16176 39405 MT
(25f8)SH
20136 XM
(contains 123)SH
8 SS 
18576 39738 MT
(16)SH
11 /Times-Roman AF
13680 41333 MT
(\050The Titan stores the complement of the pointer.\051)SH
13680 43261 MT
(Whenever you dereference a pointer using uparrow, the compiler uses the)SH
13680 44638 MT
(pointer-check signature to verify that the pointer references valid data,)SH
13680 46015 MT
(instead of some random address in memory.  In practice, if the pointer is bad)SH
13680 47392 MT
(you almost always access non-existent memory trying to validate the pointer,)SH
13680 48769 MT
(so instead of a nice message like ``Invalid pointer was dereferenced'' you're)SH
13680 50146 MT
(told ``Segmentation fault \050core dumped\051'' or ``Bus error \050core dumped\051''.)SH
13680 51523 MT
(Note that this check is not foolproof, particularly if a deallocated space is)SH
13680 52900 MT
(reallocated to some new pointer type and an old pointer is used to reference)SH
13680 54277 MT
(the space.)SH
13680 56205 MT
(Pointers declared with)SH
10 /Courier AF
23791 XM
(@C)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
25541 XM
(@PASCAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
30291 XM
(@NILCHECK)SH
11 /Times-Roman AF
35966 XM
(or)SH
10 /Courier AF
37157 XM
(@NOCHECK)SH
11 /Times-Roman AF
42232 XM
(have no)SH
13680 57582 MT
(pointer-check signature.)SH
13680 59510 MT
(\050See Section[flame] for more information on)SH
10 /Courier AF
33656 XM
(@C)SH
11 /Times-Roman AF
(, etc.\051)SH
12 SS 
13680 62705 MT
(18.2.17. Procedures)SH
11 SS 
13680 64746 MT
(Size)SH
35915 XM
(32 bits)SH
13680 65942 MT
(Alignment)SH
35915 XM
(32 bits)SH
13680 67870 MT
(A procedure value is the address of the entry point of the procedure.)SH
13680 69798 MT
(\050See Section 19.3.1, page 111 for information on how external procedure)SH
13680 71175 MT
(names are formed.\051)SH
ES
%%Page: 104 105
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(104)SH
36415 XM
(Representation Issues)SH
12 /Times-Roman AF
11520 8023 MT
(18.3.)SH
11 /Courier AF
14220 XM
(@SIZE)SH
12 /Times-Roman AF
17820 XM
(and)SH
11 /Courier AF
19853 XM
(@ALIGN)SH
/Times-Roman SF
11520 10064 MT
(Syntax in EBNF:)SH
10 /Courier AF
14016 11719 MT
(RepresentationType = Representation type)SH
14016 12750 MT
(Representation =)
2400 W( \050@SIZE | @ALIGN\051 ConstExpr)SH
11 /Times-Roman AF
11520 15367 MT
(You can get fine-grained control over data representation by constructing)SH
11520 16744 MT
(types with the)SH
10 /Courier AF
17967 XM
(@SIZE)SH
11 /Times-Roman AF
21242 XM
(and)SH
10 /Courier AF
23105 XM
(@ALIGN)SH
11 /Times-Roman AF
26980 XM
(constructors.)SH
11520 18795 MT
(The general form of the)SH
10 /Courier AF
22239 XM
(@SIZE)SH
11 /Times-Roman AF
25514 XM
(type constructor is:)SH
10 /Courier AF
14016 20450 MT
(@SIZE n T)SH
11 /Times-Roman AF
11520 22236 MT
(where)SH
10 /Courier AF
14481 XM
(n)SH
11 /Times-Roman AF
15356 XM
(is a positive constant number and)SH
10 /Courier AF
30326 XM
(T)SH
11 /Times-Roman AF
31201 XM
(is a type.  It creates a new type)SH
11520 23613 MT
(whose representation takes)SH
10 /Courier AF
23645 XM
(n)SH
11 /Times-Roman AF
24520 XM
(bits. It)
275 W( does not change the alignment of the)SH
11520 24990 MT
(type. The)
275 W( basetype of the new type is the same as that of type)SH
10 /Courier AF
39072 XM
(T)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
11520 27041 MT
(n)SH
11 /Times-Roman AF
12395 XM
(cannot be smaller than the ``natural'' size of)SH
10 /Courier AF
32185 XM
(T)SH
11 /Times-Roman AF
(. The)
275 W( natural size of a type)SH
11520 28418 MT
(in bits is)SH
10 /Courier AF
15525 XM
(SYSTEM.TBITSIZE)SH
11 /Times-Roman AF
24800 XM
(for most types-)SH
31360 XM
(-)SH
31626 XM
(-all but subranges and)SH
11520 29795 MT
(enumerations. For)
275 W( those, the natural size is the minimum number of bits)SH
11520 31172 MT
(required to represent all the values.)SH
10 /Courier AF
11520 33100 MT
(n)SH
11 /Times-Roman AF
12395 XM
(cannot be larger than 32 for)SH
10 /Courier AF
24855 XM
(INTEGER)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
29605 XM
(CARDINAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
34955 XM
(UNSIGNED)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
40305 XM
(BOOLEAN)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
11520 34477 MT
(CHAR)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
14470 XM
(SYSTEM.WORD)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
21620 XM
(SYSTEM.BYTE)SH
11 /Times-Roman AF
(, subranges, and enumerations.)SH
10 /Courier AF
11520 36528 MT
(@SIZE)SH
11 /Times-Roman AF
14795 XM
(cannot be applied to)SH
10 /Courier AF
23959 XM
(REAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
26909 XM
(LONGREAL)SH
11 /Times-Roman AF
(, open arrays, dynamic arrays,)SH
11520 37905 MT
(subarrays, pointers, or procedures.)SH
11520 39956 MT
(The general form of the)SH
10 /Courier AF
22239 XM
(@ALIGN)SH
11 /Times-Roman AF
26114 XM
(type constructor is:)SH
10 /Courier AF
14016 41611 MT
(@ALIGN n T)SH
11 /Times-Roman AF
11520 43397 MT
(where)SH
10 /Courier AF
14481 XM
(n)SH
11 /Times-Roman AF
15356 XM
(is a positive constant number and)SH
10 /Courier AF
30326 XM
(T)SH
11 /Times-Roman AF
31201 XM
(is a type.  It creates a new type)SH
11520 44774 MT
(whose representation is aligned on an)SH
10 /Courier AF
28320 XM
(n)SH
11 /Times-Roman AF
29195 XM
(bit boundary.  It does not change the)SH
11520 46151 MT
(size of the type.  The basetype of the new type is the same as that of type)SH
10 /Courier AF
43867 XM
(T)SH
11 /Times-Roman AF
(.)SH
11520 48202 MT
(For instance, the declarations:)SH
10 /Courier AF
14016 49857 MT
(TYPE)SH
16416 50888 MT
(T = @SIZE 4 @ALIGN 2 [0..15];)SH
16416 51919 MT
(B = @SIZE 1 @ALIGN 1 BOOLEAN;)SH
11 /Times-Roman AF
11520 53705 MT
(specify that each variable of type)SH
10 /Courier AF
26362 XM
(T)SH
11 /Times-Roman AF
27237 XM
(occupies 4 bits and has an alignment of 2)SH
11520 55082 MT
(bits; each variable of type)SH
10 /Courier AF
23157 XM
(B)SH
11 /Times-Roman AF
24032 XM
(occupies 1 bit and has an alignment of 1 bit.)SH
11520 56459 MT
(Operations that apply to the subrange)SH
10 /Courier AF
28260 XM
([0..15])SH
11 /Times-Roman AF
32735 XM
(also apply to type)SH
10 /Courier AF
40801 XM
(T)SH
11 /Times-Roman AF
(;)SH
11520 57836 MT
(operations that apply to)SH
10 /Courier AF
22152 XM
(BOOLEAN)SH
11 /Times-Roman AF
26627 XM
(also apply to type)SH
10 /Courier AF
34693 XM
(B)SH
11 /Times-Roman AF
(.)SH
11520 59887 MT
(You usually use)SH
10 /Courier AF
18883 XM
(@SIZE)SH
11 /Times-Roman AF
22158 XM
(and)SH
10 /Courier AF
24021 XM
(@ALIGN)SH
11 /Times-Roman AF
27896 XM
(to pack fields into a record, to make a)SH
11520 61264 MT
(subrange or an enumeration take up less space, or to accomplish both.  A less)SH
11520 62641 MT
(frequent reason is to pad out a field.)SH
11520 64569 MT
(Accessing bit-aligned variables is less efficient than accessing variables)SH
11520 65946 MT
(aligned to 8 or 32 bits.)SH
10 /Courier AF
11520 67874 MT
(@ALIGN)SH
11 /Times-Roman AF
15395 XM
(allows you to create variables that do not reside on byte boundaries)SH
11520 69251 MT
(and therefore cannot be addressed with byte addresses.  You cannot apply)SH
10 /Courier AF
11520 70628 MT
(SYSTEM.ADR)SH
11 /Times-Roman AF
17795 XM
(to such variables nor pass them by)SH
10 /Courier AF
33222 XM
(VAR)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 105 106
BS
0 SI
9 /Courier AF
13680 4270 MT
(@SIZE)SH
10 /Times-Bold AF
16630 XM
(and)SH
9 /Courier AF
18492 XM
(@ALIGN)SH
10 /Times-Bold AF
46380 XM
(105)SH
11 /Times-Roman AF
13680 7955 MT
(Except for)SH
10 /Courier AF
18566 XM
(VAR)SH
11 /Times-Roman AF
20641 XM
(compatibility,)SH
10 /Courier AF
27059 XM
(@SIZE)SH
11 /Times-Roman AF
30334 XM
(and)SH
10 /Courier AF
32197 XM
(@ALIGN)SH
11 /Times-Roman AF
36072 XM
(specifications are ignored)SH
13680 9332 MT
(by type-checking rules.  See Chapter 16, page 87 for more details.)SH
12 SS 
13680 13613 MT
(18.4. Controlling the Representation of Pointers and Arrays)SH
11 SS 
13680 15654 MT
(As noted above, open arrays and dynamic arrays are represented by a)SH
13680 17031 MT
(multi-word descriptor.  Further, the data referenced by Modula-2 pointers)SH
13680 18408 MT
(and dynamic arrays is preceded by a pointer-check signature.)SH
13680 20336 MT
(WRL Modula-2 gives you control over these representations, as well as the)SH
13680 21713 MT
(routines used to allocate and deallocate memory.  This allows you to use)SH
13680 23090 MT
(such constructs when calling languages like C and Pascal, where the closest)SH
13680 24467 MT
(equivalent type consists merely of an address that points to data.)SH
12 SS 
13680 27662 MT
(18.4.1.)SH
11 /Courier AF
17280 XM
(@C)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
19200 XM
(@PASCAL)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
24420 XM
(@NOCHECK)SH
12 /Times-Roman AF
(, and)SH
11 /Courier AF
32333 XM
(@NILCHECK)SH
12 /Times-Roman AF
38573 XM
(Pointers)SH
11 SS 
13680 29703 MT
(Syntax in EBNF:)SH
10 /Courier AF
16176 31358 MT
(PointerType = POINTER [PointerKind] TO type)SH
16176 32389 MT
(DynamicArrayType = DYNARRAY [PointerKind] OF {ARRAY OF} type)SH
26376 33420 MT
(| DYNARRAY [PointerKind] @NOCOUNT OF type)SH
16176 34451 MT
(PointerKind = @PASCAL | @C | @NOCHECK | @NILCHECK | @LOCAL)SH
11 /Times-Roman AF
13680 37068 MT
(When you construct a pointer or dynamic array type, you can control whether)SH
13680 38445 MT
(the referenced data is preceded by a pointer-check signature, what kind of)SH
13680 39822 MT
(pointer checking \050if any\051 is performed, and which runtime routines)SH
10 /Courier AF
43339 XM
(NEW)SH
11 /Times-Roman AF
45414 XM
(and)SH
10 /Courier AF
13680 41199 MT
(DISPOSE)SH
11 /Times-Roman AF
18155 XM
(call to allocate and deallocate the data.)SH
13680 43127 MT
(A)SH
10 /Courier AF
14749 XM
(@C)SH
11 /Times-Roman AF
16224 XM
(pointer is allocated/deallocated by the C runtime routines)SH
10 /Courier AF
13680 44504 MT
(malloc)SH
11 /Times-Roman AF
(/)SH
10 /Courier AF
(free)SH
11 /Times-Roman AF
(, does not contain a pointer-check signature, and is not checked)SH
13680 45881 MT
(for validity.  Caveat dereferencor.)SH
13680 47809 MT
(A)SH
10 /Courier AF
14749 XM
(@PASCAL)SH
11 /Times-Roman AF
19224 XM
(pointer is allocated/deallocated by the Pascal runtime routines)SH
10 /Courier AF
13680 49186 MT
(NEW)SH
11 /Times-Roman AF
(/)SH
10 /Courier AF
(DISPOSE)SH
11 /Times-Roman AF
(, and does not contain a pointer-check signature.  Validity of a)SH
10 /Courier AF
13680 50563 MT
(@PASCAL)SH
11 /Times-Roman AF
18155 XM
(pointer is weakly checked by making sure that the pointer value)SH
13680 51940 MT
(lies inclusively between)SH
10 /Courier AF
24525 XM
(_minptr)SH
11 /Times-Roman AF
29000 XM
(and)SH
10 /Courier AF
30863 XM
(_maxptr)SH
11 /Times-Roman AF
(, which are maintained by)SH
13680 53317 MT
(the Pascal)SH
10 /Courier AF
18384 XM
(NEW)SH
11 /Times-Roman AF
20459 XM
(and)SH
10 /Courier AF
22322 XM
(DISPOSE)SH
11 /Times-Roman AF
26797 XM
(routines.)SH
13680 55245 MT
(A)SH
10 /Courier AF
14749 XM
(@NOCHECK)SH
11 /Times-Roman AF
19824 XM
(pointer is allocated/deallocated by the Modula-2 runtime, does)SH
13680 56622 MT
(not contain a pointer-check signature, and is not checked for validity.)SH
13680 58673 MT
(A)SH
10 /Courier AF
14749 XM
(@NILCHECK)SH
11 /Times-Roman AF
20424 XM
(pointer is allocated/deallocated by the Modula-2 runtime and)SH
13680 60050 MT
(does not contain a pointer-check signature.  Validity of a)SH
10 /Courier AF
38941 XM
(@NILCHECK)SH
11 /Times-Roman AF
44616 XM
(pointer)SH
13680 61427 MT
(is weakly checked by making sure the pointer is not)SH
10 /Courier AF
36774 XM
(NIL)SH
11 /Times-Roman AF
(.)SH
13680 63478 MT
(Pointer data must be allocated and deallocated with a matched pair of)SH
13680 64855 MT
(runtime routines, so you should be particularly careful about using)SH
10 /Courier AF
13680 66232 MT
(@NOCHECK)SH
11 /Times-Roman AF
18755 XM
(and)SH
10 /Courier AF
20618 XM
(@NILCHECK)SH
11 /Times-Roman AF
(. These)
275 W( pointer kinds allow you to allocate)SH
13680 67609 MT
(pointer data with one runtime routine, pass the pointer to a procedure in)SH
13680 68986 MT
(another language, and deallocate there with a conflicting routine.)SH
13680 70363 MT
(Catastrophe results.  When in doubt, use)SH
10 /Courier AF
31735 XM
(@C)SH
11 /Times-Roman AF
33210 XM
(or)SH
10 /Courier AF
34401 XM
(@PASCAL)SH
11 /Times-Roman AF
38876 XM
(instead.)SH
ES
%%Page: 106 107
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(106)SH
36415 XM
(Representation Issues)SH
12 /Times-Roman AF
11520 8023 MT
(18.4.2.)SH
11 /Courier AF
15120 XM
(@NOCOUNT)SH
12 /Times-Roman AF
20700 XM
(Open and Dynamic Arrays)SH
11 SS 
11520 10064 MT
(Syntax in EBNF:)SH
10 /Courier AF
14016 11719 MT
(OpenArrayType =)
1800 W( ...)SH
24216 12750 MT
(| ARRAY @NOCOUNT OF qualident)SH
14016 13781 MT
(DynamicArrayType = DYNARRAY [PointerKind] OF {ARRAY OF} type)SH
24216 14812 MT
(| DYNARRAY [PointerKind] @NOCOUNT OF type)SH
14016 15843 MT
(PointerKind = @PASCAL | @C | @NOCHECK | @NILCHECK | @LOCAL)SH
11 /Times-Roman AF
11520 18460 MT
(Sometimes you need to call a procedure written in C that has a parameter that)SH
11520 19837 MT
(is an unbounded array or a pointer to the base of an array.  You can use)SH
10 /Courier AF
11520 21214 MT
(@NOCOUNT)SH
11 /Times-Roman AF
16595 XM
(to make the Modula-2 open array descriptor look like the)SH
11520 22591 MT
(equivalent C descriptor:)SH
10 /Courier AF
14016 24246 MT
(TYPE)SH
16416 25277 MT
(CString = ARRAY @NOCOUNT OF CHAR;)SH
14016 26308 MT
(PROCEDURE @EXTERNAL setkey\050CONST key : CString\051;)SH
11 /Times-Roman AF
11520 28094 MT
(The elements of a nocount open array can be any type except an open array)SH
11520 29471 MT
(type. Nocount)
275 W( open arrays must be passed by)SH
10 /Courier AF
31986 XM
(CONST)SH
11 /Times-Roman AF
35261 XM
(or)SH
10 /Courier AF
36452 XM
(VAR)SH
11 /Times-Roman AF
(; they can't be)SH
11520 30848 MT
(passed by value.  A nocount open array can't be passed to a normal open)SH
11520 32225 MT
(array-)SH
14044 XM
(-)SH
14310 XM
(-if you need to do so you must pass a slice \050see Section 5.8, page 31\051)SH
11520 33602 MT
(of the array.  You can't use the supplied procedures)SH
10 /Courier AF
34517 XM
(HIGH)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
37467 XM
(LOW)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
41008 XM
(NUMBER)SH
11 /Times-Roman AF
11520 34979 MT
(on a nocount array, nor can you use any of the)SH
10 /Courier AF
32166 XM
(SYSTEM)SH
11 /Times-Roman AF
36041 XM
(size procedures.)SH
11520 37030 MT
(Sometimes you need to call a procedure written in C that returns a pointer to)SH
11520 38407 MT
(the base of an array, or you need to access a C pointer to the base of an array.)SH
11520 39784 MT
(You can use)SH
10 /Courier AF
17231 XM
(@NOCOUNT)SH
11 /Times-Roman AF
22306 XM
(and)SH
10 /Courier AF
24169 XM
(@NOCHECK)SH
11 /Times-Roman AF
29244 XM
(to make the Modula-2 dynamic array)SH
11520 41161 MT
(descriptor look like the equivalent C descriptor:)SH
10 /Courier AF
14016 42816 MT
(TYPE)SH
16416 43847 MT
(CStringPointer = DYNARRAY @NOCHECK @NOCOUNT OF CHAR;)SH
16416 44878 MT
(ReallyArgV =)
2400 W( DYNARRAY @NOCHECK @NOCOUNT OF CStringPointer;)SH
14016 45909 MT
(VAR)SH
16416 46940 MT
(@EXTERNAL argv : ReallyArgV;)SH
14016 49002 MT
(PROCEDURE @EXTERNAL getenv\050CONST name : CString\051 : CStringPointer;)SH
11 /Times-Roman AF
11520 51053 MT
(The elements of a nocount dynamic array can be any type except an open)SH
11520 52430 MT
(array. You)
275 W( can't pass a dereferenced nocount dynamic array to a normal)SH
11520 53807 MT
(open array parameter-)SH
21128 XM
(-)SH
21394 XM
(-to do so you must pass a slice \050see Section 5.8, page)SH
11520 55184 MT
(31\051. You)
275 W( can't use the supplied procedures)SH
10 /Courier AF
30915 XM
(HIGH)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
33865 XM
(LOW)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
37406 XM
(NUMBER)SH
11 /Times-Roman AF
41281 XM
(on a)SH
11520 56561 MT
(nocount dynamic array, nor can you use any of the)SH
10 /Courier AF
34091 XM
(SYSTEM)SH
11 /Times-Roman AF
37966 XM
(size procedures.)SH
11520 58612 MT
(If you)SH
10 /Courier AF
14452 XM
(DISPOSE)SH
11 /Times-Roman AF
18927 XM
(a nocount dynamic array, you must provide the number of)SH
11520 59989 MT
(elements in the array:)SH
10 /Courier AF
14016 61644 MT
(NEW\050argv, argc\051;)SH
14016 62675 MT
(...)SH
14016 63706 MT
(DISPOSE\050argv, argc\051;)SH
ES
%%Page: 107 108
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Controlling the Representation of Pointers and Arrays)SH
46380 XM
(107)SH
12 /Times-Roman AF
13680 8023 MT
(18.5. Tagless Variant Records)SH
11 SS 
13680 10064 MT
(A tagless variant record allows a client program to view the same piece of)SH
13680 11441 MT
(storage in two or more different ways.  The client has complete control over)SH
13680 12818 MT
(the choice of the view in use at any instant; when the client uses one of the)SH
13680 14195 MT
(field names to access part of a record, it gets the effect of casting that record)SH
13680 15572 MT
(into the particular variant containing the named field before performing the)SH
13680 16949 MT
(access. Since)
275 W( the loophole is implicit, this language feature should be used)SH
13680 18326 MT
(with great care.)SH
13680 20377 MT
(Here is an example from)SH
10 /Courier AF
24827 XM
(Hardware.def)SH
11 /Times-Roman AF
(. A)
275 W( virtual address is always a)SH
13680 21754 MT
(valid address, but sometimes we want to deal with it as a unit and sometimes)SH
13680 23131 MT
(we'd rather view it as a byte-page-region triple.  We say:)SH
10 /Courier AF
16176 24786 MT
(TYPE)SH
18576 25817 MT
(VirtualAddress = RECORD)SH
20976 26848 MT
(CASE VARep OF)SH
20976 27879 MT
(| FALSE :)SH
23376 28910 MT
(addr :)
1200 W( Address;)SH
20976 29941 MT
(| TRUE :)SH
23376 30972 MT
(byte :)
1200 W( @SIZE LogBytesPerPage @ALIGN 1 PageBytes;)SH
23376 32003 MT
(page :)
1200 W( @SIZE LogPagesPerRegion @ALIGN 1 VirtualPage;)SH
23376 33034 MT
(region : @SIZE 2 @ALIGN 1 Region;)SH
20976 34065 MT
(END;)SH
18576 35096 MT
(END;)SH
11 /Times-Roman AF
13680 37147 MT
(If)SH
10 /Courier AF
14687 XM
(va)SH
11 /Times-Roman AF
16162 XM
(is a variable of type)SH
10 /Courier AF
25111 XM
(VirtualAddress)SH
11 /Times-Roman AF
(, then)SH
10 /Courier AF
36230 XM
(va.addr)SH
11 /Times-Roman AF
40705 XM
(is the whole)SH
13680 38524 MT
(address, and)SH
10 /Courier AF
19391 XM
(va.region)SH
11 /Times-Roman AF
25066 XM
(is the most significant two bits of the address.)SH
13680 40575 MT
(Sometimes we use a tagless variant record to describe the fact that a)SH
13680 41952 MT
(particular piece of data has two \050or more\051 completely different)SH
13680 43329 MT
(interpretations. We)
275 W( choose an interpretation based on some externally)SH
13680 44706 MT
(supplied information.  For instance, the interpretation of part of one of the)SH
13680 46083 MT
(VAX internal processor registers depends upon whether or not the VAX is a)SH
13680 47460 MT
(MicroVAX-II:)SH
10 /Courier AF
16176 49115 MT
(CASE UVAXII OF)SH
16176 50146 MT
(| TRUE :)
SH( \050*)
14400 W( KA630 13.2.2 *\051)SH
18576 51177 MT
(fill33A :)
3600 W( Bits3;)SH
18576 52208 MT
(breakReceived : PackedBoolean;)SH
18576 53239 MT
(fill33B :)
3600 W( Bits1;)SH
18576 54270 MT
(framingError :)
600 W( PackedBoolean;)SH
18576 55301 MT
(overrunError :)
600 W( PackedBoolean;)SH
16176 56332 MT
(| FALSE :)SH
18576 57363 MT
(inputSource :)
1200 W( Bits4;)SH
18576 58394 MT
(fill33C :)
3600 W( Bits3;)SH
16176 59425 MT
(END;)SH
11 /Times-Roman AF
13680 61211 MT
(Once a program had determined that it was running on a MicroVAX-II, it)SH
13680 62588 MT
(might go on to access the)SH
10 /Courier AF
25106 XM
(overrunError)SH
11 /Times-Roman AF
32581 XM
(field.)SH
13680 64639 MT
(In the first example there was no way for the programmer to do the wrong)SH
13680 66016 MT
(thing, since both views of a virtual address are valid.  In the second example,)SH
13680 67393 MT
(the programmer definitely can do the wrong thing by accessing the)SH
10 /Courier AF
13680 68770 MT
(overrunError)SH
11 /Times-Roman AF
21155 XM
(field \050say\051 while running on a VAX that is not a)SH
13680 70147 MT
(MicroVAX-II. There)
275 W( is nothing that Modula-2 can do to prevent this sort of)SH
13680 71524 MT
(programming error.)SH
ES
%%Page: 108 109
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(108)SH
36415 XM
(Representation Issues)SH
ES
%%Page: 109 110
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(109)SH
14 /Times-Roman AF
18336 11760 MT
(19. Mixing Modula-2 with Other Languages)SH
11 SS 
13680 15249 MT
(The world is an imperfect place.  You sometimes need to call C, Pascal, or)SH
13680 16626 MT
(assembly language from Modula-2, and vice-versa.  If so, you should read)SH
13680 18003 MT
(the previous chapter as well as this one.  \050Unless otherwise qualified, Pascal)SH
13680 19380 MT
(refers to Berkeley Pascal for the VAX in this chapter.  Titan Pascal maps)SH
13680 20757 MT
(almost directly into Modula-2: the same source files generate the two)SH
13680 22134 MT
(compilers with a bit of conditional compilation.\051)SH
13680 24062 MT
(If you're lucky, you can use one of the interfaces to the C library that have)SH
13680 25439 MT
(already been defined for you: look in the directory)SH
10 /Courier AF
36129 XM
(/usr/def)SH
11 /Times-Roman AF
(.)SH
13680 27367 MT
(If an interface to C code does not already exist, you can use the)SH
10 /Courier AF
41809 XM
(htdf)SH
11 /Times-Roman AF
13680 28744 MT
(program to help convert C)SH
10 /Courier AF
25563 XM
(.h)SH
11 /Times-Roman AF
27038 XM
(files to Modula-2)SH
10 /Courier AF
34951 XM
(.def)SH
11 /Times-Roman AF
37626 XM
(files. The)
275 W( resulting)SH
13680 30121 MT
(definition file may be usable as is, or may require some hand-tuning to make)SH
13680 31498 MT
(use of Modula-2's richer type system; see Section 19.7, page 116 for)SH
13680 32875 MT
(examples.)SH
12 SS 
13680 37156 MT
(19.1. C Data Representation)SH
11 SS 
13680 39197 MT
(Types that have a size smaller than one 32-bit word have an alignment equal)SH
13680 40574 MT
(to their size.  Larger types have an alignment of 32 bits.)SH
13680 42502 MT
(C's)SH
10 /Courier AF
15483 XM
(int)SH
11 /Times-Roman AF
17558 XM
(and)SH
10 /Courier AF
19421 XM
(long)SH
11 /Times-Roman AF
22096 XM
(are equivalent to Modula-2's)SH
10 /Courier AF
35108 XM
(INTEGER)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 44430 MT
(unsigned)SH
11 /Times-Roman AF
18755 XM
(and)SH
10 /Courier AF
20618 XM
(unsigned long)SH
11 /Times-Roman AF
28693 XM
(are equivalent to)SH
10 /Courier AF
36298 XM
(UNSIGNED)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 46358 MT
(short)SH
11 /Times-Roman AF
16955 XM
(is equivalent to)SH
10 /Courier AF
23952 XM
(@SIZE 16 @ALIGN 16 [-32768..32767])SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 48286 MT
(unsigned short)SH
11 /Times-Roman AF
22355 XM
(is equivalent to)SH
10 /Courier AF
29352 XM
(@SIZE 16 @ALIGN 16 [0..65535])SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 50214 MT
(char)SH
11 /Times-Roman AF
16355 XM
(is equivalent to)SH
10 /Courier AF
23352 XM
(CHAR)SH
11 /Times-Roman AF
26027 XM
(for 7-bit characters.  Sometimes)SH
10 /Courier AF
40383 XM
(char)SH
11 /Times-Roman AF
43058 XM
(is used to)SH
13680 51591 MT
(represent an 8-bit signed number, in which case it is equivalent to)SH
10 /Courier AF
42853 XM
(@SIZE 8)SH
13680 52968 MT
(@ALIGN 8 [-128..127])SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 54896 MT
(unsigned char)SH
11 /Times-Roman AF
21755 XM
(is equivalent to to)SH
10 /Courier AF
29883 XM
(CHAR)SH
11 /Times-Roman AF
(. If)275 W
10 /Courier AF
34115 XM
(unsigned char)SH
11 /Times-Roman AF
42190 XM
(is used to)SH
13680 56273 MT
(represent an 8-bit unsigned number, it is equivalent to)SH
10 /Courier AF
13680 57650 MT
(@SIZE 8 @ALIGN 8 [0..255])SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
13680 59578 MT
(float)SH
11 /Times-Roman AF
16955 XM
(is equivalent to)SH
10 /Courier AF
23952 XM
(REAL)SH
11 /Times-Roman AF
(. \050Note)
275 W( that)SH
10 /Courier AF
31881 XM
(float)SH
11 /Times-Roman AF
35156 XM
(is cast to)SH
10 /Courier AF
39281 XM
(double)SH
11 /Times-Roman AF
43156 XM
(in)SH
13680 60955 MT
(procedure calls.\051)SH
10 /Courier AF
13680 62883 MT
(long float)SH
11 /Times-Roman AF
19955 XM
(and)SH
10 /Courier AF
21818 XM
(double)SH
11 /Times-Roman AF
25693 XM
(are equivalent to)SH
10 /Courier AF
33298 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
13680 64811 MT
(A C enum is equivalent to a Modula-2 enumeration.)SH
13680 66739 MT
(A C fixed-size array is equivalent to a Modula-2 array with a lower bound of)SH
13680 68116 MT
(0; A C unbounded array is equivalent to a Modula-2)SH
10 /Courier AF
36958 XM
(@NOCOUNT)SH
11 /Times-Roman AF
42033 XM
(dynamic)SH
13680 69493 MT
(array or an open array parameter.)SH
13680 71421 MT
(A C pointer to a function is equivalent to a Modula-2 procedure type.)SH
ES
%%Page: 110 111
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(110)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
11 /Times-Roman AF
11520 7955 MT
(A C pointer is equivalent to a Modula-2)SH
10 /Courier AF
29362 XM
(@NOCHECK)SH
11 /Times-Roman AF
34437 XM
(or)SH
10 /Courier AF
35628 XM
(@C)SH
11 /Times-Roman AF
37103 XM
(pointer. If)
275 W( a C)SH
11520 9332 MT
(pointer points to an array, the best Modula-2 declaration may be a)SH
10 /Courier AF
40813 XM
(@NOCOUNT)SH
11 /Times-Roman AF
11520 10709 MT
(dynamic array variable or open array parameter.)SH
11520 12760 MT
(A C struct is mostly equivalent to a Modula-2 record.  However, C unions)SH
11520 14137 MT
(are a separate type constructor: the alignment of the union as a whole)SH
11520 15514 MT
(determines its alignment in a record, all unions start at the same location in)SH
11520 16891 MT
(the struct, and unions are padded at the end to satisfy their alignment.  The)SH
11520 18268 MT
(lay-out of a variant in Modula-2 is independent of the other variants, so)SH
11520 19645 MT
(you'll probably need to use some padding fields or)SH
10 /Courier AF
34157 XM
(@ALIGN)SH
11 /Times-Roman AF
38032 XM
(specifications.)SH
11520 21022 MT
(See Section 19.7.7, page 120 for an example translation.)SH
12 SS 
11520 25303 MT
(19.2. Pascal Data Representation)SH
11 SS 
11520 27344 MT
(Types that have a size smaller than one 32-bit word have an alignment equal)SH
11520 28721 MT
(to their size.  Larger types have an alignment of 32 bits.)SH
11520 30649 MT
(Types in the Titan Pascal compiler map directly into types in Modula-2,)SH
11520 32026 MT
(except that Titan Pascal's)SH
10 /Courier AF
23066 XM
(REAL)SH
11 /Times-Roman AF
25741 XM
(is equivalent to Modula-2's)SH
10 /Courier AF
38145 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
11520 33954 MT
(Types in Berkeley Pascal on the VAX map almost directly into types in)SH
11520 35331 MT
(Modula-2. This)
275 W( section mentions only exceptions.)SH
11520 37259 MT
(Pascal subranges with bounds inclusively in the range [-128..127] are)SH
11520 38636 MT
(allocated 8 bits; in the range [-32768..32767] are allocated 16 bits; otherwise)SH
11520 40013 MT
(32 bits.)SH
11520 41941 MT
(Pascal enumerations with up to 128 elements are allocated 8 bits; otherwise)SH
11520 43318 MT
(16 bits.)SH
11520 45246 MT
(Pascal's)SH
10 /Courier AF
15399 XM
(REAL)SH
11 /Times-Roman AF
18074 XM
(is equivalent to Modula-2)SH
10 /Courier AF
29684 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
11520 47174 MT
(Pascal lays out record fields in almost the same way as Modula-2.  However,)SH
11520 48551 MT
(all variants are given the alignment of the largest variant, hence all variants)SH
11520 49928 MT
(start at the same location in the record.)SH
11520 51979 MT
(The Pascal declaration:)SH
10 /Courier AF
14016 53634 MT
(type)SH
16416 54665 MT
(WeirdLayout = record)SH
18816 55696 MT
(case kind : char of)SH
18816 56727 MT
('c' : \050c)
SH( :)
1800 W( char\051;)SH
18816 57758 MT
('s' : \050i)
SH( :)
1800 W( integer;)SH
23016 58789 MT
(len :)
600 W( 0..127\051;)SH
16416 59820 MT
(end \050* WeirdLayout *\051;)SH
11 /Times-Roman AF
11520 61871 MT
(should be translated to Modula-2 as:)SH
10 /Courier AF
14016 63526 MT
(TYPE)SH
16416 64557 MT
(WeirdLayout = RECORD)SH
18816 65588 MT
(CASE kind : CHAR OF)SH
18816 66619 MT
(| 'c' : c)
SH( :)
1200 W( @ALIGN 32 CHAR;)SH
18816 67650 MT
(| 'i' : i)
SH( :)
1200 W( INTEGER;)SH
23616 68681 MT
(len : @SIZE 8 [0..127];)SH
18816 69712 MT
(END;)SH
16416 70743 MT
(END \050* WeirdLayout *\051;)SH
ES
%%Page: 111 112
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Pascal Data Representation)SH
46380 XM
(111)SH
12 /Times-Roman AF
13680 8023 MT
(19.3. External Names)SH
11 SS 
13680 10064 MT
(Each compiler generates a linker entry for each name that is accessible to)SH
13680 11441 MT
(other languages and for each name that is used to access variables or)SH
13680 12818 MT
(procedures implemented by other languages.  Such names are called)SH
13680 14195 MT
(``external names'' in this document.  Only procedures and global variable)SH
13680 15572 MT
(have external names; constants, types, and local variables are invisible to the)SH
13680 16949 MT
(linker. Modules)
275 W( don't have external names, but their initialization bodies do.)SH
13680 18877 MT
(Though the following sections describe how nested procedures are named,)SH
13680 20254 MT
(you should never reference nested procedures across languages.  Each)SH
13680 21631 MT
(language represents the stack frame display in different, incompatible, ways.)SH
12 SS 
13680 24826 MT
(19.3.1. Modula-2 External Names)SH
11 SS 
13680 26867 MT
(The linker has no notion of scope, so the hierarchical name space of)SH
13680 28244 MT
(Modula-2 is mapped to a flat name space.  The compiler creates an external)SH
13680 29621 MT
(name by prefixing a Modula-2 name with an underscore, and the names of all)SH
13680 30998 MT
(enclosing scopes \050modules and procedures\051 separated by underscores.  For)SH
13680 32375 MT
(example:)SH
10 /Courier AF
16176 34030 MT
(MODULE Outer;)SH
16176 35061 MT
(CONST)SH
18576 36092 MT
(MAXSIZE = 42;)SH
16176 37123 MT
(TYPE)SH
18576 38154 MT
(T = [0..MAXSIZE];)SH
16176 39185 MT
(VAR)SH
18576 40216 MT
(globalVar : CHAR;)SH
16176 41247 MT
(PROCEDURE Middle\050\051;)SH
18576 42278 MT
(MODULE InnerMod;)SH
20976 43309 MT
(PROCEDURE Inner\050\051;)SH
23376 44340 MT
(VAR internalVar : INTEGER;)SH
11 /Times-Roman AF
13680 46126 MT
(results in the external names:)SH
10 /Courier AF
16176 48046 MT
(_Outer_globalVar)SH
16176 49077 MT
(_Outer_Middle)SH
16176 50108 MT
(_Outer_Middle_InnerMod_Inner)SH
11 /Times-Roman AF
13680 52159 MT
(You can use)SH
10 /Courier AF
19391 XM
(@EXTERNAL)SH
11 /Times-Roman AF
25066 XM
(to declare global variables and procedures whose)SH
13680 53536 MT
(external names are not prefixed by scope names.  This is the common case)SH
13680 54913 MT
(for interfacing to C or Pascal.  For example:)SH
10 /Courier AF
16176 56568 MT
(DEFINITION MODULE unix;)SH
16176 57599 MT
(VAR)SH
18576 58630 MT
(@EXTERNAL errno : INTEGER;)SH
16176 60692 MT
(PROCEDURE @EXTERNAL close\050fildes : INTEGER\051 : INTEGER;)SH
11 /Times-Roman AF
13680 62478 MT
(results in the external names:)SH
10 /Courier AF
16176 64133 MT
(_errno)SH
16176 65164 MT
(_close)SH
11 /Times-Roman AF
13680 67092 MT
(If you don't like the C names because they don't fit your Modula-2 naming)SH
13680 68469 MT
(scheme, you can specify an external name for a procedure or global variable)SH
13680 69846 MT
(that is entirely unrelated to the name you use inside Modula-2:)SH
10 /Courier AF
16176 71501 MT
(DEFINITION MODULE UNIX;)SH
ES
%%Page: 112 113
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(112)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
/Courier SF
14016 7824 MT
(VAR)SH
16416 8855 MT
(errNo "errno": INTEGER;)SH
14016 9886 MT
(PROCEDURE Close "close"\050fildes : INTEGER\051 : INTEGER;)SH
11 /Times-Roman AF
11520 11672 MT
(results in the external names:)SH
10 /Courier AF
14016 13327 MT
(_errno)SH
14016 14358 MT
(_close)SH
11 /Times-Roman AF
11520 16286 MT
(You should declare all cross-language names in a definition module, whether)SH
11520 17663 MT
(they are used by Modula-2 to access other languages or vice-versa.)SH
/Times-Bold SF
11520 19591 MT
(Extension:)SH
/Times-Roman SF
16807 XM
(Controlling the external name of a procedure or variable is)SH
11520 20968 MT
(non-standard.)SH
12 SS 
11520 24163 MT
(19.3.2. C External Names)SH
11 SS 
11520 26204 MT
(C doesn't have nested modules or procedures, so no complicated mapping of)SH
11520 27581 MT
(names is needed.  Any C procedure or variable declared)SH
10 /Courier AF
36409 XM
(extern)SH
11 /Times-Roman AF
40284 XM
(has an)SH
11520 28958 MT
(underscore prepended:)SH
10 /Courier AF
14016 30613 MT
(extern int errno;)SH
14016 31644 MT
(extern int close\050\051;)SH
11 /Times-Roman AF
11520 33430 MT
(results in the external names:)SH
10 /Courier AF
14016 35085 MT
(_errno)SH
14016 36116 MT
(_close)SH
11 /Times-Roman AF
11520 38044 MT
(Thus the easiest way to access C from Modula-2 and vice-versa is to create a)SH
11520 39421 MT
(definition module in which each procedure and variable is declared)SH
10 /Courier AF
11520 40798 MT
(@EXTERNAL)SH
11 /Times-Roman AF
(, as in the Modula-2 example above.)SH
12 SS 
11520 43993 MT
(19.3.3. Pascal External Names)SH
11 SS 
11520 46034 MT
(Pascal also has a hierarchical name space, and performs a mapping similar to)SH
11520 47411 MT
(Modula-2. However,)
275 W( Pascal's procedures and global variables are not)SH
11520 48788 MT
(prefixed by the program name:)SH
10 /Courier AF
14016 50708 MT
(program Outer;)SH
14016 51739 MT
(const)SH
16416 52770 MT
(MAXSIZE = 42;)SH
14016 53801 MT
(type)SH
16416 54832 MT
(T = 0..MAXSIZE;)SH
14016 55863 MT
(var)SH
16416 56894 MT
(globalVar : CHAR;)SH
14016 57925 MT
(procedure Middle;)SH
16416 58956 MT
(procedure Inner\050\051;)SH
18816 59987 MT
(var internalVar : integer;)SH
11 /Times-Roman AF
11520 61773 MT
(results in the external names:)SH
10 /Courier AF
14016 63428 MT
(_globalVar)SH
14016 64459 MT
(_Middle)SH
14016 65490 MT
(_Middle_Inner)SH
11 /Times-Roman AF
11520 67541 MT
(As with C, the easiest way to access Pascal from Modula-2 and vice-versa is)SH
11520 68918 MT
(to create a definition module in which each procedure and variable is)SH
11520 70295 MT
(declared)SH
10 /Courier AF
15519 XM
(@EXTERNAL)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 113 114
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(External Names)SH
46380 XM
(113)SH
12 /Times-Roman AF
13680 8023 MT
(19.4. Calling Sequences)SH
11 SS 
13680 10064 MT
(The Modula-2 calling sequence for global procedures is mostly compatible)SH
13680 11441 MT
(with the calling sequences of C and Berkeley Pascal.)SH
13680 13369 MT
(\050The following sections refer to ``pushing parameters onto the stack.''  On)SH
13680 14746 MT
(the Titan and MIPS, parameters are often passed in registers, but)SH
13680 16123 MT
(conceptually this works out to the same thing.\051)SH
13680 18051 MT
(In all languages parameters are pushed onto the stack in reverse order: the)SH
13680 19428 MT
(rightmost parameter is pushed first, and the leftmost parameter is pushed last.)SH
13680 20805 MT
(All languages always pass a minimum of one 32-bit word, regardless of the)SH
13680 22182 MT
(size of the argument.)SH
13680 24110 MT
(The major differences between the calling sequences relate to the passing of)SH
13680 25487 MT
(multiword value parameters, floating-point parameters, and function return)SH
13680 26864 MT
(values.)SH
12 SS 
13680 30059 MT
(19.4.1. Modula-2 Calling Sequence)SH
11 SS 
13680 32100 MT
(Modula-2 passes)SH
10 /Courier AF
21378 XM
(VAR)SH
11 /Times-Roman AF
23453 XM
(parameters by pushing the address of the variable, and)SH
13680 33477 MT
(sometimes additional information:)SH
6 /Symbol AF
15879 35428 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(An open array)SH
10 /Courier AF
22995 XM
(VAR)SH
11 /Times-Roman AF
25070 XM
(parameter pushes the address of the array)SH
16430 36805 MT
(variable. Unless)
275 W( it is a)SH
10 /Courier AF
26725 XM
(@NOCOUNT)SH
11 /Times-Roman AF
31800 XM
(array it also pushes the)SH
16430 38182 MT
(number of elements in each dimension.)SH
6 /Symbol AF
15879 40110 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A subarray)SH
10 /Courier AF
21560 XM
(VAR)SH
11 /Times-Roman AF
23635 XM
(parameter pushes the address of the array slice,)SH
16430 41487 MT
(and the number of elements and stride for each dimension.)SH
6 /Symbol AF
15879 43415 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A dynamic array)SH
10 /Courier AF
24095 XM
(VAR)SH
11 /Times-Roman AF
26170 XM
(parameters pushes the address of the)SH
16430 44792 MT
(dynamic array descriptor \050described in Section 18.2.12, page)SH
16430 46169 MT
(101\051. It)
275 W( does not push the values in the descriptor.)SH
13680 48220 MT
(Modula-2 passes)SH
10 /Courier AF
21378 XM
(CONST)SH
11 /Times-Roman AF
24653 XM
(parameters either by pushing the address of the)SH
13680 49597 MT
(expression or by pushing the value of the expression, depending upon the)SH
13680 50974 MT
(parameter type and size.)SH
6 /Symbol AF
15879 53025 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A)SH
10 /Courier AF
17499 XM
(CONST)SH
11 /Times-Roman AF
20774 XM
(parameter that is a scalar type, including)SH
10 /Courier AF
38856 XM
(REAL)SH
11 /Times-Roman AF
41531 XM
(and)SH
10 /Courier AF
16430 54402 MT
(LONGREAL)SH
11 /Times-Roman AF
(, pushes the expression value.  A)SH
10 /Courier AF
35923 XM
(LONGREAL)SH
11 /Times-Roman AF
16430 55779 MT
(parameter pushes two words.)SH
6 /Symbol AF
15879 57707 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A pointer)SH
10 /Courier AF
20890 XM
(CONST)SH
11 /Times-Roman AF
24165 XM
(parameter pushes the expression value.)SH
6 /Symbol AF
15879 59635 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A record)SH
10 /Courier AF
20582 XM
(CONST)SH
11 /Times-Roman AF
23857 XM
(parameter pushed the expression value if the)SH
16430 61012 MT
(record is one word or less, otherwise it pushes the address of the)SH
16430 62389 MT
(expression.)SH
6 /Symbol AF
15879 64317 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A set)SH
10 /Courier AF
18996 XM
(CONST)SH
11 /Times-Roman AF
22271 XM
(parameter pushed the expression value if the set is)SH
16430 65694 MT
(one word or less, otherwise it pushes the address of the)SH
16430 67071 MT
(expression.)SH
6 /Symbol AF
15879 68999 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A fixed-size array)SH
10 /Courier AF
24643 XM
(CONST)SH
11 /Times-Roman AF
27918 XM
(parameter always pushes the address)SH
16430 70376 MT
(of the expression, regardless of the size of the array.)SH
ES
%%Page: 114 115
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(114)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
6 /Symbol AF
13719 7955 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(A dynamic array)SH
10 /Courier AF
21935 XM
(CONST)SH
11 /Times-Roman AF
25210 XM
(parameter pushes the descriptor value if)SH
14270 9332 MT
(it is one word \050that is, if it is a)SH
10 /Courier AF
27745 XM
(@NOCOUNT)SH
11 /Times-Roman AF
32820 XM
(dynamic array\051.)SH
14270 10709 MT
(Otherwise it pushes the address of the descriptor expression.)SH
6 /Symbol AF
13719 12637 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(An open array)SH
10 /Courier AF
20835 XM
(CONST)SH
11 /Times-Roman AF
24110 XM
(parameter pushes the address of the array)SH
14270 14014 MT
(variable. Unless)
275 W( it is a)SH
10 /Courier AF
24565 XM
(@NOCOUNT)SH
11 /Times-Roman AF
29640 XM
(array it also pushes the)SH
14270 15391 MT
(number of elements in each dimension.)SH
6 /Symbol AF
13719 17319 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(A subarray)SH
10 /Courier AF
19400 XM
(CONST)SH
11 /Times-Roman AF
22675 XM
(parameter pushes the address of the array)SH
14270 18696 MT
(slice, and the number of elements and stride for each dimension.)SH
11520 20647 MT
(Modula-2 passes value parameters exactly the same way that it passes)SH
10 /Courier AF
42583 XM
(CONST)SH
11 /Times-Roman AF
11520 22024 MT
(parameters. However,)
275 W( if a value parameter pushes an address the procedure)SH
11520 23401 MT
(makes a local copy, so the semantics of value parameters are maintained.)SH
11520 24778 MT
(\050Note that)SH
10 /Courier AF
16224 XM
(@NOCOUNT)SH
11 /Times-Roman AF
21299 XM
(arrays and subarrays cannot be passed by value.\051)SH
11520 26706 MT
(The function return value, if any, is in the appropriate register\050s\051 upon)SH
11520 28083 MT
(procedure return.  On the VAX, this is register r0 \050and r1, if the function)SH
11520 29460 MT
(returns a)SH
10 /Courier AF
15612 XM
(LONGREAL)SH
11 /Times-Roman AF
(\051. On)
275 W( the Titan, I don't know, and you probably don't)SH
11520 30837 MT
(need to either.  On the MIPS, the return value is in register r2 \050or register f0)SH
11520 32214 MT
(for)SH
10 /Courier AF
13077 XM
(REAL)SH
11 /Times-Roman AF
15752 XM
(and)SH
10 /Courier AF
17615 XM
(LONGREAL)SH
11 /Times-Roman AF
22690 XM
(results\051.)SH
11520 34142 MT
(The rules for value parameters are used to determine whether a return value)SH
11520 35519 MT
(is the expression value or the address of the expression.  If a return value)SH
11520 36896 MT
(returns the address of an expression, the calling procedure automatically)SH
11520 38273 MT
(copies the data someplace safe immediately after the call.)SH
12 SS 
11520 41468 MT
(19.4.2. C Calling Sequence)SH
11 SS 
11520 43509 MT
(C has one parameter passing mechanism: pass-by-value.  But since you can)SH
11520 44886 MT
(take the address of any variable, you can simulate the effects of Modula-2)SH
10 /Courier AF
11520 46263 MT
(VAR)SH
11 /Times-Roman AF
13595 XM
(parameters.)SH
11520 48191 MT
(A C array is mostly synonymous with a C pointer; passing an array passes)SH
11520 49568 MT
(the address of the array.)SH
11520 51496 MT
(Structs are passed on the stack, regardless of size.  This makes it impossible)SH
11520 52873 MT
(for Modula-2 to directly call a C routine with a multiword pass-by-value)SH
11520 54250 MT
(struct parameter.  If you need to call such a routine, see the example in)SH
11520 55627 MT
(Section 19.7.8, page 121.)SH
11520 57555 MT
(Floats are always cast to doubles, hence any C floating-point expression)SH
11520 58932 MT
(pushes two words.)SH
11520 60860 MT
(The function return value, if any, is in the appropriate registers \050see Section)SH
11520 62237 MT
(19.4.1, page 114\051.  If the C routine is declared to return a struct, the returned)SH
11520 63614 MT
(value is the address of the return expression and the calling procedure)SH
11520 64991 MT
(automatically copies the data someplace save immediately after the call.)SH
11520 66368 MT
(This applies even to one-word structs.)SH
ES
%%Page: 115 116
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Calling Sequences)SH
46380 XM
(115)SH
12 /Times-Roman AF
13680 8023 MT
(19.4.3. Pascal Calling Sequence)SH
11 SS 
13680 10064 MT
(Titan Pascal has a calling sequence identical to Modula-2, except that the)SH
13680 11441 MT
(Pascal type)SH
10 /Courier AF
18934 XM
(REAL)SH
11 /Times-Roman AF
21609 XM
(is equivalent to Modula-2's)SH
10 /Courier AF
34013 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
13680 13369 MT
(Berkeley Pascal passes)SH
10 /Courier AF
24095 XM
(VAR)SH
11 /Times-Roman AF
26170 XM
(parameters by pushing the address of the)SH
13680 14746 MT
(variable.)SH
13680 16674 MT
(Pascal passes value parameters by pushing the value of the expression,)SH
13680 18051 MT
(regardless of type or size.  It is thus impossible for Modula-2 to directly call)SH
13680 19428 MT
(a Pascal routine with a multiword set, array, or record value parameter.)SH
13680 21356 MT
(To get around this problem, you can write a Pascal ``jacket'' routine, which)SH
13680 22733 MT
(is declared with a)SH
10 /Courier AF
21682 XM
(VAR)SH
11 /Times-Roman AF
23757 XM
(parameter, and in turn calls the real Pascal routine.)SH
13680 24661 MT
(\050Also note that the type)SH
10 /Courier AF
24281 XM
(REAL)SH
11 /Times-Roman AF
26956 XM
(in Pascal is double-precision, and is identical)SH
13680 26038 MT
(to Modula-2's type)SH
10 /Courier AF
22387 XM
(LONGREAL)SH
11 /Times-Roman AF
(. So)
275 W( Pascal)SH
10 /Courier AF
32534 XM
(REAL)SH
11 /Times-Roman AF
35209 XM
(value parameters push two)SH
13680 27415 MT
(words.\051)SH
13680 29343 MT
(The function return value, if any, is in the appropriate registers \050see Section)SH
13680 30720 MT
(19.4.1, page 114\051.  Pascal does not allow functions that return structures.)SH
12 SS 
13680 35001 MT
(19.5. Module Initialization)SH
11 SS 
13680 37042 MT
(Each module \050unless declared)SH
10 /Courier AF
27118 XM
(@NOINIT)SH
11 /Times-Roman AF
(\051 has an initialization procedure.  The)SH
13680 38419 MT
(initialization procedure for module)SH
10 /Courier AF
29320 XM
(X)SH
11 /Times-Roman AF
30195 XM
(is called)SH
10 /Courier AF
34105 XM
(X__init)SH
11 /Times-Roman AF
38580 XM
(\050)SH
10 /Courier AF
(X)SH
11 /Times-Roman AF
(, two underscores,)SH
10 /Courier AF
13680 39796 MT
(init)SH
11 /Times-Roman AF
(\051 and has no parameters.  A module's initialization procedure is called)SH
13680 41173 MT
(when the program starts up, and may be called more than once \050e.g., if)SH
13680 42550 MT
(several modules import it\051.  The Modula-2 compiler generates code so that an)SH
13680 43927 MT
(initialization procedure executes its body only once, even though it is called)SH
13680 45304 MT
(more than once.  If you implement an initialization procedure for a C or)SH
13680 46681 MT
(Pascal ``module,'' you need to do the same thing. For example:)SH
10 /Courier AF
16176 48336 MT
(static X__initflag = 0;)SH
16176 49367 MT
(X__init\050\051 {)SH
18576 50398 MT
(if \050! X__initflag\051 {)SH
20976 51429 MT
(X__initflag = 1;)SH
20976 52460 MT
(/* Calls to initialization procedures of every)SH
22776 53491 MT
(module that X imports */)SH
20976 54522 MT
(/* Module initialization code */)SH
18576 55553 MT
(})SH
16176 56584 MT
(})SH
11 /Times-Roman AF
13680 58512 MT
(The initialization procedure for a program module \050one that is neither a)SH
13680 59889 MT
(definition module nor an implementation module\051 is the main program.  No)SH
13680 61266 MT
(matter what you call the program module, the initialization body is called)SH
10 /Courier AF
13680 62643 MT
(main)SH
11 /Times-Roman AF
16355 XM
(so that UNIX can execute it.)SH
ES
%%Page: 116 117
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(116)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
12 /Times-Roman AF
11520 8023 MT
(19.6. Runtime Initialization)SH
11 SS 
11520 10064 MT
(If you use a Modula-2 procedure or variable from a C or Pascal or assembly)SH
11520 11441 MT
(language program \050that is, if your main program is not a Modula-2 program\051,)SH
11520 12818 MT
(you must ensure that the Modula-2 runtime system gets started and then that)SH
11520 14195 MT
(the initialization procedures of the imported modules get invoked before)SH
11520 15572 MT
(procedures within are called or data within is accessed.  If you use Pascal)SH
11520 16949 MT
(procedures or data, you must also initialize Pascal's runtime system, and)SH
11520 18326 MT
(should cleanly shut down its runtime as well.  To initialize the Modula-2 and)SH
11520 19703 MT
(Pascal runtime systems, use the template:)SH
10 /Courier AF
14016 21623 MT
(/* Pascal runtime */)SH
14016 22654 MT
(extern void PCSTART\050\051;)SH
14016 23685 MT
(extern void PCEXIT\050\051;)SH
14016 25747 MT
(/* Modula-2 runtime */)SH
14016 26778 MT
(extern void runtime__init\050\051;)SH
14016 27809 MT
(extern void X__init\050\051, Y__init\050\051, Z__init\050\051;)SH
14016 29871 MT
(main\050argc, argv, envp\051)SH
14016 30902 MT
(int argc; char *argv[], *envp[];)SH
14016 31933 MT
({)SH
16416 32964 MT
(runtime__init\050argc, argv, envp\051)SH
16416 33995 MT
(PCSTART\0500\051;)SH
16416 35026 MT
(X__init\050\051;)SH
16416 36057 MT
(Y__init\050\051;)SH
16416 37088 MT
(Z__init\050\051;)SH
16416 38119 MT
(/* Main program code goes here */)SH
16416 39150 MT
(PCEXIT\0500\051;)SH
14016 40181 MT
(})SH
11 /Times-Roman AF
11520 42232 MT
(where)SH
10 /Courier AF
14481 XM
(arg)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
16831 XM
(argv)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
21644 XM
(envp)SH
11 /Times-Roman AF
24319 XM
(are the arguments passed to the main program)SH
11520 43609 MT
(by UNIX; and)SH
10 /Courier AF
18087 XM
(X)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
19237 XM
(Y)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
22250 XM
(Z)SH
11 /Times-Roman AF
23125 XM
(are modules with routines or data accessed by the)SH
11520 44986 MT
(main program.)SH
12 SS 
11520 49267 MT
(19.7. Example Modula-2 Interfaces to C)SH
11520 52462 MT
(19.7.1. Conditional Compilation)SH
11 SS 
11520 54503 MT
(See Chapter 17, page 95 for a description of the Modula-2 preprocessor.)SH
12 SS 
11520 57698 MT
(19.7.2. Include Files)SH
11 SS 
11520 59739 MT
(The preprocessor command)SH
10 /Courier AF
24011 XM
(#include)SH
11 /Times-Roman AF
29086 XM
(is usually used to include a C)SH
10 /Courier AF
42255 XM
(.h)SH
11 /Times-Roman AF
43730 XM
(file)SH
11520 61116 MT
(\050henceforth called a ``header''\051, which is a poor man's definition module.)SH
11520 62493 MT
(You should translate such an)SH
10 /Courier AF
24503 XM
(#include)SH
11 /Times-Roman AF
29578 XM
(to an)SH
10 /Courier AF
32022 XM
(IMPORT)SH
11 /Times-Roman AF
35897 XM
(declaration.)SH
11520 64421 MT
(Most C headers can only be included once, so many headers which need)SH
11520 65798 MT
(definitions from other headers don't include those files; instead, the)SH
10 /Courier AF
41549 XM
(.c)SH
11 /Times-Roman AF
43024 XM
(file)SH
11520 67175 MT
(must include not only the headers it needs, but also any headers that the)SH
11520 68552 MT
(included headers need.  And any that they need,)SH
/Times-Italic SF
32869 XM
(ad frustratum)SH
/Times-Roman SF
(.)SH
11520 70480 MT
(Modula-2 makes all such dependencies explicit.  When you translate headers)SH
11520 71857 MT
(you should import whatever you need into the definition module.)SH
ES
%%Page: 117 118
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Example Modula-2 Interfaces to C)SH
46380 XM
(117)SH
11 /Times-Roman AF
13680 7955 MT
(If file)SH
10 /Courier AF
16428 XM
(time.h)SH
11 /Times-Roman AF
20303 XM
(contains:)SH
10 /Courier AF
16176 9610 MT
(typedef struct {)SH
18576 10641 MT
(int year,)SH
20976 11672 MT
(day, /*)
5400 W( 0 to 365 */)SH
20976 12703 MT
(hour, /*)
4800 W( 0 to  23 */)SH
20976 13734 MT
(minute, /*)
3600 W( 0 to  59 */)SH
20976 14765 MT
(second, /*)
3600 W( 0 to  59 */)SH
20976 15796 MT
(millisecond /*)
1200 W( 0 to 999 */)SH
16176 16827 MT
(} Time;)SH
11 /Times-Roman AF
13680 18613 MT
(and file)SH
10 /Courier AF
17284 XM
(timeconvert.h)SH
11 /Times-Roman AF
25359 XM
(contains:)SH
10 /Courier AF
16176 20268 MT
(SecondsSince70ToTime \050long)
600 W( /*)
1200 W( seconds */,)SH
29976 21299 MT
(Time* /*)
600 W( time)
SH( */\051;)1800 W
16176 22330 MT
(SecondsSince70ToString\050long /*)
1200 W( seconds */,)SH
29976 23361 MT
(char* */)
600 W( str)
SH( */\051;)2400 W
11 /Times-Roman AF
13680 25147 MT
(then the client program)SH
10 /Courier AF
24188 XM
(usetime.c)SH
11 /Times-Roman AF
(, which wants to convert seconds to a)SH
13680 26524 MT
(string must include the header)SH
10 /Courier AF
27213 XM
(time.h)SH
11 /Times-Roman AF
31088 XM
(though the client has no need for the)SH
13680 27901 MT
(header file itself:)SH
10 /Courier AF
16176 29556 MT
(#include "time.h")SH
16176 30587 MT
(#include "timeconvert.h")SH
16176 31618 MT
(...)SH
11 /Times-Roman AF
13680 33669 MT
(This should be translated to Modula-2 as follows:  File)SH
10 /Courier AF
38062 XM
(time.def)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
16176 35324 MT
(DEFINITION MODULE time;)SH
16176 36355 MT
(TYPE)SH
18576 37386 MT
(Time = RECORD)SH
20976 38417 MT
(year :)
4200 W( INTEGER;)SH
20976 39448 MT
(day :)
4800 W( [0..365];)SH
20976 40479 MT
(hour :)
4200 W( [0.. 23];)SH
20976 41510 MT
(minute :)
3000 W( [0.. 59];)SH
20976 42541 MT
(second :)
3000 W( [0.. 59];)SH
20976 43572 MT
(millisecond : [0..999];)SH
18576 44603 MT
(END \050* Time *\051;)SH
16176 45634 MT
(END time.)SH
11 /Times-Roman AF
13680 47685 MT
(File)SH
10 /Courier AF
15667 XM
(timeconvert.def)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
16176 49340 MT
(DEFINITION MODULE timeconvert;)SH
16176 50371 MT
(PROCEDURE @EXTERNAL SecondsSince70ToTime\050)SH
18576 51402 MT
(CONST seconds : UNSIGNED;)SH
18576 52433 MT
(VAR time)
1200 W( :)
1800 W( Time\051;)SH
16176 54495 MT
(PROCEDURE @EXTERNAL SecondsSince70ToString\050)SH
18576 55526 MT
(CONST seconds : UNSIGNED;)SH
18576 56557 MT
(VAR str)
1200 W( :)
2400 W( ARRAY @NOCOUNT OF CHAR\051;)SH
16176 57588 MT
(END timeconvert.)SH
11 /Times-Roman AF
13680 59639 MT
(File)SH
10 /Courier AF
15667 XM
(usetime.mod)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
16176 61294 MT
(MODULE usetime;)SH
16176 62325 MT
(FROM timeconvert IMPORT SecondsSince70ToString;)SH
16176 63356 MT
(...)SH
ES
%%Page: 118 119
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(118)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
12 /Times-Roman AF
11520 8023 MT
(19.7.3. Constant #defines)SH
11 SS 
11520 10064 MT
(The preprocess directive)SH
10 /Courier AF
22605 XM
(#define)SH
11 /Times-Roman AF
27080 XM
(is often used in the same way that you use)SH
10 /Courier AF
11520 11441 MT
(CONST)SH
11 /Times-Roman AF
14795 XM
(in Modula-2.)SH
11520 13369 MT
(The C code:)SH
10 /Courier AF
14016 15024 MT
(#define HEIGTH)
600 W( 24)1200 W
14016 16055 MT
(#define WIDTH  80)600 W
14016 17086 MT
(#define FILENAME)
600 W( "/usr/local/lib/rary")SH
11 /Times-Roman AF
11520 18872 MT
(becomes)SH
10 /Courier AF
14016 20527 MT
(CONST)SH
16416 21558 MT
(HEIGTH =)
1200 W( 24;)SH
16416 22589 MT
(WIDTH =)
1800 W( 80;)SH
16416 23620 MT
(FILENAME = "/usr/local/lib/rary";)SH
12 /Times-Roman AF
11520 26815 MT
(19.7.4. Enumeration #defines)SH
11 SS 
11520 28856 MT
(Since some implementations of C don't support enumerations, and the ones)SH
11520 30233 MT
(that do treat them inconsistently, many C programs use)SH
10 /Courier AF
36084 XM
(#define)SH
11 /Times-Roman AF
40559 XM
(directives)SH
11520 31610 MT
(rather than enumerations.  You can recognize this idiom easily.  The C code:)SH
10 /Courier AF
14016 33265 MT
(#define RED)
600 W( 0)1200 W
14016 34296 MT
(#define GREEN)
600 W( \050RED + 1\051)SH
14016 35327 MT
(#define BLUE \050BLUE)
600 W( + 1\051)SH
11 /Times-Roman AF
11520 37113 MT
(\050sometimes written as\051)SH
10 /Courier AF
14016 38768 MT
(#define RED)
600 W( 0)1200 W
14016 39799 MT
(#define GREEN)
600 W( 1)SH
14016 40830 MT
(#define BLUE 2)600 W
11 /Times-Roman AF
11520 42616 MT
(becomes)SH
10 /Courier AF
14016 44271 MT
(TYPE)SH
16416 45302 MT
(Color = \050RED, GREEN, BLUE\051;)SH
11 /Times-Roman AF
11520 47230 MT
(Remember that you can specify the ordinal value for enumerated type)SH
11520 48607 MT
(constants. Whenever)
275 W( you can figure out that a group of constants are related)SH
11520 49984 MT
(and should not be mixed with other integers you should declare them in a)SH
11520 51361 MT
(Modula-2 enumeration.  The C code:)SH
10 /Courier AF
14016 53016 MT
(#define REDLENGTH)
600 W( 700)1200 W
14016 54047 MT
(#define GREENLENGTH)
600 W( 560)SH
14016 55078 MT
(#define BLUELENGTH 410)600 W
11 /Times-Roman AF
11520 56864 MT
(becomes)SH
10 /Courier AF
14016 58519 MT
(TYPE)SH
16416 59550 MT
(WaveLength = \050REDLENGTH = 700, GREENLENGTH = 560, BLUELENGTH = 410\051;)SH
12 /Times-Roman AF
11520 62745 MT
(19.7.5. Bit Mask #defines)SH
11 SS 
11520 64786 MT
(Bit masks must be constructed by hand in C. You should usually translate)SH
11520 66163 MT
(masks into sets.  The C code:)SH
10 /Courier AF
14016 67818 MT
(#define REDMASK)
600 W( \0501)
1200 W( << RED\051)SH
14016 68849 MT
(#define BLUEMASK \0501)
600 W( << BLUE\051)SH
14016 69880 MT
(#define GREENMASK)
600 W( \0501 << GREEN\051)SH
14016 70911 MT
(...)SH
14016 71942 MT
(mask = REDMASK | GREENMASK;)SH
ES
%%Page: 119 120
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Example Modula-2 Interfaces to C)SH
46380 XM
(119)SH
11 /Times-Roman AF
13680 7955 MT
(\050sometimes the constants are written as\051)SH
10 /Courier AF
16176 9610 MT
(#define REDMASK)
600 W( 0x1)1200 W
16176 10641 MT
(#define BLUEMASK 0x2)600 W
16176 11672 MT
(#define GREENMASK)
600 W( 0x4)SH
11 /Times-Roman AF
13680 13458 MT
(becomes)SH
10 /Courier AF
16176 15113 MT
(TYPE)SH
18576 16144 MT
(ColorSet = SET OF Color;)SH
16176 17175 MT
(...)SH
16176 18206 MT
(mask := ColorSet{RED, GREEN};)SH
12 /Times-Roman AF
13680 21401 MT
(19.7.6. Procedure #defines)SH
11 SS 
13680 23442 MT
(C programmers use the)SH
10 /Courier AF
24188 XM
(#define)SH
11 /Times-Roman AF
28663 XM
(directive with parameters to create a)SH
13680 24819 MT
(procedure-like abbreviation for a sequence of code.  The closest equivalent in)SH
13680 26196 MT
(Modula-2 is an inline procedure definition \050see Section 12.3, page 61\051.  The)SH
13680 27573 MT
(differences between macro definitions and inline procedures are:)SH
6 /Symbol AF
15879 29524 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A macro definition does direct text substitution for parameters,)SH
16430 30901 MT
(so a parameter is evaluated at each use in the definition.  An)SH
16430 32278 MT
(inline procedure evaluates parameters once at the call.)SH
6 /Symbol AF
15879 34206 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(A macro does not type-check its parameters, so you can write)SH
16430 35583 MT
(one definition that operates on integers and reals.  An inline)SH
16430 36960 MT
(procedure type-checks parameters, and so a given macro may)SH
16430 38337 MT
(translate into two or more inline procedures.)SH
6 /Symbol AF
15879 40265 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(You define a macro wholly within a)SH
10 /Courier AF
32589 XM
(.h)SH
11 /Times-Roman AF
34064 XM
(file. If)
275 W( you put an inline)SH
16430 41642 MT
(procedure heading in a definition module, you define the)SH
16430 43019 MT
(procedure body in the corresponding implementation module.)SH
6 /Symbol AF
15879 44947 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Macros may be used on the left side of an assignment statement)SH
16430 46324 MT
(if the substituted text is valid as an ``l-value.''  Such macros)SH
16430 47701 MT
(cannot be literally translated, as inline functions always return an)SH
16430 49078 MT
(expression value \050``r-value''\051.)SH
6 /Symbol AF
15879 51006 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(An inline function often generates stupider code than the)SH
16430 52383 MT
(corresponding macro definition.)SH
13680 54334 MT
(When translating macros to inline procedure you should declare all)SH
13680 55711 MT
(parameters either)SH
10 /Courier AF
21558 XM
(CONST)SH
11 /Times-Roman AF
24833 XM
(or)SH
10 /Courier AF
26024 XM
(VAR)SH
11 /Times-Roman AF
(. Note)
275 W( that you don't need to pass in)SH
13680 57088 MT
(arguments that are only used for temporary values; just declare a local)SH
13680 58465 MT
(variable in the inline procedure.)SH
13680 60393 MT
(The C macro definitions:)SH
10 /Courier AF
16176 62048 MT
(#define Sqr\050x\051)
600 W( \050\050x\051*\050x\051\051)SH
16176 63079 MT
(#define DeepField\050p\051)
600 W( \050\050p\051->fp->i\051)SH
11 /Times-Roman AF
13680 64865 MT
(when used like:)SH
10 /Courier AF
16176 66520 MT
(int i;)SH
16176 67551 MT
(float x;)SH
16176 68582 MT
(Deep p;)SH
16176 69613 MT
(...)SH
16176 70644 MT
(i = Sqr\050i\051;)SH
16176 71675 MT
(x = Sqr\050x\051;)SH
ES
%%Page: 120 121
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(120)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
/Courier SF
14016 7824 MT
(i = DeepField\050p\051;)SH
14016 8855 MT
(DeepField\050p\051 = i;)SH
11 /Times-Roman AF
11520 10641 MT
(become)SH
10 /Courier AF
14016 12296 MT
(PROCEDURE @INLINE SqrInteger\050CONST i : INTEGER\051 : INTEGER;)SH
14016 13327 MT
(BEGIN RETURN i*i END SqrInteger;)SH
14016 15389 MT
(PROCEDURE @INLINE SqrReal\050CONST x : REAL\051 : REAL;)SH
14016 16420 MT
(BEGIN RETURN x*x END SqrReal;)SH
14016 18482 MT
(PROCEDURE @INLINE DeepField\050CONST p : Deep\051 : INTEGER;)SH
14016 19513 MT
(BEGIN RETURN p^.fp^.i END DeepField;)SH
14016 21575 MT
(PROCEDURE @INLINE SetDeepField\050CONST p : Deep; CONST i : INTEGER\051;)SH
14016 22606 MT
(BEGIN p^.fp^.i := i END SetDeepField;)SH
12 /Times-Roman AF
11520 25801 MT
(19.7.7. Typedefs)SH
11 SS 
11520 27842 MT
(Most C type declarations translate to an obvious Modula-2 analog, as noted)SH
11520 29219 MT
(in Section 19.1, page 109.)SH
11520 31147 MT
(You should map unions into variant records, but be careful of alignment)SH
11520 32524 MT
(rules. In)
275 W( C all unions in a record have the same alignment and starting offset,)SH
11520 33901 MT
(and are padded out to the common alignment.  In Modula-2 each variant part)SH
11520 35278 MT
(is independent, and starts as close to the tag field as possible.)SH
11520 37206 MT
(The C declaration:)SH
10 /Courier AF
14016 38861 MT
(typedef struct {)SH
16416 39892 MT
(char kind;)
SH( /*)
12600 W( byte offset  0 */)SH
16416 40923 MT
(union {)
SH( /*)
4800 W( kind */)SH
18816 41954 MT
(char c;)
SH( /*)
2400 W( 'c'  */)
SH( /*)
3000 W( byte offset  8 */)SH
18816 42985 MT
(struct {)
SH( /*)
1800 W( 'i'  */)SH
21216 44016 MT
(int i;)
600 W( /*)
9600 W( byte offset  8 */)SH
21216 45047 MT
(unsigned char len;)
SH( /*)
3000 W( byte offset 12 */)SH
18816 46078 MT
(} s2;)SH
16416 47109 MT
(} u1;)SH
16416 48140 MT
(char x;)
SH( /*)
14400 W( byte offset 16 */)SH
14016 49171 MT
(} WeirdLayout;)SH
11 /Times-Roman AF
11520 50957 MT
(should be translated to Modula-2 as:)SH
10 /Courier AF
14016 52612 MT
(TYPE)SH
16416 53643 MT
(WeirdLayout = RECORD)SH
18816 54674 MT
(CASE kind : CHAR OF)SH
18816 55705 MT
(| 'c' : c)
SH( :)
1200 W( @ALIGN 32 CHAR;)SH
18816 56736 MT
(| 'i' : i)
SH( :)
1200 W( INTEGER;)SH
23616 57767 MT
(len : @SIZE 8 [0..255];)SH
18816 58798 MT
(END;)SH
18816 59829 MT
(x : @ALIGN 32 CHAR;)SH
16416 60860 MT
(END \050* WeirdLayout *\051;)SH
11 /Times-Roman AF
11520 62788 MT
(Also remember, whenever possible, to use dynamic arrays instead of)SH
11520 64165 MT
(pointers, subranges instead of)SH
10 /Courier AF
24869 XM
(INTEGER)SH
11 /Times-Roman AF
29344 XM
(or)SH
10 /Courier AF
30535 XM
(CHAR)SH
11 /Times-Roman AF
(, and sets instead of masks.)SH
ES
%%Page: 121 122
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Example Modula-2 Interfaces to C)SH
46380 XM
(121)SH
12 /Times-Roman AF
13680 8023 MT
(19.7.8. Procedures and Parameters)SH
11 SS 
13680 10064 MT
(Most C procedure headers translate easily into Modula-2, as noted in Section)SH
13680 11441 MT
(19.4.2, page 114.  Remember to declare the procedure)SH
10 /Courier AF
37777 XM
(@EXTERNAL)SH
11 /Times-Roman AF
43452 XM
(or give)SH
13680 12818 MT
(the procedure an external name, as described in Section 19.3.1, page 111.)SH
13680 14746 MT
(Since C passes all structure parameters on the stack, Modula-2 cannot call a)SH
13680 16123 MT
(C procedure that takes a multiword pass-by-value struct parameter.  You)SH
13680 17500 MT
(must write a C jacket routine instead.  You declare the jacket routine with a)SH
13680 18877 MT
(pointer-to-struct parameter to satisfy Modula-2; the body of the jacket in turn)SH
13680 20254 MT
(calls the real C routine using C calling conventions.  The Modula-2 interface)SH
13680 21631 MT
(to this jacket procedure is defined with a)SH
10 /Courier AF
31824 XM
(CONST)SH
11 /Times-Roman AF
35099 XM
(parameter, which pushes the)SH
13680 23008 MT
(address of the large structure onto the stack.)SH
13680 24936 MT
(For example, to call the C procedure)SH
10 /Courier AF
30052 XM
(HardToCallCRoutine)SH
11 /Times-Roman AF
(:)SH
10 /Courier AF
16176 26591 MT
(typedef struct {)SH
18576 27622 MT
(int i;)SH
18576 28653 MT
(float f;)SH
16176 29684 MT
(} BigStruct;)SH
16176 31746 MT
(HardToCallCRoutine\050p\051)SH
17376 32777 MT
(BigStruct p;)SH
16176 33808 MT
({...})SH
11 /Times-Roman AF
13680 35594 MT
(you can create the jacket routine)SH
10 /Courier AF
16176 37249 MT
(EasyToCallCRoutine\050p\051)SH
18576 38280 MT
(BigStruct *p;)SH
16176 39311 MT
({)SH
18576 40342 MT
(HardToCallCRoutine\050*p\051;)SH
16176 41373 MT
(})SH
11 /Times-Roman AF
13680 43159 MT
(and then create a definition file)SH
10 /Courier AF
16176 44814 MT
(DEFINITION MODULE CInterface;)SH
16176 45845 MT
(TYPE)SH
18576 46876 MT
(BigStruct = RECORD)SH
20976 47907 MT
(i : INTEGER;)SH
20976 48938 MT
(f : REAL;)SH
18576 49969 MT
(END \050* BigStruct *\051;)SH
16176 51000 MT
(PROCEDURE @EXTERNAL EasyToCallCRoutine\050CONST p : BigStruct\051;)SH
16176 52031 MT
(END CInterface;)SH
11 /Times-Roman AF
13680 54082 MT
(Remember to watch out for the automatic casting of float to double;)SH
/Times-Italic SF
43862 XM
(never)SH
/Times-Roman SF
13680 55459 MT
(declare a)SH
10 /Courier AF
17892 XM
(REAL)SH
11 /Times-Roman AF
20567 XM
(parameter in a procedure implemented in or used by C, but)SH
13680 56836 MT
(use a)SH
10 /Courier AF
16184 XM
(LONGREAL)SH
11 /Times-Roman AF
21259 XM
(parameter instead.)SH
13680 58887 MT
(Again, there are some C idiosyncrasies that can be translated into)SH
13680 60264 MT
(higher-level Modula-2 constructs.  Many pointer parameters can be declared)SH
13680 61641 MT
(as)SH
10 /Courier AF
14871 XM
(@NOCOUNT)SH
11 /Times-Roman AF
19946 XM
(open arrays.  If you are lucky, a counted array in C is passed)SH
13680 63018 MT
(with the array base declared first, and the length of the array second.  In this)SH
13680 64395 MT
(case you can use a normal counted open array.  Unfortunately, the ordering)SH
13680 65772 MT
(of)SH
10 /Courier AF
14871 XM
(argc)SH
11 /Times-Roman AF
17546 XM
(and)SH
10 /Courier AF
19409 XM
(argv)SH
11 /Times-Roman AF
22084 XM
(set a bad precedent.)SH
ES
%%Page: 122 123
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(122)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
12 /Times-Roman AF
11520 8023 MT
(19.8. Example Modula-2 Interfaces to Pascal)SH
11 /Courier AF
11520 10064 MT
([[)SH
/Times-Roman SF
13500 XM
(Maybe someday.)SH
/Courier SF
21674 XM
(]])SH
12 /Times-Roman AF
11520 14345 MT
(19.9. How Procedure Call Is Implemented)SH
11 /Courier AF
11520 16386 MT
([[)SH
/Times-Roman SF
13500 XM
(Is this section really necessary.  It's really telling you about the standard)SH
11520 17763 MT
(calling sequence for the VAX, which is adequately documented in one of the)SH
11520 19140 MT
(VAX manuals.  I don't want to add similarly redundant verbiage for the)SH
11520 20517 MT
(MIPS as well.  And if you are doing assembly language programming,)SH
11520 21894 MT
(you're going to need to read the VAX or MIPS manuals anyway.)SH
/Courier SF
40832 XM
(]])SH
/Times-Roman SF
11520 23822 MT
(This section describes how Modula-2 procedure call is implemented using)SH
11520 25199 MT
(VAX instructions.  It is necessary to know this if you need to write assembly)SH
11520 26576 MT
(language procedures that either call or are called by Modula-2 procedures.)SH
11520 27953 MT
(This can be necessary in order to get the best possible performance for a)SH
11520 29330 MT
(frequently-executed procedure.  This section assumes that you are familiar)SH
11520 30707 MT
(with the VAX, as you would need to be in order to write an assembly)SH
11520 32084 MT
(language program.)SH
12 SS 
11520 35279 MT
(19.9.1. Calling Modula-2 from Assembly Language)SH
11 SS 
11520 37320 MT
(The general scheme for calling an Modula-2 procedure Int.Proc with N)SH
11520 38697 MT
(parameters is)SH
13720 40648 MT
(1.)SH
14820 XM
(<code to save values of r0..r5 as required>)SH
9 SS 
23688 42213 MT
(th)SH
11 SS 
13720 42576 MT
(2.)SH
14820 XM
(<code to push the N)SH
24663 XM
(actual parameter>)SH
14820 43953 MT
(...)SH
14820 45330 MT
(<code to push the 1st actual parameter>)SH
13720 47258 MT
(3.)SH
14820 XM
(calls $ParmLongwords, _Int_Proc)SH
13720 49186 MT
(4.)SH
14820 XM
(<code to take the result, if any, from r0>)SH
11520 51137 MT
(Explanations:)SH
13720 53088 MT
(1.)SH
14820 XM
(The called procedure is allowed to modify r0..r5.  \050VMS)SH
14820 54465 MT
(procedures are allowed to modify only r0 and r1.\051  Therefore)SH
14820 55842 MT
(the calling procedure must be prepared for the values in these)SH
14820 57219 MT
(registers to be different after the call.)SH
13720 59351 MT
(2.)SH
14820 XM
(The parameters are pushed in reverse order.  This is because C)SH
14820 60728 MT
(supports procedures that take a variable number of parameters.)SH
14820 62105 MT
(By pushing the required parameters last, they can be addressed)SH
14820 63482 MT
(with constant offsets from ap.  You cannot write a Modula-2)SH
14820 64859 MT
(procedure taking a variable number of parameters, but)SH
14820 66236 MT
(Modula-2 pushes the parameters in reverse order to make it)SH
14820 67613 MT
(easier to call C procedures from Modula-2.)SH
ES
%%Page: 123 124
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(How Procedure Call Is Implemented)SH
46380 XM
(123)SH
11 /Times-Roman AF
16980 7955 MT
(The meaning of ``pushing a parameter'' depends upon the type)SH
16980 9332 MT
(of the parameter, as described above in Section 19.4.1, page)SH
16980 10709 MT
(113. Three)
275 W( examples: If the formal parameter is an)SH
10 /Courier AF
39855 XM
(INTEGER)SH
11 /Times-Roman AF
16980 12086 MT
(passed by value, and the actual parameter is the constant 1, then)SH
10 /Courier AF
19476 13741 MT
(pushl $1)SH
11 /Times-Roman AF
16980 15527 MT
(does it.  If the formal parameter is an)SH
10 /Courier AF
33534 XM
(INTEGER)SH
11 /Times-Roman AF
38009 XM
(passed by)SH
10 /Courier AF
42591 XM
(VAR)SH
11 /Times-Roman AF
(,)SH
16980 16904 MT
(and the variable is the only local variable of the calling)SH
16980 18281 MT
(procedure, then)SH
10 /Courier AF
19476 19936 MT
(pushal -4\050fp\051)SH
11 /Times-Roman AF
16980 21722 MT
(does it.  If the formal parameter is a)SH
10 /Courier AF
32984 XM
(VAR ARRAY OF CHAR)SH
11 /Times-Roman AF
43459 XM
(and)SH
16980 23099 MT
(the actual parameter is a 10-character array that is the only)SH
16980 24476 MT
(local variable of the calling procedure, then)SH
10 /Courier AF
19476 26131 MT
(pushl $10)SH
19476 27162 MT
(pushab -4\050fp\051)SH
11 /Times-Roman AF
16980 28948 MT
(does it \050first push the number of array elements, then push the)SH
16980 30325 MT
(address of the first element\051.  When in doubt, check the code)SH
16980 31702 MT
(generated by the compiler \050using the -r switch\051 for other)SH
16980 33079 MT
(parameter types.)SH
15880 35211 MT
(3.)SH
16980 XM
(The calls instruction transfers control to the procedure being)SH
16980 36588 MT
(called. ParmLongwords)
275 W( is at least N, but may be greater)SH
16980 37965 MT
(because some parameters require more than one word of stack.)SH
16980 39342 MT
(For instance, open array parameters require two words.)SH
16980 41474 MT
(The identifier)SH
10 /Courier AF
23272 XM
(_Int_Proc)SH
11 /Times-Roman AF
28947 XM
(should be ``imported'' at the)SH
16980 42851 MT
(beginning of the assembly code module using the directive)SH
10 /Courier AF
19476 44506 MT
(.globl _Int_Proc)SH
11 /Times-Roman AF
15880 46638 MT
(4.)SH
16980 XM
(The called procedure pops all parameters off the stack, so the)SH
16980 48015 MT
(calling procedure should assume that sp has the value it had)SH
16980 49392 MT
(before it started pushing parameters.)SH
16980 51524 MT
(The result is either a one-word value in r0, a two-word)SH
10 /Courier AF
16980 52901 MT
(LONGREAL)SH
11 /Times-Roman AF
22055 XM
(value in r0 and r1, or a pointer in r0 to a larger)SH
16980 54278 MT
(value allocated on the stack.  In the latter case, the calling)SH
16980 55655 MT
(program must use or copy the value before calling any more)SH
16980 57032 MT
(procedures.)SH
12 SS 
13680 60227 MT
(19.9.2. Calling Assembly Code from Modula-2)SH
11 SS 
13680 62268 MT
(To call assembly code from Modula-2, you declare each assembly code)SH
13680 63645 MT
(procedure in an interface, and make sure that each assembly-coded procedure)SH
13680 65022 MT
(matches its interface declaration.  The following is the general scheme for)SH
13680 66399 MT
(implementing a procedure Int.Proc:)SH
ES
%%Page: 124 125
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(124)SH
28441 XM
(Mixing Modula-2 with Other Languages)SH
/Courier SF
16416 7824 MT
(1. .align)
3000 W( 2)SH
18816 8855 MT
(_Int_Proc:)SH
21216 9886 MT
(.word <entry mask>)SH
16416 10917 MT
(2. movab)
3000 W( -LocalBytes\050sp\051,sp)SH
16416 11948 MT
(3. <code)
3000 W( for body of procedure>)SH
16416 12979 MT
(4. ret)3000 W
11 /Times-Roman AF
13720 14930 MT
(1.)SH
14820 XM
(The)SH
10 /Courier AF
16805 XM
(.align 2)SH
11 /Times-Roman AF
21880 XM
(directive word-aligns the entry mask; this is not)SH
14820 16307 MT
(required, but improves performance.)SH
14820 18439 MT
(The identifier)SH
10 /Courier AF
21112 XM
(_Int_Proc)SH
11 /Times-Roman AF
26787 XM
(should be ``exported'' at the)SH
14820 19816 MT
(beginning of the assembly code module using the directive)SH
10 /Courier AF
17316 21471 MT
(.globl _Int_Proc)SH
11 /Times-Roman AF
14820 23603 MT
(The)SH
10 /Courier AF
16805 XM
(.word)SH
11 /Times-Roman AF
20080 XM
(directive creates the 16-bit VAX entry mask.  The)SH
14820 24980 MT
(entry mask specifies what registers are to be saved and what)SH
14820 26357 MT
(traps are to be enabled when the procedure is called; it is fully)SH
14820 27734 MT
(described in the section ``procedure call instructions'' of the)SH
14820 29111 MT
(VAX architecture handbook.  For a procedure to be callable)SH
14820 30488 MT
(from Modula-2, it must save every register in r6 to r11 that it)SH
14820 31865 MT
(will modify.  \050On VMS it must save every register in r2 to r11)SH
14820 33242 MT
(that it will modify.\051  The entry mask must not enable integer or)SH
14820 34619 MT
(numeric overflow traps.  Hence the entry mask may be)SH
10 /Courier AF
17316 36274 MT
(.word 0x0fc0)SH
11 /Times-Roman AF
14820 38060 MT
(or any value obtainable by clearing bits in this word.)SH
13720 39437 MT
(2.)SH
14820 XM
(The)SH
10 /Courier AF
16805 XM
(movab)SH
11 /Times-Roman AF
20080 XM
(instruction allocates space for LocalVarBytes bytes)SH
14820 40814 MT
(of local variables.)SH
10 /Courier AF
23219 XM
(LocalVarBytes)SH
11 /Times-Roman AF
31294 XM
(should be a multiple of 4)SH
14820 42191 MT
(\050i.e. the)
275 W( stack should stay longword aligned\051.  If the procedure)SH
14820 43568 MT
(uses no local variables then this instruction is clearly a no-op)SH
14820 44945 MT
(and should be omitted.)SH
13720 46322 MT
(3.)SH
14820 XM
(Actual parameters are addressed using positive offsets from ap.)SH
14820 47699 MT
(If each parameter takes a single longword then parameter i is)SH
14820 49076 MT
(located at sp+\0504*i\051.)SH
14820 51208 MT
(It is generally most convenient to address local variables using)SH
14820 52585 MT
(negative negative offsets from fp rather than positive offsets)SH
14820 53962 MT
(from sp.)SH
13720 55339 MT
(4.)SH
14820 XM
(The)SH
10 /Courier AF
16805 XM
(ret)SH
11 /Times-Roman AF
18880 XM
(instruction returns to the caller.)SH
14820 57471 MT
(If an interface is implemented entirely by assembly code \050rather)SH
14820 58848 MT
(than by a mixture of assembly code and Modula-2 code\051, then)SH
14820 60225 MT
(the assembly code program must include an initialization)SH
14820 61602 MT
(procedure:)SH
10 /Courier AF
24516 63603 MT
(.align 2)SH
22116 64634 MT
(_Int__init:)SH
24516 65665 MT
(.word 0)SH
24516 66696 MT
(<code to initialize the module>)SH
24516 67727 MT
(ret)SH
11 /Times-Roman AF
14820 69859 MT
(The program must include this procedure even if there is no)SH
14820 71236 MT
(initialization work to do.)SH
ES
%%Page: 125 126
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(125)SH
14 /Times-Roman AF
18298 11760 MT
(20. Performance and Other Pragmatic Issues)SH
12 SS 
13680 16041 MT
(20.1. Code Generation for Control Structures)SH
10 /Courier AF
13680 18082 MT
(CASE)SH
11 /Times-Roman AF
16355 XM
(statements are compiled using a jump table, since Wirth gives the)SH
13680 19459 MT
(compiler writer license to do so.  This:)SH
10 /Courier AF
16176 21114 MT
(CASE e OF)SH
16176 22145 MT
(| 1:)SH
18576 23176 MT
(IO.WriteF\050IO.output, "One\134n"\051;)SH
16176 24207 MT
(| 2..1000:)SH
18576 25238 MT
(IO.WriteF\050IO.output, "Many\134n"\051;)SH
16176 26269 MT
(END;)SH
11 /Times-Roman AF
13680 28055 MT
(gives you a dispatch table with a thousand cells.)SH
13680 29983 MT
(If you have just a few different cases, an)SH
10 /Courier AF
31758 XM
(IF)SH
11 /Times-Roman AF
(-)SH
10 /Courier AF
(THEN)SH
11 /Times-Roman AF
(-)SH
10 /Courier AF
(ELSIF)SH
11 /Times-Roman AF
39365 XM
(structure may be)SH
13680 31360 MT
(preferable. Obviously,)
275 W( this is a space-time tradeoff that depends on the)SH
13680 32737 MT
(individual situation.)SH
13680 34665 MT
(The compiler rearranges)SH
10 /Courier AF
24703 XM
(IF)SH
11 /Times-Roman AF
26178 XM
(statements with empty branches to generate)SH
13680 36042 MT
(efficient code, so you can concentrate on clarity.  The compiler is full of)SH
13680 37419 MT
(statements like:)SH
10 /Courier AF
16176 39074 MT
(IF \050dst = src\051 OR \050dst = anyTypeNode\051 OR \050src = anyTypeNode\051 THEN)SH
18576 40105 MT
(same := true;)SH
16176 41136 MT
(ELSEIF \050dst = nil\051 OR \050src = nil\051 THEN)SH
18576 42167 MT
(\050* do nothing *\051)SH
16176 43198 MT
(ELSE)SH
18576 44229 MT
(...)SH
16176 45260 MT
(END;)SH
11 /Times-Roman AF
13680 47311 MT
(If the Boolean expression after an)SH
10 /Courier AF
28828 XM
(IF)SH
11 /Times-Roman AF
30303 XM
(or an)SH
10 /Courier AF
32807 XM
(ELSIF)SH
11 /Times-Roman AF
36082 XM
(is a constant expression,)SH
13680 48688 MT
(the compiler produces code only if the expression evaluates to)SH
10 /Courier AF
41354 XM
(TRUE)SH
11 /Times-Roman AF
(. This)275 W
13680 50065 MT
(example produces no code whatsoever:)SH
10 /Courier AF
16176 51720 MT
(CONST DEBUG = FALSE;)SH
16176 52751 MT
(...)SH
16176 53782 MT
(IF DEBUG THEN)SH
18576 54813 MT
(IO.WriteF\050IO.stderr, "Error in framus\134n"\051;)SH
16176 55844 MT
(END;)SH
11 /Times-Roman AF
13680 57895 MT
(The compiler generates the Boolean test code for a)SH
10 /Courier AF
36311 XM
(WHILE)SH
11 /Times-Roman AF
39586 XM
(loop at both the)SH
13680 59272 MT
(beginning and end of the loop in order to avoid extra jumps.  The code:)SH
10 /Courier AF
16176 60927 MT
(WHILE test DO)SH
18576 61958 MT
(ss;)SH
16176 62989 MT
(END;)SH
11 /Times-Roman AF
13680 64775 MT
(should always be used instead of the clumsier \050and no more efficient\051)SH
10 /Courier AF
16176 66430 MT
(IF test THEN)SH
18576 67461 MT
(REPEAT)SH
20976 68492 MT
(ss;)SH
18576 69523 MT
(UNTIL NOT test;)SH
16176 70554 MT
(END;)SH
ES
%%Page: 126 127
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(126)SH
28001 XM
(Performance and Other Pragmatic Issues)SH
11 /Times-Roman AF
11520 7955 MT
(Inline procedures can get rid of a lot of procedure overhead, and have been)SH
11520 9332 MT
(used extensively in the compiler itself.  Further, the compiler eliminates dead)SH
11520 10709 MT
(code in)SH
10 /Courier AF
15002 XM
(IF)SH
11 /Times-Roman AF
16477 XM
(and)SH
10 /Courier AF
18340 XM
(CASE)SH
11 /Times-Roman AF
21015 XM
(statements if the test or selector can be evaluated at)SH
11520 12086 MT
(compile time.  This especially helps calls that pass constant expressions to)SH
11520 13463 MT
(inline procedures that have)SH
10 /Courier AF
23676 XM
(CONST)SH
11 /Times-Roman AF
26951 XM
(parameters. For)
275 W( example, the compiler)SH
11520 14840 MT
(defines the procedure)SH
10 /Courier AF
21261 XM
(I)SH
11 /Times-Roman AF
22136 XM
(as follows:)SH
10 /Courier AF
14016 16760 MT
(PROCEDURE @INLINE I\050CONST v : INTEGER\051;)SH
14016 17791 MT
(BEGIN)SH
16416 18822 MT
(IF \050v >= 0\051 AND \050v < 10\051 THEN)SH
18816 19853 MT
(WriteC\050codefile, CHR\050ORD\050'0' + v\051\051\051;)SH
16416 20884 MT
(ELSE)SH
18816 21915 MT
(WriteF\050codefile, '%d', v\051;)SH
16416 22946 MT
(END;)SH
14016 23977 MT
(END I;)SH
11 /Times-Roman AF
11520 25763 MT
(When the compiler see a call like:)SH
10 /Courier AF
14016 27418 MT
(I\0501\051;)SH
11 /Times-Roman AF
11520 29204 MT
(it reduces this to:)SH
10 /Courier AF
14016 30859 MT
(WriteC\050codefile, '1'\051;)SH
12 /Times-Roman AF
11520 35140 MT
(20.2. Runtime Checking)SH
11 SS 
11520 37181 MT
(The ``)SH
10 /Courier AF
(-C)SH
11 /Times-Roman AF
('' compiler switch turns on runtime checking.  This checking)SH
11520 38558 MT
(includes:)SH
6 /Symbol AF
13719 40509 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Assignment to subranges, including calling procedures with)SH
14270 41886 MT
(subrange parameters)SH
6 /Symbol AF
13719 43814 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Subscripting and slicing arrays)SH
6 /Symbol AF
13719 45742 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Dereferencing pointers \050including dynamic arrays\051)SH
6 /Symbol AF
13719 47670 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Accessing tagged record variant fields)SH
6 /Symbol AF
13719 49598 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Calls to the)SH
10 /Courier AF
19557 XM
(ASSERT)SH
11 /Times-Roman AF
23432 XM
(procedure)SH
6 /Symbol AF
13719 51526 MT
(\267)SH
11 /Times-Roman AF
14270 XM
(Calls to)SH
10 /Courier AF
17938 XM
(FLOAT)SH
11 /Times-Roman AF
21213 XM
(and)SH
10 /Courier AF
23076 XM
(LONGFLOAT)SH
11 /Times-Roman AF
28751 XM
(with an)SH
10 /Courier AF
32295 XM
(UNSIGNED)SH
11 /Times-Roman AF
37370 XM
(parameter.)SH
6 /Symbol AF
13719 53454 MT
(\267)SH
11 /Courier AF
14270 XM
([[)SH
/Times-Roman SF
16250 XM
(Also should include)SH
10 /Courier AF
25325 XM
(INC)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
27675 XM
(DEC)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
30025 XM
(VAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
32375 XM
(CHR)SH
11 SS 
34835 XM
(]])SH
/Times-Roman SF
11520 55405 MT
(Depending on your program, runtime checking can add a substantial amount)SH
11520 56782 MT
(of overhead.  You can leave checking off entirely for trustworthy)SH
11520 58159 MT
(time-critical modules.  If you want finer control, you can use comment)SH
11520 59536 MT
(directives.)SH
11520 61464 MT
(The comment)SH
10 /Courier AF
14016 63119 MT
(\050*$C+*\051)SH
11 /Times-Roman AF
11520 64905 MT
(saves the current runtime checking state, and turns runtime checking on.  The)SH
11520 66282 MT
(comment)SH
10 /Courier AF
14016 67937 MT
(\050*$C-*\051)SH
11 /Times-Roman AF
11520 69723 MT
(saves the current runtime checking state, and turns runtime checking off.)SH
11520 71100 MT
(The comment)SH
ES
%%Page: 127 128
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Runtime Checking)SH
46380 XM
(127)SH
/Courier SF
16176 7824 MT
(\050*$C^*\051)SH
11 /Times-Roman AF
13680 9610 MT
(restores runtime checking to its previous state.  The usual idiom for)SH
13680 10987 MT
(time-critical routines is:)SH
10 /Courier AF
16176 12642 MT
(\050*$C-*\051)SH
16176 13673 MT
(PROCEDURE TimeCritical\050p : INTEGER\051;)SH
16176 14704 MT
(BEGIN)SH
16176 15735 MT
(...)SH
16176 16766 MT
(END TimeCritical;)SH
16176 17797 MT
(\050*$C^*\051)SH
11 /Times-Roman AF
13680 19725 MT
(The compiler maintains runtime checking state up to 31 levels deep.)SH
12 SS 
13680 24006 MT
(20.3. The Optimizer)SH
10 SS 
31680 25978 MT
(Making a wrong program worse is no)SH
31680 27355 MT
(sin.)SH
31680 28732 MT
(-)SH
31913 XM
(-)SH
32146 XM
(-Bill McKeeman)SH
11 SS 
13680 30592 MT
(The optimizer, invoked through the ``)SH
10 /Courier AF
(-O)SH
11 /Times-Roman AF
('' compiler switch, performs)SH
13680 31969 MT
(optimizations on the tree structure used by the front end of the compiler.  It)SH
13680 33346 MT
(attempts to perform the following program transformations to produce more)SH
13680 34723 MT
(efficient code:)SH
6 /Symbol AF
15879 36674 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Common subexpressions \050CSEs\051 that exceed a built-in, heuristic)SH
16430 38051 MT
(measure of complexity are evaluated only once.  Lifetime)SH
16430 39428 MT
(information for such CSEs is computed and used to control)SH
16430 40805 MT
(storage allocation, including assignment of registers.)SH
6 /Symbol AF
15879 42733 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(The assignment of local variables and CSEs to registers is done)SH
16430 44110 MT
(using a prioritized scheme, with priority based on a built-in,)SH
16430 45487 MT
(heuristic measure of access frequency.)SH
6 /Symbol AF
15879 47415 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Evaluation of sufficiently expensive loop-invariant expressions)SH
16430 48792 MT
(is performed before entry to the loop.)SH
6 /Symbol AF
15879 50720 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Assignment statements of the form)SH
10 /Courier AF
18926 52375 MT
(designator = designator \050"+" | "*" | "-"\051 expression)SH
11 /Times-Roman AF
16430 54161 MT
(are transformed to a more efficient code sequence.)SH
6 /Symbol AF
15879 56089 MT
(\267)SH
11 /Times-Roman AF
16430 XM
(Some tail-recursive procedure calls are detected and transformed)SH
16430 57466 MT
(to jumps.  In more detail, the optimizer looks at the last)SH
16430 58843 MT
(statement in the procedure body.  If it is a conditional \050)SH
10 /Courier AF
(IF)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
16430 60220 MT
(CASE)SH
11 /Times-Roman AF
(\051, it looks at the last statement in each arm, and so on)SH
16430 61597 MT
(recursively. Each)
275 W( such last statement is treated as follows:)SH
6 /Symbol AF
18904 63548 MT
(\267)SH
11 /Times-Roman AF
(If the procedure returns a value and the last statement is a)SH
10 /Courier AF
19180 64925 MT
(RETURN)SH
11 /Times-Roman AF
23055 XM
(statement and the)SH
10 /Courier AF
31028 XM
(RETURN)SH
11 /Times-Roman AF
34903 XM
(expression is an)SH
19180 66302 MT
(acceptable recursive call, that call qualifies.)SH
6 /Symbol AF
18904 68230 MT
(\267)SH
11 /Times-Roman AF
(If the procedure does not return a value and the last)SH
19180 69607 MT
(statement is an acceptable recursive call, that call)SH
19180 70984 MT
(qualifies.)SH
ES
%%Page: 128 129
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(128)SH
28001 XM
(Performance and Other Pragmatic Issues)SH
11 /Times-Roman AF
11520 7955 MT
(While the optimizer should not make a correct program incorrect, it may)SH
11520 9332 MT
(make a bad program worse.  In particular, the compiler may not evaluate)SH
11520 10709 MT
(things in the order you expect.  The optimizer also assumes that)SH
10 /Courier AF
39839 XM
(CONST)SH
11 /Times-Roman AF
11520 12086 MT
(parameters really are; if you change such a parameter using an aliased name,)SH
11520 13463 MT
(you may or may not get the old value.)SH
11520 15391 MT
(The optimizer has proven itself most useful in removing extraneous runtime)SH
11520 16768 MT
(checks generated when using the ``)SH
10 /Courier AF
(-C)SH
11 /Times-Roman AF
('' switch.  It doesn't seem to do much)SH
11520 18145 MT
(for large programs compiled without runtime checking.)SH
12 SS 
11520 22426 MT
(20.4. Storage Management for Pointers)SH
11 SS 
11520 24467 MT
(Normally, the supplied procedure)SH
10 /Courier AF
26579 XM
(NEW)SH
11 /Times-Roman AF
28654 XM
(calls)SH
10 /Courier AF
30945 XM
(Storage.ALLOCATE)SH
11 /Times-Roman AF
(; similarly,)SH
10 /Courier AF
11520 25844 MT
(DISPOSE)SH
11 /Times-Roman AF
15995 XM
(calls)SH
10 /Courier AF
18286 XM
(Storage.DEALLOCATE)SH
11 /Times-Roman AF
(. This)
275 W( module uses a simple next-fit)SH
11520 27221 MT
(search for allocation; and merges any adjacent memory areas on deallocation.)SH
11520 28598 MT
(If you declare a pointer using)SH
10 /Courier AF
24714 XM
(@C)SH
11 /Times-Roman AF
26189 XM
(or another pointer kind, the compiler)SH
11520 29975 MT
(chooses the appropriate allocation and deallocation routines as described in)SH
11520 31352 MT
(Section 18.4, page 105.)SH
11520 33280 MT
(You can specify your own routines for storage allocation and deallocation by)SH
11520 34657 MT
(placing them in a scope that is visible from the point where)SH
10 /Courier AF
37854 XM
(NEW)SH
11 /Times-Roman AF
39929 XM
(or)SH
10 /Courier AF
41120 XM
(DISPOSE)SH
11 /Times-Roman AF
11520 36034 MT
(is called and naming them)SH
10 /Courier AF
23343 XM
(ALLOCATE)SH
11 /Times-Roman AF
28418 XM
(and)SH
10 /Courier AF
30281 XM
(DEALLOCATE)SH
11 /Times-Roman AF
(.)SH
11520 38085 MT
(For example:)SH
10 /Courier AF
14016 39740 MT
(IMPLEMENTATION MODULE Mine;)SH
14016 40771 MT
(FROM MyStorage IMPORT ALLOCATE, DEALLOCATE;)SH
14016 41802 MT
(TYPE T = Type;)SH
14016 42833 MT
(VAR v : POINTER TO T;)SH
14016 43864 MT
(BEGIN)SH
16416 44895 MT
(NEW\050v\051; \050*)
2400 W( calls MyStorage.ALLOCATE\050v,SYSTEM.TSIZE\050T\051\051)
SH( *\051)1200 W
16416 45926 MT
(DISPOSE\050v\051; \050* calls MyStorage.DEALLOCATE\050v,SYSTEM.TSIZE\050T\051\051 *\051)SH
14016 46957 MT
(END Mine.)SH
11 SS 
11520 49008 MT
([[)SH
/Times-Roman SF
13500 XM
(I have a few other storage modules.  I should really whip the compiler's)SH
11520 50385 MT
(allocate-only routines and the server's storage modules into shape.)SH
/Courier SF
41473 XM
(]])SH
12 /Times-Roman AF
11520 54666 MT
(20.5. Implementation Restrictions)SH
11 SS 
11520 56707 MT
(A line can be no more than 1000 characters long.)SH
11520 58635 MT
(Since an identifier cannot cross line boundaries, identifiers can be no more)SH
11520 60012 MT
(than 1000 character long.)SH
11520 61940 MT
(Literal strings may extend across line by using ``\134'' at the end of a line, but in)SH
11520 63317 MT
(no case can a literal string exceed 10000 characters in length.)SH
11520 65245 MT
(Set constants can contain no more than 1024 elements, i.e. ranging from)SH
11520 66622 MT
(low-bound of subrange type on which set is based to low-bound+1023.  For)SH
11520 67999 MT
(example:)SH
10 /Courier AF
14016 69654 MT
(TYPE SetType = SET OF [100..1200];)SH
14016 70685 MT
(CONST SetConst1 =  SetType{100,1123};)
SH( \050*)
1200 W( okay *\051)SH
14016 71716 MT
(CONST SetConst2 =  SetType{100,1124};)
SH( \050*)
1200 W( not okay *\051)SH
ES
%%Page: 129 130
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Implementation Restrictions)SH
46380 XM
(129)SH
11 /Times-Roman AF
13680 7955 MT
(Exceeding the line limit may result in spurious syntax errors.  Exceeding the)SH
13680 9332 MT
(literal string limit will result in the compiler failing a runtime check and)SH
13680 10709 MT
(crashing. Exceeding)
275 W( the set constant limit will result in a comprehensible)SH
13680 12086 MT
(error message.)SH
ES
%%Page: 130 131
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(130)SH
28001 XM
(Performance and Other Pragmatic Issues)SH
ES
%%Page: 131 132
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(131)SH
14 /Times-Roman AF
24266 11760 MT
(21. Programming Style)SH
12 SS 
13680 16041 MT
(21.1. The)SH
11 /Courier AF
18546 XM
(.T)SH
12 /Times-Roman AF
20166 XM
(Convention)SH
11 SS 
13680 18082 MT
(In Modula-2, it is common for an interface to define one type or a small)SH
13680 19459 MT
(number of related types, plus the public procedures operating on this type or)SH
13680 20836 MT
(types. Choose)
275 W( the name of the interface to describe the type, or the ``primary)SH
13680 22213 MT
(type'' if the interface defines more than one.  Specifically, interfaces should)SH
13680 23590 MT
(be named, wherever it makes sense to do so, for a single instance of the)SH
13680 24967 MT
(objects they manage; the primary type should just be named)SH
10 /Courier AF
40380 XM
(T)SH
11 /Times-Roman AF
(. Clients)
275 W( refer)SH
13680 26344 MT
(to the type by its qualified name, e.g.)SH
10 /Courier AF
30544 XM
(Thread.T)SH
11 /Times-Roman AF
35619 XM
(and)SH
10 /Courier AF
37482 XM
(Text.T)SH
11 /Times-Roman AF
(.)SH
13680 28272 MT
(This naming convention is designed to lead to acceptably understandable and)SH
13680 29649 MT
(short names.  It does not apply to interfaces that do not manage particular)SH
13680 31026 MT
(objects and export only procedures, or to interfaces where the name of the)SH
13680 32403 MT
(objects doesn't describe particularly well the function of the interface.  For)SH
13680 33780 MT
(example, in a virtual memory interface, the primary type seems to be)SH
10 /Courier AF
13680 35157 MT
(PageRun)SH
11 /Times-Roman AF
(, but)SH
10 /Courier AF
20111 XM
(PageRun)SH
11 /Times-Roman AF
24586 XM
(is not a good name for the interface, nor is)SH
10 /Courier AF
43493 XM
(VM.T)SH
11 /Times-Roman AF
46168 XM
(a)SH
13680 36534 MT
(very descriptive alternative to)SH
10 /Courier AF
27058 XM
(VM.PageRun)SH
11 /Times-Roman AF
(.)SH
12 SS 
13680 40815 MT
(21.2. Don't Export Variables)SH
11 SS 
13680 42856 MT
(There is no way to specify that a variable in a definition module is meant to)SH
13680 44233 MT
(be read but not written by clients.  For these reasons, definition modules)SH
13680 45610 MT
(should usually avoid exporting variables.  The variables should be declared)SH
13680 46987 MT
(in the corresponding implementation, and accessed by clients through)SH
13680 48364 MT
(exported procedures that return or change their values.)SH
12 SS 
13680 52645 MT
(21.3. Returning Multiple Values)SH
10 /Courier AF
13680 54686 MT
(VAR)SH
11 /Times-Roman AF
15755 XM
(parameters are intended to enable procedures to return multiple values.)SH
13680 56063 MT
(In standard Modula-2, they also can be used to reduce the overhead of)SH
13680 57440 MT
(passing large value parameters.  However, the standard language provides no)SH
13680 58817 MT
(syntax to distinguish these conceptually different applications of)SH
10 /Courier AF
42336 XM
(VAR)SH
11 /Times-Roman AF
13680 60194 MT
(parameters.)SH
13680 62122 MT
(If you don't care about standard Modula-2, use)SH
10 /Courier AF
34663 XM
(CONST)SH
11 /Times-Roman AF
37938 XM
(parameters for clarity.)SH
13680 63499 MT
(If you must program in standard Modula-2, include a clarifying comment to)SH
13680 64876 MT
(help the reader to understand the procedure's semantics.  For example:)SH
10 /Courier AF
16176 66796 MT
(PROCEDURE Sum\050)SH
18576 67827 MT
(VAR a)
SH( \050*in*\051)
3000 W( :)
600 W( Matrix;)SH
18576 68858 MT
(VAR b)
SH( \050*in*\051)
3000 W( :)
600 W( Matrix;)SH
18576 69889 MT
(VAR result \050*out*\051 : Matrix\051;)SH
16176 71951 MT
(PROCEDURE Transpose\050VAR a \050*inout*\051: Matrix\051;)SH
ES
%%Page: 132 133
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(132)SH
37360 XM
(Programming Style)SH
12 /Times-Roman AF
11520 8023 MT
(21.4. Choosing Identifiers)SH
11 SS 
11520 10064 MT
(In non-standard mode \050the default\051, keywords, supplied identifiers, and)SH
11520 11441 MT
(identifiers declared in pseudo-modules are recognized regardless of case.)SH
11520 12818 MT
(You cannot redefine keywords, which are listed in Section 1.1, page 3.)SH
11520 14746 MT
(Though you can redefine supplied and pseudo-module identifiers, you)SH
11520 16123 MT
(shouldn't. You)
275 W( will only redefine the identifier spelled with the exact)SH
11520 17500 MT
(capitalization that you use; all other spellings still refer to the supplied)SH
11520 18877 MT
(identifier. Since)
275 W( other people reading your code expect)SH
10 /Courier AF
36198 XM
(CAP)SH
11 /Times-Roman AF
38273 XM
(and)SH
10 /Courier AF
40136 XM
(Cap)SH
11 /Times-Roman AF
42211 XM
(to refer)SH
11520 20254 MT
(to the same supplied procedure, you don't want to confuse them by defining)SH
10 /Courier AF
11520 21631 MT
(Cap)SH
11 /Times-Roman AF
13595 XM
(as something completely different.  Supplied identifiers are listed in)SH
11520 23008 MT
(Section 2.1, page 7; pseudo-module identifiers are scattered through Chapter)SH
11520 24385 MT
(15, page 79.)SH
/Courier SF
17446 XM
([[)SH
/Times-Roman SF
19426 XM
(Should I include one big list with all identifiers/keywords)SH
11520 25762 MT
(to avoid?)SH
/Courier SF
16243 XM
(]])SH
12 /Times-Roman AF
11520 30043 MT
(21.5. Qualified Names)SH
11 SS 
11520 32084 MT
(Which form of import should you use in implementation modules?)SH
11520 34135 MT
(In an implementation module, imported names should generally be qualified.)SH
11520 35512 MT
(Qualification makes code explicit about its non-local dependencies, hence)SH
11520 36889 MT
(easier to read.  For example, use)SH
10 /Courier AF
26027 XM
(unix.open)SH
11 /Times-Roman AF
31702 XM
(and)SH
10 /Courier AF
33565 XM
(unix.read)SH
11 /Times-Roman AF
39240 XM
(like this:)SH
10 /Courier AF
14016 38544 MT
(IMPORT unix;)SH
14016 39575 MT
(fd := unix.open\050"/usr/local/bin/mod", 0, unix.OPENREADONLY\051;)SH
14016 40606 MT
(nread := unix.read\050fd, buff, nbytes\051;)SH
11 /Times-Roman AF
11520 42392 MT
(rather than this:)SH
10 /Courier AF
14016 44047 MT
(FROM unix IMPORT open, OPENREADONLY, read;)SH
14016 45078 MT
(fd := open\050"/usr/local/bin/mod", 0, OPENREADONLY\051;)SH
14016 46109 MT
(nread := read\050fd, buff, nbytes\051;)SH
11 /Times-Roman AF
11520 48160 MT
(In a program dominated by imports from a single module, or where the)SH
11520 49537 MT
(names of imported procedures are generally known, the unqualified form)SH
11520 50914 MT
(might be easier on the reader, since the function names are unlikely to be)SH
11520 52291 MT
(confused with functions from other interfaces:)SH
10 /Courier AF
14016 53946 MT
(FROM longmath IMPORT sin, cos;)SH
14016 54977 MT
(x := sin\050x\051 * cos\050y\051;)SH
11 /Times-Roman AF
11520 56905 MT
(Similarly, heavily used procedures from the)SH
10 /Courier AF
31101 XM
(IO)SH
11 /Times-Roman AF
32576 XM
(interfaces can be used)SH
11520 58282 MT
(unqualified. Since)
275 W( all procedures in the)SH
10 /Courier AF
29298 XM
(BITOPERATIONS)SH
11 /Times-Roman AF
37373 XM
(modules already)SH
11520 59659 MT
(have)SH
10 /Courier AF
13871 XM
(BIT)SH
11 /Times-Roman AF
15946 XM
(as part of their name, qualification is unwieldy and redundant.)SH
11520 61587 MT
(If you have any doubt, though, use the qualified name.)SH
11520 63515 MT
(Don't ever use)SH
10 /Courier AF
18269 XM
(FROM M IMPORT *)SH
11 /Times-Roman AF
(. First,)
275 W( it makes it hard to figure out)SH
11520 64892 MT
(where an identifier came from.  Second, suppose you \050or worse, one of your)SH
11520 66269 MT
(co-workers\051 export new identifiers from module)SH
10 /Courier AF
33022 XM
(M)SH
11 /Times-Roman AF
33897 XM
(sometime in the future.)SH
11520 67646 MT
(The new identifiers suddenly become visible in your module, and may)SH
11520 69023 MT
(conflict with identifiers that you are already using.  \050Note that this problem)SH
11520 70400 MT
(also exists if you import an enumeration type name unqualified; don't make)SH
11520 71777 MT
(it worse.\051)SH
ES
%%Page: 133 134
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Qualified Names)SH
46380 XM
(133)SH
12 /Times-Roman AF
13680 8023 MT
(21.6.)SH
11 /Courier AF
16380 XM
(WITH)SH
12 /Times-Roman AF
19320 XM
(Statements)SH
11 SS 
13680 10064 MT
(The)SH
10 /Courier AF
15665 XM
(WITH)SH
11 /Times-Roman AF
18340 XM
(statement makes record field names accessible without)SH
13680 11441 MT
(qualification and can therefore mask variables in enclosing scopes.  Since the)SH
13680 12818 MT
(masking is implicit \050the field names do not appear locally to remind the)SH
13680 14195 MT
(reader what is happening\051, subtle errors can occur if a significant amount of)SH
13680 15572 MT
(code appears inside a)SH
10 /Courier AF
23330 XM
(WITH)SH
11 /Times-Roman AF
26005 XM
(statement.)SH
13680 17500 MT
(We find it best to use the)SH
10 /Courier AF
24953 XM
(WITH)SH
11 /Times-Roman AF
27628 XM
(statement only for replacing all or most of the)SH
13680 18877 MT
(fields of a record.  In essence, this facility should be treated as a Mesa-style)SH
13680 20254 MT
(record constructor [1] combined with an assignment statement.)SH
12 SS 
13680 24535 MT
(21.7. Declaring Constants)SH
11 SS 
13680 26576 MT
(A constant declaration lets you define in a single place a constant value to be)SH
13680 27953 MT
(used several places in a program.  Even if you're going to use the value only)SH
13680 29330 MT
(once, declaring it as a constant provides you with a way of highlighting the)SH
13680 30707 MT
(values that you've compiled into your program.  If the number is part of the)SH
13680 32084 MT
(logic of the program, it's OK to use it as a number, but if it is in some sense a)SH
13680 33461 MT
(parameter compiled in as a constant rather than a variable for efficiency's)SH
13680 34838 MT
(sake, declare it as a constant and give it a good name.)SH
13680 36889 MT
(For instance:)SH
10 /Courier AF
16176 38544 MT
(CONST)SH
18576 39575 MT
(HashTableEntries = 200;)SH
16176 40606 MT
(TYPE)SH
18576 41637 MT
(HashTableIndex = [0 .. HashTableEntries-1];)SH
18576 42668 MT
(HashTable = ARRAY HashTableIndex OF HashRecord;)SH
12 /Times-Roman AF
13680 46949 MT
(21.8.)SH
11 /Courier AF
16380 XM
(ORD)SH
12 /Times-Roman AF
18660 XM
(and)SH
11 /Courier AF
20693 XM
(VAL)SH
12 /Times-Roman AF
22973 XM
(and Type Transfers)SH
11 SS 
13680 48990 MT
(The supplied procedures)SH
10 /Courier AF
24767 XM
(ORD)SH
11 /Times-Roman AF
26842 XM
(and)SH
10 /Courier AF
28705 XM
(VAL)SH
11 /Times-Roman AF
30780 XM
(provide implementation-independent)SH
13680 50367 MT
(mappings between ordered types and non-negative integers.  They should)SH
13680 51744 MT
(always be used in preference to using the type name as a type-transfer)SH
13680 53121 MT
(function. E.g.,)275 W
10 /Courier AF
16176 54776 MT
(INTEGER\050x\051 \050*)
7800 W( bad *\051)SH
16176 55807 MT
(ORD\050x\051 \050*)
10200 W( good *\051)SH
13680 57735 MT
(ORD\050x\051)SH
11 /Times-Roman AF
17555 XM
(and)SH
10 /Courier AF
19418 XM
(VAL\050T,x\051)SH
11 /Times-Roman AF
24493 XM
(return)SH
10 /Courier AF
27394 XM
(x)SH
11 /Times-Roman AF
28269 XM
(if)SH
10 /Courier AF
29216 XM
(x)SH
11 /Times-Roman AF
30091 XM
(is of type)SH
10 /Courier AF
34460 XM
(UNSIGNED)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
39810 XM
(INTEGER)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
13680 59112 MT
(CARDINAL)SH
11 /Times-Roman AF
18755 XM
(and)SH
10 /Courier AF
20618 XM
(T)SH
11 /Times-Roman AF
21493 XM
(is the type of)SH
10 /Courier AF
27481 XM
(x)SH
11 /Times-Roman AF
(. This)
275 W( fact has some rather surprising effects)SH
13680 60489 MT
(on the value of)SH
10 /Courier AF
20522 XM
(VAL\050INTEGER, x\051)SH
11 /Times-Roman AF
29797 XM
(for values of)SH
10 /Courier AF
35630 XM
(x)SH
11 /Times-Roman AF
36505 XM
(larger than)SH
10 /Courier AF
13680 61866 MT
(LAST\050INTEGER\051)SH
11 /Times-Roman AF
21755 XM
(but seems to be needed to avoid other problems.)SH
ES
%%Page: 134 135
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(134)SH
37360 XM
(Programming Style)SH
12 /Times-Roman AF
11520 8023 MT
(21.9. Subranges)SH
11 SS 
11520 10064 MT
(Whenever you can, you should use explicit subranges of)SH
10 /Courier AF
36628 XM
(INTEGER)SH
11 /Times-Roman AF
41103 XM
(\050rather)SH
11520 11441 MT
(than plain)SH
10 /Courier AF
16164 XM
(INTEGER)SH
11 /Times-Roman AF
(\051 to make it clear what semantics you intend.)SH
ES
%%Page: 135 136
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(135)SH
14 /Times-Roman AF
22904 11760 MT
(22. Formatting Conventions)SH
11 SS 
13680 15249 MT
(Arguments about formatting conventions are usually quite bloody and)SH
13680 16626 MT
(pointless. Some)
275 W( of the conventions contained herein do not agree with me;)SH
13680 18003 MT
(you'll probably find fault with some as well.  However, sharing code with)SH
13680 19380 MT
(others is a noble goal, and if you have no strong preferences, you may as well)SH
13680 20757 MT
(adopt someone else's.)SH
13680 22685 MT
(In any case, a single module should be completely consistent.  Do not start)SH
13680 24062 MT
(imposing your own style in the middle of a module you get from someone)SH
13680 25439 MT
(else-)SH
15656 XM
(-)SH
15922 XM
(-either convert the entire thing, or use their style.)SH
12 SS 
13680 29720 MT
(22.1. Spelling and Capitalization)SH
11 SS 
13680 31761 MT
(Identifiers are written entirely in lower case except as follows:)SH
13680 33689 MT
(The initial letter of each embedded word except the first is capitalized. For)SH
13680 35066 MT
(the purposes of this rule, an embedded acronym is a sequence of one-letter)SH
13680 36443 MT
(words.)SH
13680 38371 MT
(Identifiers that name modules, procedures, types, and constants start with an)SH
13680 39748 MT
(upper-case letter. All of these are compile-time constants.  All variables,)SH
13680 41125 MT
(including procedure variables, start with a lower-case letter.)SH
13680 43053 MT
(Thus, for example,)SH
10 /Courier AF
18480 44708 MT
(variableName thisCPU)9000 W
18480 45739 MT
(fieldName status)10800 W
18480 46770 MT
(ModuleName Parser)10200 W
18480 47801 MT
(ProcedureName Insert)8400 W
18480 48832 MT
(TypeName VMCache)11400 W
18480 49863 MT
(ConstantName WordSize)9000 W
18480 50894 MT
(EnumerationElement Offline)5400 W
11 /Times-Roman AF
13680 53511 MT
(Note that the elements of an enumeration type are semantically similar to)SH
13680 54888 MT
(constants and are therefore capitalized.)SH
13680 56816 MT
(Reserved words are written entirely in upper case or entirely in lower case.)SH
13680 58193 MT
(Other capitalizations of the same word are not available to the programmer)SH
13680 59570 MT
(for other purposes.)SH
12 SS 
13680 63851 MT
(22.2. Delimiters)SH
11 SS 
13680 65892 MT
(A space appears before and after a vertical bar and before and after equal)SH
13680 67269 MT
(signs in definitions and declarations. Spaces usually appear before and after)SH
13680 68646 MT
(binary operators \050including assignment\051 when the statement containing them)SH
13680 70023 MT
(is long, but they may be omitted when the statement is short \050e.g.,)SH
10 /Courier AF
42919 XM
(i:=i+1)SH
11 /Times-Roman AF
(\051.)SH
13680 71400 MT
(A newline sometimes appears in place of the space after these characters.)SH
ES
%%Page: 136 137
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(136)SH
35248 XM
(Formatting Conventions)SH
11 /Times-Roman AF
11520 7955 MT
(A space appears after comma, and semicolon, but none before. A newline)SH
11520 9332 MT
(often follows semicolon \050and sometimes comma\051 instead of a space.)SH
11520 11260 MT
(A space appears after colon.)SH
11520 13188 MT
(Except as required by adjacent tokens, no spaces appear before or after left)SH
11520 14565 MT
(and right parentheses, left and right square brackets, left and right curly)SH
11520 15942 MT
(brackets, caret \050up-arrow\051, dot-dot, and period. \050A newline follows the period)SH
11520 17319 MT
(at the end of a module.\051 If the token on the left \050or right\051 of these characters)SH
11520 18696 MT
(requires a space after \050or before\051 it, one should appear.  For example,)SH
11520 20073 MT
(consider the left parentheses in)SH
10 /Courier AF
14016 21728 MT
(PROCEDURE Positive\050x : INTEGER\051: BOOLEAN;)SH
11 /Times-Roman AF
11520 23514 MT
(and)SH
10 /Courier AF
14016 25169 MT
(TYPE Color = \050Red, Green, Blue\051;)SH
11 /Times-Roman AF
11520 27097 MT
(A space appears after left-comment and before right-comment.)SH
11520 29025 MT
(A semicolon follows the last statement in a statement sequence and the last)SH
11520 30402 MT
(field in a field list; this makes insertions and deletions somewhat easier.  You)SH
11520 31779 MT
(can eliminate internal semicolons in one-line statements:)SH
10 /Courier AF
14016 33434 MT
(IF a = 0 THEN DoThis\050a\051 ELSE DoThat\050a, b\051 END;)SH
14016 34465 MT
(IF p = NIL THEN EXIT END;)SH
11 /Times-Roman AF
11520 36516 MT
(Rules about spacing may be broken in order to align things nicely or to avoid)SH
11520 37893 MT
(visual groupings that don't match your intent.  For example, you might align)SH
11520 39270 MT
(type, variable, and constant definitions like:)SH
10 /Courier AF
14016 40925 MT
(CONST)SH
16416 41956 MT
(MaxElements =)
600 W( 1024;)SH
14016 42987 MT
(TYPE)SH
16416 44018 MT
(Element =)
3000 W( [0..255];)SH
16416 45049 MT
(ElementRange = [0..MaxElements-1];)SH
16416 46080 MT
(Elements =)
2400 W( ARRAY ElementRange of Element;)SH
14016 47111 MT
(VAR)SH
16416 48142 MT
(a :)
6600 W( INTEGER;)SH
16416 49173 MT
(bcd :)
5400 W( CHAR;)SH
16416 50204 MT
(efgh :)
4800 W( Elements;)SH
11 /Times-Roman AF
11520 52255 MT
(or you might add spaces around ``)SH
10 /Courier AF
(..)SH
11 /Times-Roman AF
('' if the lower or upper bound is an)SH
11520 53632 MT
(expression:)SH
10 /Courier AF
14016 55287 MT
(TYPE)SH
16416 56318 MT
(DoubleIndex = [0 .. 2*Entries-1];)SH
12 /Times-Roman AF
11520 60599 MT
(22.3. Indentation)SH
11 SS 
11520 62640 MT
(Indenting is used to emphasize program structure.  Each nesting level is the)SH
11520 64017 MT
(same width, usually three or four spaces wide.  The following illustrates the)SH
11520 65394 MT
(recommended form of each Modula-2 construct \050'ss' represents a statement)SH
11520 66771 MT
(sequence\051:)SH
ES
%%Page: 137 138
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Indentation)SH
46380 XM
(137)SH
/Courier SF
13680 7824 MT
(CASE expr OF)SH
26640 XM
(MODULE impl;)SH
39600 XM
(REPEAT)SH
13680 9020 MT
(| c1:)SH
42000 XM
(ss;)SH
16080 10216 MT
(ss;)SH
26640 XM
(IMPORT M1, M2;)SH
39600 XM
(UNTIL bool;)SH
13680 11412 MT
(| c2:)SH
26640 XM
(FROM M3 IMPORT)SH
16080 12608 MT
(ss;)SH
29040 XM
(x, y, z;)SH
39600 XM
(-------------------)SH
13680 13804 MT
(| ELSE)SH
26640 XM
(CONST)SH
16080 15000 MT
(ss;)SH
29040 XM
(A = 613;)SH
39600 XM
(TYPE)SH
13680 16196 MT
(END;)SH
26640 XM
(VAR)SH
42000 XM
(Index = [0..15];)SH
29040 17392 MT
(v : INTEGER;)SH
42000 XM
(Object = RECORD)SH
13680 18588 MT
(-------------------)SH
44400 XM
(f1 :)
2400 W( T1;)SH
26640 19784 MT
(PROCEDURE P\050\051;)SH
44400 XM
(f2, f3 : T2;)SH
13680 20980 MT
(CONST)SH
29040 XM
(VAR ch : CHAR;)SH
42000 XM
(END;)SH
16080 22176 MT
(A = 613;)SH
26640 XM
(BEGIN)SH
29040 23372 MT
(ss;)SH
39600 XM
(-------------------)SH
13680 24568 MT
(-------------------)SH
26640 XM
(END P;)SH
39600 25764 MT
(VAR)SH
13680 26960 MT
(FOR i := 0 TO 9 DO)SH
26640 XM
(BEGIN \050* impl *\051)SH
42000 XM
(x :)
1800 W( Type1;)SH
16080 28156 MT
(ss;)SH
29040 XM
(ss)SH
42000 XM
(y, z : Type2;)SH
13680 29352 MT
(END;)SH
26640 XM
(END impl.)SH
39600 30548 MT
(-------------------)SH
13680 31744 MT
(-------------------)SH
26640 XM
(-------------------)SH
39600 32940 MT
(WHILE bool do)SH
13680 34136 MT
(IF bool THEN)SH
26640 XM
(PROCEDURE P\050\051;)SH
42000 XM
(ss;)SH
16080 35332 MT
(ss;)SH
29040 XM
(VAR)SH
39600 XM
(END;)SH
13680 36528 MT
(ELSIF bool THEN)SH
31440 XM
(c : CHAR;)SH
16080 37724 MT
(ss;)SH
31440 XM
(i : [0..9];)SH
39600 XM
(-------------------)SH
13680 38920 MT
(ELSE)SH
26640 XM
(BEGIN)SH
16080 40116 MT
(ss;)SH
29040 XM
(ss;)SH
39600 XM
(WITH d DO)SH
13680 41312 MT
(END;)SH
26640 XM
(END P;)SH
42000 XM
(ss;)SH
39600 42508 MT
(END;)SH
13680 43704 MT
(-------------------)SH
13680 46096 MT
(LOOP)SH
16080 47292 MT
(ss;)SH
13680 48488 MT
(END;)SH
11 /Times-Roman AF
13680 51612 MT
(A statement sequence is indented under the construct that introduces it,)SH
13680 52989 MT
(which lines up vertically with its corresponding)SH
10 /Courier AF
34913 XM
(END)SH
11 /Times-Roman AF
(. Declarations are)SH
13680 54366 MT
(indented one level, including declarations of nested procedures.  \050Exception:)SH
13680 55743 MT
(the declarations in the outermost module are not indented; in a nested)SH
13680 57120 MT
(module, they would be.\051  If the declaration requires more than one line, its)SH
13680 58497 MT
(components are indented another level, with at most one type per line.)SH
13680 60425 MT
(The forms above only apply to constructs that do not fit on a single line. For)SH
13680 61802 MT
(example, if the statement sequence following a)SH
10 /Courier AF
34634 XM
(THEN)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
37584 XM
(ELSE)SH
11 /Times-Roman AF
(, or case label is)SH
13680 63179 MT
(short \050e.g., a single statement or a few short statements\051, it can appear on the)SH
13680 64556 MT
(same line with the tokens that introduce and terminate it. Similarly, if the)SH
13680 65933 MT
(statement sequence of a loop body is short \050even non-existent\051, it can be)SH
13680 67310 MT
(moved up to the line that introduces the loop, along with the trailing)SH
10 /Courier AF
43928 XM
(END)SH
11 /Times-Roman AF
(.)SH
13680 68687 MT
(Thus, these are all acceptable forms:)SH
ES
%%Page: 138 139
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(138)SH
35248 XM
(Formatting Conventions)SH
/Courier SF
14016 7824 MT
(IF bool THEN x := y; y := z END;)SH
14016 9886 MT
(FOR i := 1 TO 10 DO a[i] := 0 END;)SH
14016 11948 MT
(CASE x OF)SH
14016 12979 MT
(| 1..3 : y := 0;)SH
14016 14010 MT
(| 4)
SH( :)
1800 W( y := -1;)SH
14016 15041 MT
(| ELSE)
SH( y)
1200 W( := z;)SH
14016 16072 MT
(END)SH
11 /Times-Roman AF
11520 18000 MT
(Break long statements where white space would normally appear, and indent)SH
11520 19377 MT
(the continuation lines two levels.)SH
12 SS 
11520 23658 MT
(22.4. Comments)SH
11 SS 
11520 25699 MT
(The text of a multiline comment begins on the same line as the left-comment.)SH
11520 27076 MT
(Subsequent lines are indented the same as the left-comment. The terminating)SH
11520 28453 MT
(right-comment appears on the last line of the comment.)SH
10 /Courier AF
14016 30108 MT
(\050* A comment that fits entirely on one line by itself. *\051)SH
14016 32170 MT
(\050* A long comment that does not fit on one line, and)SH
15816 33201 MT
(the filler necessary to make it do so. *\051)SH
11 /Times-Roman AF
11520 35129 MT
(By convention, comments that refer to a group of items appear before the)SH
11520 36506 MT
(group. Comment)
275 W( boxes are often used to set off what is logically a section)SH
11520 37883 MT
(heading; they are constructed as follows:)SH
10 /Courier AF
11520 39538 MT
(\050******************\051)SH
11520 40569 MT
(\050* Section)
600 W( Name  *\051)SH
11520 41600 MT
(\050******************\051)SH
11 /Times-Roman AF
11520 44217 MT
(Do not use comment brackets to comment out a section of code.  Instead, use)SH
11520 45594 MT
(conditional compilation \050see Chapter17, page 95\051.)SH
12 SS 
11520 49875 MT
(22.5. Definition Modules)SH
11 SS 
11520 51916 MT
(A few additional guidelines make definition modules, which represent the)SH
11520 53293 MT
(most heavily read code, a bit more uniform from one to the next.)SH
11520 55221 MT
(Procedures whose headings don't fit on a single line should have each)SH
11520 56598 MT
(parameter listed on a separate line.  Each procedure should be immediately)SH
11520 57975 MT
(followed by a comment describing its operation \050if it is not evident from the)SH
11520 59352 MT
(procedure's name\051.  At least one blank line separates procedure declarations.)SH
10 /Courier AF
14016 61272 MT
(PROCEDURE ProcName\050)SH
20016 62303 MT
(parm1 : Type1;)SH
20016 63334 MT
(parm2 : Type2;)SH
16416 64365 MT
(CONST parm3 : Type3\051 : ReturnType)SH
14016 66427 MT
(\050* Short, one-line description of the procedure.)SH
14016 67458 MT
(More information, if necessary, appears here, in)SH
14016 68489 MT
(multiline comment format. *\051)SH
11 /Times-Roman AF
11520 70540 MT
(A general comment describing the interface as a whole should appear)SH
11520 71917 MT
(immediately following the module header, before any definitions.)SH
ES
%%Page: 139 140
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(139)SH
14 /Times-Roman AF
18783 11760 MT
(23. Compatibility with Ordinary Modula-2)SH
11 SS 
13680 15249 MT
(By default, you get non-standard, extended Modula-2, called ``WRL)SH
13680 16626 MT
(Modula-2'' throughout this chapter.  Use the ``)SH
10 /Courier AF
(-s)SH
11 /Times-Roman AF
('' switch to disable changes)SH
13680 18003 MT
(and extensions.  Unless otherwise noted, ``standard'' refers to)SH
/Times-Italic SF
41199 XM
(Programming)SH
13680 19380 MT
(in Modula-2, Third Corrected Edition)SH
/Times-Roman SF
(.)SH
/Courier SF
13680 21308 MT
([[)SH
/Times-Roman SF
15660 XM
(There are a few problems here: \0501\051 ``)SH
10 /Courier AF
(-s)SH
11 /Times-Roman AF
('' doesn't disable all extensions,)SH
13680 22685 MT
(\0502\051 there are places where ``)SH
10 /Courier AF
(-s)SH
11 /Times-Roman AF
('' doesn't restore normal Modula-2 semantics,)SH
13680 24062 MT
(and \0503\051 it's kind of hard to determine what exactly Modula-2 is, given the)SH
13680 25439 MT
(inconsistent definitions in Revisions 1 through 4 of the)SH
/Times-Italic SF
38095 XM
(Programming in)SH
13680 26816 MT
(Modula-2)SH
/Times-Roman SF
18293 XM
(book.)SH
/Courier SF
21428 XM
(]])SH
12 /Times-Roman AF
13680 31097 MT
(23.1. Semantic Changes)SH
11 SS 
13680 33138 MT
(Semantic changes let you write programs that look like ordinary Modula-2)SH
13680 34515 MT
(but have a different meaning.  They also may make it impossible to import)SH
13680 35892 MT
(code written in standard Modula-2, whatever that is.)SH
13680 37820 MT
(In standard Modula-2 uppercase letters are always distinct from lowercase)SH
13680 39197 MT
(letters; keywords, supplied identifiers, numbers, and octal characters are)SH
13680 40574 MT
(always written in uppercase.  In WRL Modula-2, keywords, supplied)SH
13680 41951 MT
(identifiers, and all identifiers defined in the special pseudo-modules can be)SH
13680 43328 MT
(written without regard to case.  You can also write numbers and octal)SH
13680 44705 MT
(characters without regard to case.)SH
13680 46633 MT
(In standard Modula-2 supplied identifiers are ``pervasive.''  Since they are)SH
13680 48010 MT
(automatically imported into a module, they cannot be redefined in a module,)SH
13680 49387 MT
(but only within a procedure.  In WRL Modula-2, supplied identifiers live in a)SH
13680 50764 MT
(magic scope, and can be redefined in modules as well as procedures.)SH
13680 52692 MT
(In standard Modula-2, an implementation module does not automatically)SH
13680 54069 MT
(inherit the import lists of its definition module, but must explicitly import)SH
13680 55446 MT
(these identifiers itself as needed.  In WRL Modula-2, an implementation)SH
13680 56823 MT
(module automatically imports everything that its definition module does.)SH
13680 58874 MT
(In standard Modula-2, a module can define an exported procedure in a nested)SH
13680 60251 MT
(module. In)
275 W( WRL Modula-2, an exported procedure must be defined at the)SH
13680 61628 MT
(outer level of the module.)SH
13680 63679 MT
(In standard Modula-2, the type)SH
10 /Courier AF
27548 XM
(CARDINAL)SH
11 /Times-Roman AF
32623 XM
(is defined to take the same)SH
13680 65056 MT
(number of bits of representation as)SH
10 /Courier AF
29258 XM
(INTEGER)SH
11 /Times-Roman AF
(, but is interpreted as an)SH
13680 66433 MT
(unsigned number; the two types are assignable, but not compatible.  This)SH
13680 67810 MT
(definition was used on the Lilith, a 16-bit computer.  In Wirth's Modula-2)SH
13680 69187 MT
(compiler for the Ceres, based upon the 32-bit NS32032 CPU, the type)SH
10 /Courier AF
13680 70564 MT
(CARDINAL)SH
11 /Times-Roman AF
18755 XM
(is defined as the subrange [0..MAXINT];)SH
10 /Courier AF
37203 XM
(INTEGER)SH
11 /Times-Roman AF
41678 XM
(and)SH
10 /Courier AF
13680 71941 MT
(CARDINAL)SH
11 /Times-Roman AF
18755 XM
(are compatible.  WRL Modula-2 takes the latter view, and)SH
ES
%%Page: 140 141
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(140)SH
28913 XM
(Compatibility with Ordinary Modula-2)SH
11 /Times-Roman AF
11520 7955 MT
(provides the)SH
10 /Courier AF
17202 XM
(UNSIGNED)SH
11 /Times-Roman AF
22277 XM
(type for a 32-bit unsigned representation.)SH
11520 9883 MT
(In standard Modula-2, you can assign a string constant to a fixed array of)SH
10 /Courier AF
11520 11260 MT
(CHAR)SH
11 /Times-Roman AF
14195 XM
(that is just large enough to hold the visible characters in the string.  In)SH
11520 12637 MT
(WRL Modula-2, the array must be large enough to hold a null byte at the end)SH
11520 14014 MT
(of the string.)SH
11520 15942 MT
(In standard Modula-2, a pointer simply points to memory.  In WRL)SH
11520 17319 MT
(Modula-2, a pointer points to memory that is preceded by a check word.)SH
11520 18696 MT
(You must compile without runtime checking, or use the)SH
10 /Courier AF
36328 XM
(@NOCHECK)SH
11 /Times-Roman AF
41403 XM
(pointer)SH
11520 20073 MT
(declaration, in order to get standard Modula-2 semantics.)SH
11520 22001 MT
(In standard Modula-2, the supplied procedure)SH
10 /Courier AF
31893 XM
(FLOAT)SH
11 /Times-Roman AF
35168 XM
(takes a standard)SH
10 /Courier AF
11520 23378 MT
(CARDINAL)SH
11 /Times-Roman AF
16595 XM
(parameter. In)
275 W( WRL Modula-2,)SH
10 /Courier AF
30614 XM
(FLOAT)SH
11 /Times-Roman AF
33889 XM
(takes an)SH
10 /Courier AF
37737 XM
(INTEGER)SH
11 /Times-Roman AF
11520 24755 MT
(parameter.)SH
11520 26683 MT
(Similarly,)SH
10 /Courier AF
16166 XM
(TRUNC)SH
11 /Times-Roman AF
19441 XM
(returns a)SH
10 /Courier AF
23533 XM
(CARDINAL)SH
11 /Times-Roman AF
28608 XM
(in standard Modula-2, but an)SH
10 /Courier AF
11520 28060 MT
(INTEGER)SH
11 /Times-Roman AF
15995 XM
(in WRL Modula-2.  Further, WRL Modula-2 allows the parameter)SH
11520 29437 MT
(to either)SH
10 /Courier AF
15430 XM
(REAL)SH
11 /Times-Roman AF
18105 XM
(or)SH
10 /Courier AF
19296 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
11520 31365 MT
(In standard Modula-2,)SH
10 /Courier AF
21600 XM
(INTEGER)SH
11 /Times-Roman AF
26075 XM
(and)SH
10 /Courier AF
27938 XM
(UNSIGNED)SH
11 /Times-Roman AF
33013 XM
(values can be passed to a)SH
10 /Courier AF
11520 32742 MT
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
20195 XM
(parameter. This)
275 W( is prohibited in WRL Modula-2 to catch)SH
11520 34119 MT
(the common error of passing the value of a variable, rather than the address)SH
11520 35496 MT
(of the variable, to an address parameter.)SH
11520 37424 MT
(In standard Modula-2, the type)SH
10 /Courier AF
25388 XM
(SYSTEM.PROCESS)SH
11 /Times-Roman AF
34063 XM
(used in procedures)SH
10 /Courier AF
11520 38801 MT
(SYSTEM.NEWPROCESS)SH
11 /Times-Roman AF
21995 XM
(and)SH
10 /Courier AF
23858 XM
(SYSTEM.TRANSFER)SH
11 /Times-Roman AF
33133 XM
(has been replaced by type)SH
10 /Courier AF
11520 40178 MT
(SYSTEM.ADDRESS)SH
11 /Times-Roman AF
20195 XM
(in the ``Third, Corrected Edition'' of)SH
/Times-Italic SF
36720 XM
(Programming in)SH
11520 41555 MT
(Modula-2)SH
/Times-Roman SF
(. Let's)
275 W( hope this is a typo, to be corrected in some later edition.)SH
12 SS 
11520 45836 MT
(23.2. Semantic Extensions)SH
11 SS 
11520 47877 MT
(Semantic extensions let you write programs that look syntactically like)SH
11520 49254 MT
(ordinary Modula-2, but use new supplied procedures or semantics that are)SH
11520 50631 MT
(upward-compatible with ordinary Modula-2.  Thus, none of these extensions)SH
11520 52008 MT
(affect the compilation of programs written in standard Modula-2.)SH
11520 54059 MT
(Standard Modula-2 doesn't interpret ``)SH
10 /Courier AF
(\134)SH
11 /Times-Roman AF
('' specially in literal strings, doesn't)SH
11520 55436 MT
(allow string comparisons, and doesn't allow a literal string to be assigned to)SH
11520 56813 MT
(an open array of)SH
10 /Courier AF
18970 XM
(CHAR)SH
11 /Times-Roman AF
(.)SH
11520 58864 MT
(In standard Modula-2, the basetype of a small non-negative subrange is)SH
10 /Courier AF
11520 60241 MT
(INTEGER)SH
11 /Times-Roman AF
(. In)
275 W( WRL Modula-2, the basetype of such subranges is either)SH
10 /Courier AF
11520 61618 MT
(INTEGER)SH
11 /Times-Roman AF
15995 XM
(or)SH
10 /Courier AF
17186 XM
(UNSIGNED)SH
11 /Times-Roman AF
(, depending upon context.)SH
11520 63546 MT
(In standard Modula-2,)SH
10 /Courier AF
21600 XM
(NIL)SH
11 /Times-Roman AF
23675 XM
(is not compatible with procedure types.)SH
11520 65474 MT
(In standard Modula-2, the supplied procedures)SH
10 /Courier AF
32321 XM
(MIN)SH
11 /Times-Roman AF
34396 XM
(and)SH
10 /Courier AF
36259 XM
(MAX)SH
11 /Times-Roman AF
38334 XM
(take one)SH
11520 66851 MT
(parameter, the name of an ordinal type, and return the first and last element)SH
11520 68228 MT
(of the type.  In WRL Modula-2 this meaning is retained for compatibility if)SH
11520 69605 MT
(one parameter is supplied; if two compatible ordinal or numeric expressions)SH
11520 70982 MT
(are supplied then they return the minimum and maximum expression,)SH
ES
%%Page: 141 142
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Semantic Extensions)SH
46380 XM
(141)SH
11 /Times-Roman AF
13680 7955 MT
(respectively. WRL)
275 W( Modula-2 provides the procedures)SH
10 /Courier AF
37932 XM
(FIRST)SH
11 /Times-Roman AF
41207 XM
(and)SH
10 /Courier AF
43070 XM
(LAST)SH
11 /Times-Roman AF
45745 XM
(to)SH
13680 9332 MT
(obtain the minimum and maximum values of numeric and ordinal types,)SH
13680 10709 MT
(including)SH
10 /Courier AF
18111 XM
(REAL)SH
11 /Times-Roman AF
20786 XM
(and)SH
10 /Courier AF
22649 XM
(LONGREAL)SH
11 /Times-Roman AF
(.)SH
13680 12637 MT
(Standard Modula-2 does not allow using the supplied procedure)SH
10 /Courier AF
42121 XM
(ORD)SH
11 /Times-Roman AF
44196 XM
(on a)SH
13680 14014 MT
(pointer.)SH
13680 15942 MT
(In standard Modula-2, the supplied procedure)SH
10 /Courier AF
34053 XM
(HALT)SH
11 /Times-Roman AF
36728 XM
(takes no parameters.  In)SH
13680 17319 MT
(WRL Modula-2,)SH
10 /Courier AF
21287 XM
(HALT)SH
11 /Times-Roman AF
23962 XM
(optionally takes an)SH
10 /Courier AF
32547 XM
(INTEGER)SH
11 /Times-Roman AF
37022 XM
(parameter, which is)SH
13680 18696 MT
(returned to the calling process.  If no parameter is supplied, the compiler)SH
13680 20073 MT
(assumes a value of 0, which is the normal termination status under UNIX.)SH
13680 22001 MT
(In standard Modula-2, the supplied procedure)SH
10 /Courier AF
34053 XM
(HIGH)SH
11 /Times-Roman AF
36728 XM
(takes a single parameter.)SH
13680 23378 MT
(In WRL Modula-2,)SH
10 /Courier AF
22478 XM
(HIGH)SH
11 /Times-Roman AF
25153 XM
(takes an optional second parameter to indicate)SH
13680 24755 MT
(which dimension of the array.)SH
13680 26683 MT
(WRL Modula-2 includes the non-standard supplied procedures)SH
10 /Courier AF
41691 XM
(LONGFLOAT)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
13680 28060 MT
(LOCAL)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
17230 XM
(ASSERT)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
21380 XM
(LOW)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
25593 XM
(NUMBER)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
30018 XM
(NEW)SH
11 /Times-Roman AF
32093 XM
(and)SH
10 /Courier AF
33956 XM
(DISPOSE)SH
11 /Times-Roman AF
38431 XM
(seem to be)SH
13680 29437 MT
(non-standard these days as well.  See Chapter 13, page 63 for further detail.)SH
12 SS 
13680 33718 MT
(23.3. Syntactic Extensions)SH
11 SS 
13680 35759 MT
(Syntactic extensions are upward-compatible changes to the syntax of the)SH
13680 37136 MT
(language. None)
275 W( of these extensions affect the compilation of standard)SH
13680 38513 MT
(Modula-2 programs.)SH
13680 40441 MT
(WRL Modula-2 allows the use of underscore and dollar signs in identifiers in)SH
13680 41818 MT
(order to make interfacing to other languages easier.)SH
13680 43746 MT
(WRL Modula-2 allows several of the supplied functions to be used in)SH
13680 45123 MT
(constant expressions.  This seems to be allowed in the Third Edition, but)SH
13680 46500 MT
(wasn't allowed in previous editions.)SH
13680 48428 MT
(In standard Modula-2, a definition module does not have an export list.  In)SH
13680 49805 MT
(WRL Modula-2, a definition module can have an export list to limit what is)SH
13680 51182 MT
(exported.)SH
13680 53110 MT
(WRL Modula-2 allows importing or exporting everything declared in a)SH
13680 54487 MT
(module by using ``)SH
10 /Courier AF
(*)SH
11 /Times-Roman AF
(''.)SH
13680 56415 MT
(WRL Modula-2 allows inline and external procedures, as well as external)SH
13680 57792 MT
(variables.)SH
13680 59843 MT
(WRL Modula-2 allows definition modules to be specified)SH
10 /Courier AF
39404 XM
(@NOINIT)SH
11 /Times-Roman AF
43879 XM
(in order)SH
13680 61220 MT
(to avoid having empty implementation modules lying around.)SH
13680 63271 MT
(WRL Modula-2 provides dynamic arrays, subarray parameters, and)SH
13680 64648 MT
(multi-dimension open array parameters.)SH
13680 66699 MT
(WRL Modula-2 provides the)SH
10 /Courier AF
26694 XM
(@SIZE)SH
11 /Times-Roman AF
29969 XM
(and)SH
10 /Courier AF
31832 XM
(@ALIGN)SH
11 /Times-Roman AF
35707 XM
(type constructors, as well)SH
13680 68076 MT
(as sized opaque types.)SH
13680 70004 MT
(WRL Modula-2 allows you to specify the ordinal values associated with)SH
13680 71381 MT
(enumerated type constants.)SH
ES
%%Page: 142 143
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(142)SH
28913 XM
(Compatibility with Ordinary Modula-2)SH
11 /Times-Roman AF
11520 7955 MT
(WRL Modula-2 provides a direction specifier to control whether records and)SH
11520 9332 MT
(sets are laid out least-significant-to-most-significant, or vice-versa.)SH
11520 11260 MT
(WRL Modula-2 allows many kinds of pointer declarations in order to)SH
11520 12637 MT
(interface with other languages.  Note also the problem with the pointer check)SH
11520 14014 MT
(word described above in Section 23.1, page 139.)SH
11520 15942 MT
(WRL Modula-2 allows the declaration of)SH
10 /Courier AF
29970 XM
(CONST)SH
11 /Times-Roman AF
33245 XM
(parameters in procedure)SH
11520 17319 MT
(headings.)SH
11520 19247 MT
(WRL Modula-2 allows you to use selection operators dot, uparrow, square)SH
11520 20624 MT
(brackets, and parentheses after a procedure call or type transfer.)SH
11520 22552 MT
(WRL Modula-2 type transfer return a constant, expression, or variable from a)SH
11520 23929 MT
(type transfer.)SH
11520 25857 MT
(WRL Modula-2 extends the)SH
10 /Courier AF
24106 XM
(EXIT)SH
11 /Times-Roman AF
26781 XM
(statement to allow you to exit from a)SH
10 /Courier AF
11520 27234 MT
(REPEAT)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
15670 XM
(WHILE)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
20411 XM
(FOR)SH
11 /Times-Roman AF
22486 XM
(loop.)SH
ES
%%Page: 143 144
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(143)SH
14 /Times-Roman AF
27611 11760 MT
(Appendix I)SH
25472 13137 MT
(Railroad Diagrams)SH
11 SS 
13680 16626 MT
(Drawings in maintainable PostScript solicited.  In particular, Bill Kalsow)SH
13680 18003 MT
(gave me some nice PostScript routines for drawing Modula-3 syntax, which)SH
13680 19380 MT
(could be modified for Modula-2 by an interested party.)SH
ES
%%Page: 144 145
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(144)SH
39470 XM
(Wirth's EBNF)SH
ES
%%Page: 145 146
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(145)SH
14 /Times-Roman AF
27378 11760 MT
(Appendix II)SH
26677 13137 MT
(Wirth's EBNF)SH
12 SS 
13680 17418 MT
(II.1. Notation)SH
11 SS 
13680 19459 MT
(Wirth's notation is an extended Backus-Naur formalism called EBNF [2].)SH
13680 21387 MT
(One form followed by another means that the first form is followed by the)SH
13680 22764 MT
(second form.)SH
13680 24692 MT
(Square brackets [] mean that the enclosed form is optional.)SH
13680 26620 MT
(Curly brackets {} mean that the enclosed form is repeated \050possibly 0 times\051.)SH
13680 28548 MT
(Vertical bar | means that either the form on the left side of the bar or the form)SH
13680 29925 MT
(on the right side of the bar is chosen.)SH
13680 31853 MT
(Parentheses \050\051 mean that the enclosed form is a unit.  This is especially)SH
13680 33230 MT
(important when used with vertical bar |, as the bar binds more weakly than)SH
13680 34607 MT
(does sequentiality.)SH
13680 36535 MT
(Non-terminals have names that are meant to express their intuitive meaning)SH
13680 37912 MT
(and written in uppers and lowers.)SH
13680 39840 MT
(Terminal symbols that are reserved words are written in capital letters.)SH
13680 41768 MT
(Terminal symbols that are punctuation are enclosed in quotes.)SH
/Courier SF
13680 43696 MT
([[)SH
/Times-Roman SF
15660 XM
(Should I show EBNF syntax in EBNF?)SH
/Courier SF
33616 XM
(]])SH
12 /Times-Roman AF
13680 47977 MT
(II.2. Syntax in Wirth's EBNF)SH
11 SS 
13680 50018 MT
(These numbers are production numbers, not line numbers.)SH
12 SS 
13680 53213 MT
(II.2.1. Basic Language Symbols)SH
10 /Courier AF
17376 55123 MT
(10 ident)
600 W( = \050"_" | letter\051 {letter | "_" | digit})SH
17376 56154 MT
(20 number)
600 W( = integer | real)SH
17376 57185 MT
(30 integer)
600 W( =)SH
22176 58216 MT
(digit {digit})SH
20976 59247 MT
(| octalDigit {octalDigit} \050"b" | "B"\051)SH
20976 60278 MT
(| digit {hexDigit} \050"h" | "H"\051)SH
17376 61309 MT
(40 digit)
600 W( = octalDigit | "8" | "9")SH
17376 62340 MT
(50 octalDigit)
600 W( = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")SH
17376 63371 MT
(60 hexDigit)
600 W( =)SH
22176 64402 MT
(digit)SH
20976 65433 MT
(| "a" | "b" | "c" | "d" | "e" | "f")SH
20976 66464 MT
(| "A" | "B" | "C" | "D" | "E" | "F")SH
17376 67495 MT
(70 real)
600 W( =)
3600 W( digit {digit} "." {digit} [ScaleFactor])SH
17376 68526 MT
(80 ScaleFactor)
600 W( = \050"e" | "E"\051 ["+" | "-"] digit {digit})SH
17376 69557 MT
(90 octalChar)
600 W( = octalDigit {octalDigit} \050"c" | "C"\051)SH
16776 70588 MT
(100 string)
600 W( = "'" {character} "'" | '"' {character} '"')SH
ES
%%Page: 146 147
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(146)SH
39470 XM
(Wirth's EBNF)SH
12 /Times-Roman AF
11520 8023 MT
(II.2.2. Constant Expressions)SH
10 /Courier AF
14616 9933 MT
(110 ConstExpr)
600 W( = SimpleConstExpr [relation SimpleConstExpr])SH
14616 10964 MT
(120 SimpleConstExpr)
600 W( = ["+" | "-"] ConstTerm {AddOperator ConstTerm})SH
14616 11995 MT
(130 ConstTerm)
600 W( = ConstFactor {MulOperator ConstFactor})SH
14616 13026 MT
(140 ConstFactor)
600 W( =)SH
20016 14057 MT
(number | octalChar | string | ConstSet |  NOT ConstFactor)SH
18816 15088 MT
(| qualident [ConstParameters] | "\050" ConstExpr "\051")SH
14616 16119 MT
(150 ConstSet)
600 W( = [qualident] "{" [ConstElement {"," ConstElement}] "}")SH
14616 17150 MT
(160 ConstElement)
600 W( = ConstExpr [".." ConstExpr])SH
14616 18181 MT
(170 qualident)
600 W( = ident {"." ident})SH
14616 19212 MT
(180 ConstParameters)
600 W( = "\050" [ConstExpr {"," ConstExpr}] "\051")SH
12 /Times-Roman AF
11520 22407 MT
(II.2.3. Types)SH
10 /Courier AF
14616 24317 MT
(200 type)
600 W( =)SH
20016 25348 MT
(qualident | EnumerationType | SubrangeType | ArrayType)SH
18816 26379 MT
(| RecordType | SetType | PointerType | ProcedureType)SH
18816 27410 MT
(| RepresentationType)SH
14616 28441 MT
(210 OrdinalType)
600 W( = qualident | EnumerationType | SubrangeType)SH
14616 29472 MT
(220 EnumerationType)
600 W( = "\050" EnumerationConst {"," EnumerationConst} "\051")SH
14616 30503 MT
(230 EnumerationConst)
600 W( = ident ["=" ConstExpr])SH
14616 31534 MT
(240 SubrangeType)
600 W( = [qualident] "[" ConstExpr ".." ConstExpr "]")SH
14616 32565 MT
(250 ArrayType)
600 W( =)SH
20016 33596 MT
(FixedArrayType | DynamicArrayType)SH
18816 34627 MT
(| OpenArrayType | SubarrayType)SH
14616 35658 MT
(260 FixedArrayType)
600 W( = ARRAY OrdinalType {"," OrdinalType} OF type)SH
14616 36689 MT
(270 DynamicArrayType)
600 W( =)SH
20016 37720 MT
(DYNARRAY [PointerKind] OF {ARRAY OF} type)SH
18816 38751 MT
(| DYNARRAY [PointerKind] @NOCOUNT OF type)SH
14616 39782 MT
(280 OpenArrayType)
600 W( =)SH
20016 40813 MT
(ARRAY OF {ARRAY OF} qualident)SH
18816 41844 MT
(| ARRAY @NOCOUNT OF qualident)SH
14616 42875 MT
(290 SubarrayType)
600 W( = SUBARRAY OF {ARRAY OF} qualident)SH
14616 43906 MT
(300 RecordType)
600 W( = RECORD [Direction] Fields END)SH
14616 44937 MT
(310 Direction)
600 W( = @LEFTTORIGHT | @RIGHTTOLEFT)SH
14616 45968 MT
(320 Fields)
600 W( = FieldList {";" FieldList})SH
14616 46999 MT
(330 FieldList)
600 W( = [IdentList ":" type | FieldCase])SH
14616 48030 MT
(340 IdentList)
600 W( = ident {"," ident})SH
14616 49061 MT
(350 FieldCase)
600 W( =)SH
20016 50092 MT
(CASE [[ident] ":"] TagType OF variant {"|" variant})SH
20016 51123 MT
([ELSE Fields] END)SH
14616 52154 MT
(360 TagType)
600 W( = {Representation} qualident)SH
14616 53185 MT
(370 variant)
600 W( = [CaseLabel {"," CaseLabel} ":" Fields])SH
14616 54216 MT
(380 CaseLabel)
600 W( = ConstExpr [".." ConstExpr])SH
14616 55247 MT
(390 SetType)
600 W( = SET [Direction] OF OrdinalType)SH
14616 56278 MT
(400 PointerType)
600 W( = POINTER [PointerKind] TO type)SH
14616 57309 MT
(410 PointerKind)
600 W( = @PASCAL | @C | @NOCHECK | @NILCHECK | @LOCAL)SH
14616 58340 MT
(420 ProcedureType)
600 W( = PROCEDURE [FormalTypes] [":" qualident])SH
14616 59371 MT
(430 FormalTypes)
600 W( = "\050" [FormalType {"," FormalType}] "\051")SH
14616 60402 MT
(440 FormalType)
600 W( =)SH
20016 61433 MT
([CONST | VAR] \050qualident | OpenArrayType | SubarrayType\051)SH
14616 62464 MT
(450 RepresentationType)
600 W( = Representation type)SH
14616 63495 MT
(460 Representation)
600 W( = \050@SIZE | @ALIGN\051 ConstExpr)SH
ES
%%Page: 147 148
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Syntax in Wirth's EBNF)SH
46380 XM
(147)SH
12 /Times-Roman AF
13680 8023 MT
(II.2.4. Expressions)SH
10 /Courier AF
16776 9933 MT
(500 expression)
600 W( = SimpleExpression [relation SimpleExpression])SH
16776 10964 MT
(510 relation)
600 W( = "=" | "#" | "<>" | "<" | "<=" | ">" | ">=" | IN)SH
16776 11995 MT
(520 SimpleExpression)
600 W( = ["+" | "-"] term {AddOperator term})SH
16776 13026 MT
(530 AddOperator)
600 W( = "+" | "-" | OR)SH
16776 14057 MT
(540 term)
600 W( = factor {MulOperator factor})SH
16776 15088 MT
(550 MulOperator)
600 W( = "*" | "/" | DIV | MOD | AND | "&")SH
16776 16119 MT
(560 factor)
600 W( = number | octalChar | string | set | designator)SH
20976 17150 MT
(| "\050" expression "\051" | NOT factor)SH
16776 18181 MT
(570 set)
600 W( = [qualident] "{" [element {"," element}] "}")SH
16776 19212 MT
(580 element)
600 W( = expression [".." expression])SH
16776 20243 MT
(590 designator)
600 W( = qualident)SH
22176 21274 MT
({"." ident | "[" SubscriptList "]" | "^" | ActualParameters})SH
16776 22305 MT
(600 SubscriptList)
600 W( = subscript {"," subscript})SH
16776 23336 MT
(610 subscript)
600 W( = expression [":" expression])SH
16776 24367 MT
(620 ActualParameters)
600 W( = "\050" [expression {"," expression}] "\051")SH
12 /Times-Roman AF
13680 27562 MT
(II.2.5. Statements)SH
10 /Courier AF
16776 29472 MT
(700 statements)
600 W( = statement {";" statement})SH
16776 30503 MT
(710 statement)
600 W( =)SH
20976 31534 MT
([ assignment | ProcedureCall | IfStatement | CaseStatement)SH
20976 32565 MT
(| WhileStatement | RepeatStatement | LoopStatement)SH
20976 33596 MT
(| ForStatement | WithStatement | ExitStatement)SH
20976 34627 MT
(| ReturnStatement)SH
20976 35658 MT
(])SH
16776 36689 MT
(720 assignment)
600 W( = designator ":=" expression)SH
16776 37720 MT
(730 ProcedureCall)
600 W( = designator [ActualParameters])SH
16776 38751 MT
(740 IfStatement)
600 W( =)SH
20976 39782 MT
(IF BooleanExpression THEN statements)SH
20976 40813 MT
({ELSIF BooleanExpression THEN statements})SH
20976 41844 MT
([ELSE statements])SH
20976 42875 MT
(END)SH
16776 43906 MT
(750 BooleanExpression)
600 W( = expression)SH
16776 44937 MT
(760 CaseStatement)
600 W( =)SH
20976 45968 MT
(CASE OrdinalExpression OF case {"|" case})SH
20976 46999 MT
([ELSE statements])SH
20976 48030 MT
(END)SH
16776 49061 MT
(770 OrdinalExpression)
600 W( = expression)SH
16776 50092 MT
(780 case)
600 W( = [CaseLabel {"," CaseLabel} ":" statements])SH
16776 51123 MT
(790 WhileStatement)
600 W( =)SH
20976 52154 MT
(WHILE BooleanExpression DO statements END)SH
16776 53185 MT
(800 RepeatStatement)
600 W( =)SH
20976 54216 MT
(REPEAT statements UNTIL BooleanExpression)SH
16776 55247 MT
(810 ForStatement)
600 W( =)SH
20976 56278 MT
(FOR ident ":=" OrdinalExpression TO OrdinalExpression)SH
20976 57309 MT
([BY ConstExpr] DO statements END)SH
16776 58340 MT
(820 LoopStatement)
600 W( = LOOP statements END)SH
16776 59371 MT
(830 WithStatement)
600 W( = WITH designator DO statements END)SH
16776 60402 MT
(840 ExitStatement)
600 W( = EXIT [LOOP | FOR | WHILE | REPEAT])SH
16776 61433 MT
(850 ReturnStatement)
600 W( = RETURN [expression])SH
ES
%%Page: 148 149
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(148)SH
39470 XM
(Wirth's EBNF)SH
12 /Times-Roman AF
11520 8023 MT
(II.2.6. Procedures)SH
10 /Courier AF
14616 9933 MT
(900 ProcedureDeclaration)
600 W( = ProcedureHeading ";" block ident)SH
14616 10964 MT
(910 ProcedureHeading)
600 W( =)SH
18816 11995 MT
(PROCEDURE ProcedureName [FormalParams] [":" qualident])SH
14616 13026 MT
(920 ProcedureName)
600 W( =)SH
20016 14057 MT
([@EXTERNAL | @INLINE | @ASM] ident)SH
18816 15088 MT
(| ident string)SH
14616 16119 MT
(930 block)
600 W( = {declaration} [BEGIN statements] END)SH
14616 17150 MT
(940 declaration)
600 W( =)SH
20016 18181 MT
(CONST {ident "=" ConstExpr ";"})SH
18816 19212 MT
(| TYPE {ident "=" type ";"})SH
18816 20243 MT
(| VAR {\050[@EXTERNAL] IdentList | ident string\051 ":" type ";"})SH
18816 21274 MT
(| ProcedureDeclaration ";")SH
18816 22305 MT
(| ModuleDeclaration ";")SH
14616 23336 MT
(950 FormalParams)
600 W( = "\050" [ FormalParam {";" FormalParam}] "\051")SH
14616 24367 MT
(960 FormalParam)
600 W( = [CONST | VAR] IdentList ":")SH
18816 25398 MT
(\050qualident | OpenArrayType | SubarrayType\051)SH
12 /Times-Roman AF
11520 28593 MT
(II.2.7. Modules)SH
10 /Courier AF
14016 30503 MT
(1000 CompilationUnit)
600 W( =)SH
20016 31534 MT
(DefinitionModule | [IMPLEMENTATION] ProgramModule)SH
14016 32565 MT
(1010 DefinitionModule)
600 W( =)SH
18816 33596 MT
(DEFINITION MODULE ident [@NOINIT] ";")SH
20616 34627 MT
({import} [export] {definition})SH
18816 35658 MT
(END ident ".")SH
14016 36689 MT
(1020 import)
600 W( = [FROM ident] IMPORT IdentList ";")SH
21816 37720 MT
(| FROM)
600 W( ident IMPORT "*" ";")SH
14016 38751 MT
(1030 export)
600 W( = EXPORT [QUALIFIED] IdentList ";" | EXPORT "*" ";")SH
14016 39782 MT
(1040 definition)
600 W( =)SH
20016 40813 MT
(CONST {ident "=" ConstExpr ";"})SH
18816 41844 MT
(| TYPE {\050ident "=" type | OpaqueDeclaration\051 ";"})SH
18816 42875 MT
(| VAR {\050[@EXTERNAL] IdentList | ident string\051 ":" type ";"})SH
18816 43906 MT
(| ProcedureHeading ";")SH
14016 44937 MT
(1050 OpaqueDeclaration)
600 W( = ident ["=" @SIZE ConstExpr])SH
14016 45968 MT
(1060 ProgramModule)
600 W( =)SH
18816 46999 MT
(MODULE ident [priority] ";" {import} block ident ".")SH
14016 48030 MT
(1070 priority)
600 W( = "[" ConstExpr "]")SH
14016 49061 MT
(1080 ModuleDeclaration)
600 W( =)SH
18816 50092 MT
(MODULE ident [priority] ";" {import} [export] block ident)SH
ES
%%Page: 149 150
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Syntax in Wirth's EBNF)SH
46380 XM
(149)SH
12 /Times-Roman AF
13680 8023 MT
(II.3. Alphabetically Ordered EBNF)SH
11 SS 
13680 10064 MT
(The numbers refer to the production numbers above.)SH
10 /Courier AF
16776 11719 MT
(620 ActualParameters)
600 W( = "\050" [expression {"," expression}] "\051")SH
16776 12750 MT
(530 AddOperator)
600 W( = "+" | "-" | OR)SH
16776 13781 MT
(250 ArrayType)
600 W( =)SH
22176 14812 MT
(FixedArrayType | DynamicArrayType)SH
20976 15843 MT
(| OpenArrayType | SubarrayType)SH
16776 16874 MT
(720 assignment)
600 W( = designator ":=" expression)SH
16776 18936 MT
(930 block)
600 W( = {declaration} [BEGIN statements] END)SH
16776 19967 MT
(750 BooleanExpression)
600 W( = expression)SH
16776 22029 MT
(780 case)
600 W( = [CaseLabel {"," CaseLabel} ":" statements])SH
16776 23060 MT
(380 CaseLabel)
600 W( = ConstExpr [".." ConstExpr])SH
16776 24091 MT
(760 CaseStatement)
600 W( =)SH
20976 25122 MT
(CASE OrdinalExpression OF case {"|" case})SH
20976 26153 MT
([ELSE statements])SH
20976 27184 MT
(END)SH
16176 28215 MT
(1000 CompilationUnit)
600 W( =)SH
22176 29246 MT
(DefinitionModule | [IMPLEMENTATION] ProgramModule)SH
16776 30277 MT
(160 ConstElement)
600 W( = ConstExpr [".." ConstExpr])SH
16776 31308 MT
(110 ConstExpr)
600 W( = SimpleConstExpr [relation SimpleConstExpr])SH
16776 32339 MT
(140 ConstFactor)
600 W( =)SH
22176 33370 MT
(number | octalChar | string | ConstSet |  NOT ConstFactor)SH
20976 34401 MT
(| qualident [ConstParameters] | "\050" ConstExpr "\051")SH
16776 35432 MT
(180 ConstParameters)
600 W( = "\050" [ConstExpr {"," ConstExpr}] "\051")SH
16776 36463 MT
(150 ConstSet)
600 W( = [qualident] "{" [ConstElement {"," ConstElement}] "}")SH
16776 37494 MT
(130 ConstTerm)
600 W( = ConstFactor {MulOperator ConstFactor})SH
16776 39556 MT
(940 declaration)
600 W( =)SH
22176 40587 MT
(CONST {ident "=" ConstExpr ";"})SH
20976 41618 MT
(| TYPE {ident "=" type ";"})SH
20976 42649 MT
(| VAR {\050[@EXTERNAL] IdentList | ident string\051 ":" type ";"})SH
20976 43680 MT
(| ProcedureDeclaration ";")SH
20976 44711 MT
(| ModuleDeclaration ";")SH
16176 45742 MT
(1040 definition)
600 W( =)SH
22176 46773 MT
(CONST {ident "=" ConstExpr ";"})SH
20976 47804 MT
(| TYPE {\050ident "=" type | OpaqueDeclaration\051 ";"})SH
20976 48835 MT
(| VAR {\050[@EXTERNAL] IdentList | ident string\051 ":" type ";"})SH
20976 49866 MT
(| ProcedureHeading ";")SH
16176 50897 MT
(1010 DefinitionModule)
600 W( =)SH
20976 51928 MT
(DEFINITION MODULE ident [@NOINIT] ";")SH
22776 52959 MT
({import} [export] {definition})SH
20976 53990 MT
(END ident ".")SH
16776 55021 MT
(590 designator)
600 W( = qualident)SH
22176 56052 MT
({"." ident | "[" SubscriptList "]" | "^" | ActualParameters})SH
17376 57083 MT
(40 digit)
600 W( = octalDigit | "8" | "9")SH
16776 58114 MT
(310 Direction)
600 W( = @LEFTTORIGHT | @RIGHTTOLEFT)SH
16776 59145 MT
(270 DynamicArrayType)
600 W( =)SH
22176 60176 MT
(DYNARRAY [PointerKind] OF {ARRAY OF} type)SH
20976 61207 MT
(| DYNARRAY [PointerKind] @NOCOUNT OF type)SH
16776 63269 MT
(580 element)
600 W( = expression [".." expression])SH
16776 64300 MT
(230 EnumerationConst)
600 W( = ident ["=" ConstExpr])SH
16776 65331 MT
(220 EnumerationType)
600 W( = "\050" EnumerationConst {"," EnumerationConst} "\051")SH
16776 66362 MT
(840 ExitStatement)
600 W( = EXIT [LOOP | FOR | WHILE | REPEAT])SH
16176 67393 MT
(1030 export)
600 W( = EXPORT [QUALIFIED] IdentList ";" | EXPORT "*" ";")SH
16776 68424 MT
(500 expression)
600 W( = SimpleExpression [relation SimpleExpression])SH
16776 70486 MT
(560 factor)
600 W( = number | octalChar | string | set | designator)SH
20976 71517 MT
(| "\050" expression "\051" | NOT factor)SH
ES
%%Page: 150 151
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(150)SH
39470 XM
(Wirth's EBNF)SH
/Courier SF
14616 7824 MT
(350 FieldCase)
600 W( =)SH
20016 8855 MT
(CASE [[ident] ":"] TagType OF variant {"|" variant})SH
20016 9886 MT
([ELSE Fields] END)SH
14616 10917 MT
(330 FieldList)
600 W( = [IdentList ":" type | FieldCase])SH
14616 11948 MT
(320 Fields)
600 W( = FieldList {";" FieldList})SH
14616 12979 MT
(260 FixedArrayType)
600 W( = ARRAY OrdinalType {"," OrdinalType} OF type)SH
14616 14010 MT
(960 FormalParam)
600 W( = [CONST | VAR] IdentList ":")SH
18816 15041 MT
(\050qualident | OpenArrayType | SubarrayType\051)SH
14616 16072 MT
(950 FormalParams)
600 W( = "\050" [ FormalParam {";" FormalParam}] "\051")SH
14616 17103 MT
(440 FormalType)
600 W( =)SH
20016 18134 MT
([CONST | VAR] \050qualident | OpenArrayType | SubarrayType\051)SH
14616 19165 MT
(430 FormalTypes)
600 W( = "\050" [FormalType {"," FormalType}] "\051")SH
14616 20196 MT
(810 ForStatement)
600 W( =)SH
18816 21227 MT
(FOR ident ":=" OrdinalExpression TO OrdinalExpression)SH
18816 22258 MT
([BY ConstExpr] DO statements END)SH
15216 24320 MT
(60 hexDigit)
600 W( =)SH
20016 25351 MT
(digit)SH
18816 26382 MT
(| "a" | "b" | "c" | "d" | "e" | "f")SH
18816 27413 MT
(| "A" | "B" | "C" | "D" | "E" | "F")SH
15216 29475 MT
(10 ident)
600 W( = \050letter | "_"\051 {letter | "_" | "$" | digit})SH
14616 30506 MT
(340 IdentList)
600 W( = ident {"," ident})SH
14616 31537 MT
(740 IfStatement)
600 W( =)SH
18816 32568 MT
(IF BooleanExpression THEN statements)SH
18816 33599 MT
({ELSIF BooleanExpression THEN statements})SH
18816 34630 MT
([ELSE statements])SH
18816 35661 MT
(END)SH
14016 36692 MT
(1020 import)
600 W( = [FROM ident] IMPORT IdentList ";")SH
21816 37723 MT
(| FROM)
600 W( ident IMPORT "*" ";")SH
15216 38754 MT
(30 integer)
600 W( =)SH
20016 39785 MT
(digit {digit})SH
18816 40816 MT
(| octalDigit {octalDigit} \050"b" | "B"\051)SH
18816 41847 MT
(| digit {hexDigit} \050"h" | "H"\051)SH
14616 43909 MT
(820 LoopStatement)
600 W( = LOOP statements END)SH
14016 45971 MT
(1080 ModuleDeclaration)
600 W( =)SH
18816 47002 MT
(MODULE ident [priority] ";" {import} [export] block ident)SH
14616 48033 MT
(550 MulOperator)
600 W( = "*" | "/" | DIV | MOD | AND | "&")SH
15216 50095 MT
(20 number)
600 W( = integer | real)SH
15216 52157 MT
(90 octalChar)
600 W( = octalDigit {octalDigit} \050"c" | "C"\051)SH
15216 53188 MT
(50 octalDigit)
600 W( = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")SH
14016 54219 MT
(1050 OpaqueDeclaration)
600 W( = ident ["=" @SIZE ConstExpr])SH
14616 55250 MT
(280 OpenArrayType)
600 W( =)SH
20016 56281 MT
(ARRAY OF {ARRAY OF} qualident)SH
18816 57312 MT
(| ARRAY @NOCOUNT OF qualident)SH
14616 58343 MT
(770 OrdinalExpression)
600 W( = expression)SH
14616 59374 MT
(210 OrdinalType)
600 W( = qualident | EnumerationType | SubrangeType)SH
14616 61436 MT
(410 PointerKind)
600 W( = @PASCAL | @C | @NOCHECK | @NILCHECK | @LOCAL)SH
14616 62467 MT
(400 PointerType)
600 W( = POINTER [PointerKind] TO type)SH
14016 63498 MT
(1070 priority)
600 W( = "[" ConstExpr "]")SH
14616 64529 MT
(730 ProcedureCall)
600 W( = designator [ActualParameters])SH
14616 65560 MT
(900 ProcedureDeclaration)
600 W( = ProcedureHeading ";" block ident)SH
14616 66591 MT
(910 ProcedureHeading)
600 W( =)SH
18816 67622 MT
(PROCEDURE ProcedureName [FormalParams] [":" qualident])SH
14616 68653 MT
(920 ProcedureName)
600 W( =)SH
20016 69684 MT
([@EXTERNAL | @INLINE | @ASM] ident)SH
14616 70715 MT
(420 ProcedureType)
600 W( = PROCEDURE [FormalTypes] [":" qualident])SH
ES
%%Page: 151 152
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Alphabetically Ordered EBNF)SH
46380 XM
(151)SH
/Courier SF
16176 7824 MT
(1060 ProgramModule)
600 W( =)SH
20976 8855 MT
(MODULE ident [priority] ";" {import} block ident ".")SH
16776 12031 MT
(170 qualident)
600 W( = ident {"." ident})SH
17376 14093 MT
(70 real)
600 W( = digit {digit} "." {digit} [ScaleFactor])SH
16776 15124 MT
(300 RecordType)
600 W( = RECORD [Direction] Fields END)SH
16776 16155 MT
(510 relation)
600 W( = "=" | "#" | "<>" | "<" | "<=" | ">" | ">=" | IN)SH
16776 17186 MT
(800 RepeatStatement)
600 W( =)SH
20976 18217 MT
(REPEAT statements UNTIL BooleanExpression)SH
16776 19248 MT
(460 Representation)
600 W( = \050@SIZE | @ALIGN\051 ConstExpr)SH
16776 20279 MT
(450 RepresentationType)
600 W( = Representation type)SH
16776 21310 MT
(850 ReturnStatement)
600 W( = RETURN [expression])SH
17376 23372 MT
(80 ScaleFactor)
600 W( = \050"e" | "E"\051 ["+" | "-"] digit {digit})SH
16776 24403 MT
(570 set)
600 W( = [qualident] "{" [element {"," element}] "}")SH
16776 25434 MT
(390 SetType)
600 W( = SET [Direction] OF OrdinalType)SH
16776 26465 MT
(120 SimpleConstExpr)
600 W( = ["+" | "-"] ConstTerm {AddOperator ConstTerm})SH
16776 27496 MT
(520 SimpleExpression)
600 W( = ["+" | "-"] term {AddOperator term})SH
16776 28527 MT
(710 statement)
600 W( =)SH
20976 29558 MT
([ assignment | ProcedureCall | IfStatement | CaseStatement)SH
20976 30589 MT
(| WhileStatement | RepeatStatement | LoopStatement)SH
20976 31620 MT
(| ForStatement | WithStatement | ExitStatement)SH
20976 32651 MT
(| ReturnStatement)SH
20976 33682 MT
(])SH
16776 34713 MT
(700 statements)
600 W( = statement {";" statement})SH
16776 35744 MT
(100 string)
600 W( = "'" {character} "'" | '"' {character} '"')SH
16776 36775 MT
(290 SubarrayType)
600 W( = SUBARRAY OF {ARRAY OF} qualident)SH
16776 37806 MT
(240 SubrangeType)
600 W( = [qualident] "[" ConstExpr ".." ConstExpr "]")SH
16776 38837 MT
(610 subscript)
600 W( = expression [":" expression])SH
16776 39868 MT
(600 SubscriptList)
600 W( = subscript {"," subscript})SH
16776 41930 MT
(360 TagType)
600 W( = {Representation} qualident)SH
16776 42961 MT
(540 term)
600 W( = factor {MulOperator factor})SH
16776 43992 MT
(200 type)
600 W( =)SH
22176 45023 MT
(qualident | EnumerationType | SubrangeType | ArrayType)SH
20976 46054 MT
(| RecordType | SetType | PointerType | ProcedureType)SH
20976 47085 MT
(| Representation type)SH
16776 49147 MT
(370 variant)
600 W( = [CaseLabel {"," CaseLabel} ":" Fields])SH
16776 51209 MT
(790 WhileStatement)
600 W( =)SH
20976 52240 MT
(WHILE BooleanExpression DO statements END)SH
16776 53271 MT
(830 WithStatement)
600 W( = WITH designator DO statements END)SH
ES
%%Page: 152 153
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(152)SH
41056 XM
(References)SH
ES
%%Page: 153 154
BS
0 SI
10 /Times-Bold AF
46380 4270 MT
(153)SH
14 /Times-Roman AF
27669 11760 MT
(References)SH
11 SS 
13680 15249 MT
([1])SH
16980 XM
(J. G. Mitchell et al.)SH
/Times-Italic SF
16980 16445 MT
(Mesa Language Manual)SH
/Times-Roman SF
(.)SH
16980 17641 MT
(Technical Report Report CSL-79-3, Xerox PARC, 1979.)SH
13680 19592 MT
([2])SH
16980 XM
(N. Wirth.)SH
16980 20788 MT
(What Can We Do about the Unnecessary Diversity of Notation etc.)SH
/Times-Italic SF
16980 21984 MT
(CACM)SH
/Times-Roman SF
20311 XM
(20\05011\051:822-823, November 1977.)SH
13680 23935 MT
([3])SH
16980 XM
(N. Wirth.)SH
/Times-Italic SF
16980 25131 MT
(Programming in Modula-2.)SH
/Times-Roman SF
16980 26327 MT
(Springer-Verlag, Third Edition, 1985.)SH
ES
%%Page: 154 155
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(154)SH
43275 XM
(Index)SH
ES
%%Page: 155 156
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Index)SH
46380 XM
(155)SH
14 /Times-Roman AF
29186 11760 MT
(Index)SH
9 /Courier AF
13640 15180 MT
(#)SH
10 /Times-Roman AF
14430 XM
(operator 46,)
500 W( 47)SH
36392 XM
(See instead)SH
9 /Courier AF
41669 XM
(SYSTEM.ADR)SH
10 /Times-Roman AF
34520 16285 MT
(Allocation)SH
9 /Courier AF
13640 17390 MT
(&)SH
10 /Times-Roman AF
14430 XM
(operator 44)500 W
36392 XM
(See instead)
SH( storage)
500 W( allocation and)SH
38520 18495 MT
(deallocation)SH
9 /Courier AF
13640 19600 MT
(*)SH
10 /Times-Roman AF
14430 XM
(operator 44,)
500 W( 46)SH
34520 XM
(And)SH
35892 20705 MT
(words 83)500 W
9 /Courier AF
13640 21810 MT
(+)SH
10 /Times-Roman AF
14430 XM
(operator 44,)
500 W( 46)SH
9 /Courier AF
34520 XM
(AND)SH
10 /Times-Roman AF
36390 XM
(operator 45)500 W
34520 22915 MT
(Arithmetic)SH
9 /Courier AF
13640 24020 MT
(-)SH
10 /Times-Roman AF
14430 XM
(operator 44,)
500 W( 46)SH
36392 XM
(See instead)
SH( numbers,)
500 W( numeric)SH
9 /Courier AF
34520 25125 MT
(ARRAY)SH
10 /Times-Roman AF
37470 XM
(type constructor)
SH( 24,)
500 W( 25)SH
9 /Courier AF
13640 26230 MT
(.)SH
10 /Times-Roman AF
14430 XM
(operator 8,)
500 W( 9, 10, 33, 41)SH
34520 XM
(Arrays)SH
9 /Courier AF
13640 27335 MT
(.T)SH
10 /Times-Roman AF
14970 XM
(convention 131)500 W
35892 XM
(constant 16)500 W
35892 28440 MT
(of)SH
9 /Courier AF
36975 XM
(CHAR)SH
10 /Times-Roman AF
39885 XM
(5, 25, 46)SH
9 /Courier AF
13640 29545 MT
(/)SH
10 /Times-Roman AF
14430 XM
(operator 44,)
500 W( 46)SH
35892 XM
(relations 46,)
500 W( 47)SH
35892 30650 MT
(representation 100,)
500 W( 101)SH
9 /Courier AF
13640 31755 MT
(<)SH
10 /Times-Roman AF
14430 XM
(operator 46,)
500 W( 47)SH
35892 XM
(slices 31)500 W
9 /Courier AF
13640 32860 MT
(<=)SH
10 /Times-Roman AF
14970 XM
(operator 46,)
500 W( 47)SH
35892 XM
(subscripts 24)500 W
9 /Courier AF
13640 33965 MT
(<>)SH
10 /Times-Roman AF
14970 XM
(operator 44)500 W
35892 XM
(type-checking relations)
SH( 91)500 W
35892 35070 MT
(type-checking subscripts)
SH( 24)500 W
9 /Courier AF
13640 36175 MT
(=)SH
10 /Times-Roman AF
14430 XM
(operator 46,)
500 W( 47)SH
36392 XM
(See also)
SH( fixed-size)
500 W( arrays, open arrays,)SH
38520 37280 MT
(dynamic arrays, subarrays)SH
9 /Courier AF
13640 38385 MT
(>)SH
10 /Times-Roman AF
14430 XM
(operator 46,)
500 W( 47)SH
9 /Courier AF
34520 XM
(ASCII)SH
10 /Times-Roman AF
37470 XM
(module 5)500 W
9 /Courier AF
13640 39490 MT
(>=)SH
10 /Times-Roman AF
14970 XM
(operator 46,)
500 W( 47)SH
9 /Courier AF
34520 XM
(ASSERT)SH
10 /Times-Roman AF
38010 XM
(procedure 70)500 W
34520 40595 MT
(Assignable 93)500 W
9 /Courier AF
13640 41700 MT
(@ALIGN)SH
10 /Times-Roman AF
17130 XM
(type constructor)
SH( 61,)
500 W( 103)SH
34520 XM
(Assignments 51)500 W
9 /Courier AF
13640 42805 MT
(@ALIGN)SH
10 /Times-Roman AF
17130 XM
(type constructor: basetype)
SH( 104)500 W
9 /Courier AF
35892 XM
(NIL)SH
10 /Times-Roman AF
37762 XM
(constant 37)500 W
9 /Courier AF
13640 43910 MT
(@ALIGN)SH
10 /Times-Roman AF
17130 XM
(type constructor: type-checking)
SH( 104)500 W
35892 XM
(dynamic arrays)
SH( 29)500 W
9 /Courier AF
13640 45015 MT
(@C)SH
10 /Times-Roman AF
14970 XM
(pointer kind)
SH( 105)500 W
35892 XM
(fixed-size arrays)
SH( 25)500 W
9 /Courier AF
13640 46120 MT
(@EXTERNAL)SH
10 /Times-Roman AF
(: procedures)
SH( 111)500 W
35892 XM
(left-hand side)
SH( 51)500 W
9 /Courier AF
13640 47225 MT
(@EXTERNAL)SH
10 /Times-Roman AF
(: variables)
SH( 111)500 W
35892 XM
(opaque types)
SH( 75)500 W
9 /Courier AF
13640 48330 MT
(@INLINE)SH
10 /Times-Roman AF
17670 XM
(procedures 61)500 W
35892 XM
(open arrays)
SH( 27)500 W
9 /Courier AF
13640 49435 MT
(@LOCAL)SH
10 /Times-Roman AF
17130 XM
(dynamic arrays)
SH( 29)500 W
35892 XM
(procedure variables)
SH( 37)500 W
9 /Courier AF
13640 50540 MT
(@NILCHECK)SH
10 /Times-Roman AF
(: pointer kind)
SH( 105)500 W
35892 XM
(right-hand side)
SH( 51)500 W
9 /Courier AF
13640 51645 MT
(@NOCHECK)SH
10 /Times-Roman AF
(: dynamic array kind)
SH( 105,)
500 W( 106)SH
35892 XM
(strings 51)500 W
9 /Courier AF
13640 52750 MT
(@NOCHECK)SH
10 /Times-Roman AF
(: pointer kind)
SH( 105)500 W
35892 XM
(subarrays 31)500 W
9 /Courier AF
13640 53855 MT
(@NOCOUNT)SH
10 /Times-Roman AF
(: dynamic array kind)
SH( 105,)
500 W( 106)SH
35892 XM
(type-checking 93)500 W
9 /Courier AF
13640 54960 MT
(@NOCOUNT)SH
10 /Times-Roman AF
(: open array kind)
SH( 105,)
500 W( 106)SH
9 /Courier AF
13640 56065 MT
(@NOINIT)SH
10 /Times-Roman AF
17670 XM
(definition module)
SH( 74)500 W
34520 XM
(Backslash \050in literal strings\051)
SH( 5)500 W
9 /Courier AF
13640 57170 MT
(@PASCAL)SH
10 /Times-Roman AF
17670 XM
(pointer kind)
SH( 105)500 W
34520 XM
(Basetype)SH
9 /Courier AF
13640 58275 MT
(@SIZE)SH
10 /Times-Roman AF
16590 XM
(type constructor)
SH( 61,)
500 W( 75, 103)SH
9 /Courier AF
35892 XM
(@ALIGN)SH
10 /Times-Roman AF
39382 XM
(type constructor)
SH( 104)500 W
9 /Courier AF
13640 59380 MT
(@SIZE)SH
10 /Times-Roman AF
16590 XM
(type constructor: basetype)
SH( 104)500 W
9 /Courier AF
35892 XM
(@SIZE)SH
10 /Times-Roman AF
38842 XM
(type constructor)
SH( 104)500 W
9 /Courier AF
13640 60485 MT
(@SIZE)SH
10 /Times-Roman AF
16590 XM
(type constructor: type-checking)
SH( 104)500 W
35892 XM
(constants 88)500 W
35892 61590 MT
(subranges 22,)
500 W( 67)SH
9 /Courier AF
13640 62695 MT
(ABS)SH
10 /Times-Roman AF
15510 XM
(procedure 16,)
500 W( 64)SH
35892 XM
(type-checking 87)500 W
13640 63800 MT
(Actual parameters)
SH( 61)500 W
34520 XM
(Binary input and output)
SH( 84)500 W
13640 64905 MT
(Addition 44)500 W
34520 XM
(Binary operators)
SH( 44)500 W
13640 66010 MT
(ADDRESS type)SH
34520 XM
(Binding power of operators)
SH( 44)500 W
15512 67115 MT
(See instead)SH
9 /Courier AF
20789 XM
(SYSTEM.ADDRESS)SH
34520 XM
(BITOPERATIONS)SH
10 /Times-Roman AF
41790 XM
(module 83)500 W
13640 68220 MT
(ADR procedure)SH
9 /Courier AF
34520 XM
(BITOPERATIONS.BITAND)SH
10 /Times-Roman AF
45570 XM
(procedure 83)500 W
ES
%%Page: 156 157
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(156)SH
43275 XM
(Index)SH
9 /Courier AF
11480 7886 MT
(BITOPERATIONS.BITEXTRACT)SH
10 /Times-Roman AF
24690 XM
(procedure 83)500 W
32360 XM
(Characters)SH
9 /Courier AF
11480 8991 MT
(BITOPERATIONS.BITINSERT)SH
10 /Times-Roman AF
24150 XM
(procedure 83)500 W
33732 XM
(literal 4)500 W
9 /Courier AF
11480 10096 MT
(BITOPERATIONS.BITNOT)SH
10 /Times-Roman AF
22530 XM
(procedure 83)500 W
32360 XM
(Checking)SH
9 /Courier AF
11480 11201 MT
(BITOPERATIONS.BITOR)SH
10 /Times-Roman AF
21990 XM
(procedure 83)500 W
34232 XM
(See instead)
SH( runtime)
500 W( checking,)SH
9 /Courier AF
11480 12306 MT
(BITOPERATIONS.BITSHIFTLEFT)SH
10 /Times-Roman AF
25770 XM
(procedure)SH
36360 XM
(type-checking)SH
15480 13411 MT
(83)SH
9 /Courier AF
32360 XM
(CHR)SH
10 /Times-Roman AF
34230 XM
(procedure 16,)
500 W( 66)SH
9 /Courier AF
11480 14516 MT
(BITOPERATIONS.BITSHIFTRIGHT)SH
10 /Times-Roman AF
26310 XM
(procedure)SH
32360 XM
(Closing files)
SH( 84)500 W
15480 15621 MT
(83)SH
32360 XM
(Comments 6)500 W
9 /Courier AF
11480 16726 MT
(BITOPERATIONS.BITXOR)SH
10 /Times-Roman AF
22530 XM
(procedure 83)500 W
33732 XM
(formatting conventions)
SH( 138)500 W
9 /Courier AF
11480 17831 MT
(BITSET)SH
10 /Times-Roman AF
14970 XM
(type 20)500 W
32360 XM
(Comparisons)SH
9 /Courier AF
11480 18936 MT
(BITSET)SH
10 /Times-Roman AF
14970 XM
(type: constructors)
SH( 15)500 W
34232 XM
(See instead)
SH( relations)500 W
9 /Courier AF
11480 20041 MT
(BITSET)SH
10 /Times-Roman AF
14970 XM
(type: representation)
SH( 102)500 W
32360 XM
(Compatibility)SH
11480 21146 MT
(Blanks 3)500 W
9 /Courier AF
33732 XM
(CONST)SH
10 /Times-Roman AF
36682 XM
(parameters 93)500 W
11480 22251 MT
(Bodies)SH
9 /Courier AF
33732 XM
(VAR)SH
10 /Times-Roman AF
35602 XM
(parameters 94)500 W
12852 23356 MT
(modules 77)500 W
33732 XM
(assignments 93)500 W
12852 24461 MT
(procedures 59,)
500 W( 60)SH
33732 XM
(expressions 90)500 W
9 /Courier AF
11480 25566 MT
(BOOLEAN)SH
10 /Times-Roman AF
15510 XM
(type 20)500 W
33732 XM
(value parameters)
SH( 93)500 W
9 /Courier AF
11480 26671 MT
(BOOLEAN)SH
10 /Times-Roman AF
15510 XM
(type: operators)
SH( 45)500 W
32360 XM
(Complement)SH
9 /Courier AF
11480 27776 MT
(BOOLEAN)SH
10 /Times-Roman AF
15510 XM
(type: representation)
SH( 99)500 W
33732 XM
(words 83)500 W
11480 28881 MT
(Built-in identifiers)SH
32360 XM
(Concrete types \050for opaques\051)
SH( 75)500 W
13352 29986 MT
(See instead)
SH( supplied,)
500 W( pseudo-modules)SH
32360 XM
(Conditional compilation)
SH( 95)500 W
9 /Courier AF
11480 31091 MT
(BY)SH
10 /Times-Roman AF
(-value 55,)
500 W( 56)SH
9 /Courier AF
32360 XM
(CONST)SH
10 /Times-Roman AF
35310 XM
(parameters 60,)
500 W( 61, 125)SH
11480 32196 MT
(BYTE type)SH
9 /Courier AF
32360 XM
(CONST)SH
10 /Times-Roman AF
35310 XM
(parameters: style notes)
SH( 131)500 W
13352 33301 MT
(See instead)SH
9 /Courier AF
18629 XM
(SYSTEM.BYTE)SH
32360 XM
(CONST)SH
10 /Times-Roman AF
35310 XM
(parameters: type-checking)
SH( 93)500 W
32360 34406 MT
(Constant expressions)SH
11480 35511 MT
(C language interfacing)
SH( 109)500 W
33732 XM
(defined 15)500 W
12852 36616 MT
(#defines 118,)
500 W( 119)SH
33732 XM
(operators 15)500 W
12852 37721 MT
(calling sequence)
SH( 113,)
500 W( 114)SH
33732 XM
(procedures 16)500 W
12852 38826 MT
(conditional compilation)
SH( 116)500 W
32360 XM
(Constants)SH
12852 39931 MT
(data representation)
SH( 109)500 W
33732 XM
(declarations 9,)
500 W( 17)SH
12852 41036 MT
(external names)
SH( 112)500 W
33732 XM
(defined 15)500 W
12852 42141 MT
(include files)
SH( 116)500 W
33732 XM
(enumerations 17,)
500 W( 89)SH
12852 43246 MT
(parameters 121)500 W
33732 XM
(expressions 43)500 W
12852 44351 MT
(pointers 71,)
500 W( 105)SH
33732 XM
(formatting conventions)
SH( 136)500 W
12852 45456 MT
(typedefs 120)500 W
33732 XM
(literals 4,)
500 W( 5)SH
12852 46561 MT
(unbounded arrays)
SH( 71,)
500 W( 105, 106)SH
33732 XM
(renaming 12)500 W
11480 47666 MT
(Calling sequence)
SH( 113,)
500 W( 122)SH
33732 XM
(style notes)
SH( 133)500 W
12852 48771 MT
(C 114)500 W
33732 XM
(type-checking 88,)
500 W( 89, 90)SH
12852 49876 MT
(Modula-2 113)500 W
33732 XM
(user-declared 89)500 W
12852 50981 MT
(Pascal 115)500 W
32360 XM
(Constructors)SH
9 /Courier AF
11480 52086 MT
(CAP)SH
10 /Times-Roman AF
13350 XM
(procedure 16,)
500 W( 64)SH
33732 XM
(sets 15,)
500 W( 35, 43)SH
9 /Courier AF
11480 53191 MT
(CARDINAL)SH
10 /Times-Roman AF
16050 XM
(type 19)500 W
32360 XM
(Control characters)
SH( 4,)
500 W( 5)SH
9 /Courier AF
11480 54296 MT
(CARDINAL)SH
10 /Times-Roman AF
16050 XM
(type: representation)
SH( 98)500 W
32360 XM
(Control structures)
SH( 51,)
500 W( 70)SH
9 /Courier AF
11480 55401 MT
(CARDINAL)SH
10 /Times-Roman AF
16050 XM
(type: type-checking)
SH( 88)500 W
9 /Courier AF
33732 XM
(ASSERT)SH
10 /Times-Roman AF
37222 XM
(procedure 70)500 W
11480 56506 MT
(Carriage return \050in literal strings\051)
SH( 5)500 W
9 /Courier AF
33732 XM
(CASE)SH
10 /Times-Roman AF
36142 XM
(statement 54,)
500 W( 125)SH
11480 57611 MT
(Case labels)SH
9 /Courier AF
33732 XM
(EXIT)SH
10 /Times-Roman AF
36142 XM
(statement 54,)
500 W( 55)SH
9 /Courier AF
12852 58716 MT
(CASE)SH
10 /Times-Roman AF
15262 XM
(statement 54)500 W
9 /Courier AF
33732 XM
(FOR)SH
10 /Times-Roman AF
35602 XM
(statement 55,)
500 W( 56)SH
12852 59821 MT
(variant records)
SH( 33)500 W
9 /Courier AF
33732 XM
(HALT)SH
10 /Times-Roman AF
36142 XM
(procedure 70)500 W
9 /Courier AF
11480 60926 MT
(CASE)SH
10 /Times-Roman AF
13890 XM
(statement 54,)
500 W( 125)SH
9 /Courier AF
33732 XM
(IF)SH
10 /Times-Roman AF
35062 XM
(statement 53,)
500 W( 125)SH
9 /Courier AF
11480 62031 MT
(CASE)SH
10 /Times-Roman AF
13890 XM
(statement: formatting conventions)
SH( 136)500 W
9 /Courier AF
33732 XM
(LOOP)SH
10 /Times-Roman AF
36142 XM
(statement 54,)
500 W( 55)SH
11480 63136 MT
(Case-sensitivity)SH
9 /Courier AF
33732 XM
(REPEAT)SH
10 /Times-Roman AF
37222 XM
(statement 55,)
500 W( 57)SH
12852 64241 MT
(keywords 3)500 W
9 /Courier AF
33732 XM
(RETURN)SH
10 /Times-Roman AF
37222 XM
(statement 53,)
500 W( 55)SH
12852 65346 MT
(pseudo-modules 79)500 W
9 /Courier AF
33732 XM
(WHILE)SH
10 /Times-Roman AF
36682 XM
(statement 55,)
500 W( 57, 125)SH
12852 66451 MT
(supplied identifiers)
SH( 7)500 W
32360 XM
(Control variable \050)SH
9 /Courier AF
(FOR)SH
10 /Times-Roman AF
41340 XM
(statement\051 55,)
500 W( 56)SH
12852 67556 MT
(user-defined identifiers)
SH( 3)500 W
33732 XM
(runtime checking)
SH( 56)500 W
9 /Courier AF
11480 68661 MT
(CHAR)SH
10 /Times-Roman AF
13890 XM
(type 20)500 W
32360 XM
(Conversions)SH
9 /Courier AF
11480 69766 MT
(CHAR)SH
10 /Times-Roman AF
13890 XM
(type: representation)
SH( 99)500 W
9 /Courier AF
33732 XM
(CHR)SH
10 /Times-Roman AF
35602 XM
(procedure 66)500 W
9 /Courier AF
11480 70871 MT
(CHAR)SH
10 /Times-Roman AF
13890 XM
(type: type-checking)
SH( 89)500 W
9 /Courier AF
33732 XM
(DESCRIPTOR)SH
10 /Times-Roman AF
39382 XM
(procedure 71)500 W
11480 71976 MT
(Character input and output)
SH( 85)500 W
9 /Courier AF
33732 XM
(FLOAT)SH
10 /Times-Roman AF
36682 XM
(procedure 66)500 W
ES
%%Page: 157 158
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Index)SH
46380 XM
(157)SH
9 /Courier AF
15012 7886 MT
(LONGFLOAT)SH
10 /Times-Roman AF
20122 XM
(procedure 66)500 W
9 /Courier AF
34520 XM
(DISPOSE)SH
10 /Times-Roman AF
38550 XM
(procedure 29,)
500 W( 35, 36, 69, 105, 128)SH
9 /Courier AF
15012 8991 MT
(ODD)SH
10 /Times-Roman AF
16882 XM
(procedure 66)500 W
9 /Courier AF
34520 XM
(DIV)SH
10 /Times-Roman AF
36390 XM
(operator 44,)
500 W( 45)SH
9 /Courier AF
15012 10096 MT
(ORD)SH
10 /Times-Roman AF
16882 XM
(procedure 67)500 W
34520 XM
(Division 44)500 W
9 /Courier AF
15012 11201 MT
(TRUNC)SH
10 /Times-Roman AF
17962 XM
(procedure 67)500 W
34520 XM
(Dynamic arrays)
SH( 28)500 W
9 /Courier AF
15012 12306 MT
(VAL)SH
10 /Times-Roman AF
16882 XM
(procedure 67)500 W
9 /Courier AF
35892 XM
(@NOCHECK)SH
10 /Times-Roman AF
40962 XM
(105, 106)SH
15012 13411 MT
(to and from strings)
SH( 85)500 W
9 /Courier AF
35892 XM
(@NOCOUNT)SH
10 /Times-Roman AF
40962 XM
(105, 106)SH
15012 14516 MT
(type transfer)
SH( 16,)
500 W( 38)SH
9 /Courier AF
35892 XM
(NIL)SH
10 /Times-Roman AF
37762 XM
(constant 28)500 W
13640 15621 MT
(Coroutines 82)500 W
35892 XM
(assignments 29)500 W
13640 16726 MT
(Cycles)SH
35892 XM
(creating with)SH
9 /Courier AF
41391 XM
(LOCAL)SH
10 /Times-Roman AF
44341 XM
(procedure 29,)
500 W( 69)SH
15012 17831 MT
(in definition module imports)
SH( 73)500 W
35892 XM
(creating with)SH
9 /Courier AF
41391 XM
(NEW)SH
10 /Times-Roman AF
43261 XM
(procedure 28,)
500 W( 69)SH
15012 18936 MT
(in implementation module imports)
SH( 77)500 W
35892 XM
(dereference 29,)
500 W( 41)SH
15012 20041 MT
(in pointer type declarations)
SH( 10)500 W
35892 XM
(destroying with)SH
9 /Courier AF
42392 XM
(DISPOSE)SH
10 /Times-Roman AF
46422 XM
(procedure 29,)500 W
15012 21146 MT
(in procedure calls)
SH( 60)500 W
38520 XM
(69)SH
35892 22251 MT
(relations 47)500 W
13640 23356 MT
(Deallocation)SH
35892 XM
(representation 101)500 W
15512 24461 MT
(See instead)
SH( storage)
500 W( allocation and)SH
35892 XM
(runtime checking)
SH( 29,)
500 W( 126)SH
17640 25566 MT
(deallocation)SH
35892 XM
(subscripts 29)500 W
9 /Courier AF
13640 26671 MT
(DEC)SH
10 /Times-Roman AF
15510 XM
(procedure 23,)
500 W( 64)SH
35892 XM
(type-checking 93)500 W
13640 27776 MT
(Declarations)SH
35892 XM
(type-checking relations)
SH( 91)500 W
15012 28881 MT
(classified 9)500 W
9 /Courier AF
34520 XM
(DYNARRAY)SH
10 /Times-Roman AF
39090 XM
(type constructor)
SH( 28)500 W
15012 29986 MT
(constants 17)500 W
15012 31091 MT
(enumerations 10)500 W
34520 XM
(Elements \050of arrays\051)SH
15012 32196 MT
(formatting conventions)
SH( 136)500 W
35892 XM
(array subscripts)
SH( 24)500 W
15012 33301 MT
(local to procedures)
SH( 60)500 W
35892 XM
(dynamic array subscripts)
SH( 29)500 W
15012 34406 MT
(machine-dependent 79)500 W
35892 XM
(open array subscripts)
SH( 26)500 W
15012 35511 MT
(modules 73,)
500 W( 74, 76)SH
35892 XM
(slices 31)500 W
15012 36616 MT
(motivated 21)500 W
35892 XM
(subarray subscripts)
SH( 31)500 W
15012 37721 MT
(opaque types)
SH( 75)500 W
34520 XM
(Enumerations)SH
15012 38826 MT
(procedures 59,)
500 W( 60)SH
35892 XM
(constants 15,)
500 W( 17, 23, 89)SH
15012 39931 MT
(records 10)500 W
35892 XM
(imports 12)500 W
15012 41036 MT
(redeclarations 7,)
500 W( 9, 132)SH
35892 XM
(non-contiguous 23)500 W
15012 42141 MT
(scope 9)500 W
35892 XM
(representation 100)500 W
15012 43246 MT
(types 21)500 W
35892 XM
(scope 10)500 W
15012 44351 MT
(variables 39)500 W
35892 XM
(type constructor)
SH( 23)500 W
15012 45456 MT
(versus imports)
SH( 12)500 W
34520 XM
(Escape sequences \050in literal strings\051)
SH( 5)500 W
13640 46561 MT
(Definition modules)
SH( 73)500 W
9 /Courier AF
34520 XM
(EXCL)SH
10 /Times-Roman AF
36930 XM
(procedure 68)500 W
9 /Courier AF
15012 47666 MT
(.T)SH
10 /Times-Roman AF
16342 XM
(convention 131)500 W
9 /Courier AF
34520 XM
(EXIT)SH
10 /Times-Roman AF
36930 XM
(statement 54,)
500 W( 55)SH
15012 48771 MT
(contents 73)500 W
34520 XM
(Exports)SH
15012 49876 MT
(exports 73)500 W
9 /Courier AF
35892 XM
(EXPORT *)SH
10 /Times-Roman AF
40962 XM
(74)SH
15012 50981 MT
(formatting conventions)
SH( 138)500 W
9 /Courier AF
35892 XM
(EXPORT ...)SH
10 /Times-Roman AF
42042 XM
(73)SH
15012 52086 MT
(implementations 74)500 W
9 /Courier AF
35892 XM
(EXPORT QUALIFIED ...)SH
10 /Times-Roman AF
47442 XM
(73)SH
15012 53191 MT
(import cycles)
SH( 73)500 W
35892 XM
(defining exported procedures)
SH( 76)500 W
15012 54296 MT
(imports into)
SH( 12)500 W
35892 XM
(from definition modules)
SH( 73)500 W
15012 55401 MT
(motivated 73)500 W
35892 XM
(from nested modules)
SH( 76)500 W
15012 56506 MT
(opaque types)
SH( 75)500 W
34520 XM
(Expressions 43)500 W
13640 57611 MT
(Delimiters)SH
35892 XM
(operands 43)500 W
15012 58716 MT
(complete list)
SH( 6)500 W
35892 XM
(procedure calls)
SH( 43,)
500 W( 61)SH
15012 59821 MT
(formatting conventions)
SH( 135)500 W
35892 XM
(procedure variables)
SH( 43)500 W
13640 60926 MT
(Dereference)SH
35892 XM
(type-checking 90)500 W
15012 62031 MT
(dynamic arrays)
SH( 29)500 W
35892 XM
(variables 43)500 W
15012 63136 MT
(in designators)
SH( 41)500 W
35892 XM
(versus statements)
SH( 49)500 W
15012 64241 MT
(pointers 35)500 W
34520 XM
(Extensions to Modula-2)
SH( 139)500 W
9 /Courier AF
13640 65346 MT
(DESCRIPTOR)SH
10 /Times-Roman AF
19290 XM
(procedure 71)500 W
34520 XM
(External names)
SH( 111)500 W
13640 66451 MT
(Designators)SH
35892 XM
(C 112)500 W
15012 67556 MT
(assignments 51)500 W
35892 XM
(Modula-2 111)500 W
15012 68661 MT
(defined 41)500 W
35892 XM
(Pascal 112)500 W
15012 69766 MT
(expressions 43)500 W
34520 XM
(External procedures)
SH( 111)500 W
15012 70871 MT
(variable 41)500 W
34520 XM
(External variables)
SH( 111)500 W
13640 71976 MT
(Difference \050of sets\051)
SH( 46)500 W
34520 XM
(Extraction \050of bit fields\051)
SH( 83)500 W
ES
%%Page: 158 159
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(158)SH
43275 XM
(Index)SH
9 /Courier AF
11480 7886 MT
(FALSE)SH
10 /Times-Roman AF
14430 XM
(constant 20)500 W
33732 XM
(implementation modules)
SH( 74)500 W
11480 8991 MT
(Fields)SH
33732 XM
(into definition modules)
SH( 74)500 W
12852 10096 MT
(naming 8)500 W
33732 XM
(naming 8)500 W
12852 11201 MT
(selection 8,)
500 W( 33)SH
33732 XM
(nested modules)
SH( 76)500 W
11480 12306 MT
(Files 84)500 W
33732 XM
(records 12)500 W
9 /Courier AF
11480 13411 MT
(FIRST)SH
10 /Times-Roman AF
14430 XM
(procedure 16,)
500 W( 71)SH
33732 XM
(style notes)
SH( 132)500 W
11480 14516 MT
(Fixed-size arrays)
SH( 24)500 W
33732 XM
(versus declarations)
SH( 12)500 W
12852 15621 MT
(assignments 25)500 W
9 /Courier AF
32360 XM
(IN)SH
10 /Times-Roman AF
33690 XM
(operator 46)500 W
12852 16726 MT
(of)SH
9 /Courier AF
13935 XM
(CHAR)SH
10 /Times-Roman AF
16845 XM
(25)SH
9 /Courier AF
32360 XM
(INC)SH
10 /Times-Roman AF
34230 XM
(procedure 23,)
500 W( 64)SH
12852 17831 MT
(representation 100)500 W
9 /Courier AF
32360 XM
(INCL)SH
10 /Times-Roman AF
34770 XM
(procedure 68)500 W
12852 18936 MT
(runtime checking)
SH( 24,)
500 W( 126)SH
32360 XM
(Increment \050in)SH
9 /Courier AF
38025 XM
(FOR)SH
10 /Times-Roman AF
39895 XM
(loop\051)SH
9 /Courier AF
11480 20041 MT
(FLOAT)SH
10 /Times-Roman AF
14430 XM
(procedure 16,)
500 W( 66)SH
34232 XM
(See instead)SH
9 /Courier AF
39509 XM
(BY)SH
10 /Times-Roman AF
(-value)SH
11480 21146 MT
(Floating-point)SH
32360 XM
(Indentation)SH
13352 22251 MT
(See instead)
SH( reals,)500 W
9 /Courier AF
21017 XM
(REAL)SH
10 /Times-Roman AF
23427 XM
(type,)SH
9 /Courier AF
25649 XM
(LONGREAL)SH
10 /Times-Roman AF
33732 XM
(formatting conventions)
SH( 136)500 W
15480 23356 MT
(type)SH
32360 XM
(Indexes)SH
9 /Courier AF
11480 24461 MT
(FOR)SH
10 /Times-Roman AF
13350 XM
(statement 55,)
500 W( 56)SH
34232 XM
(See instead)
SH( subscripts)500 W
9 /Courier AF
11480 25566 MT
(FOR)SH
10 /Times-Roman AF
13350 XM
(statement: formatting conventions)
SH( 136)500 W
32360 XM
(Initialization)SH
11480 26671 MT
(Formal parameters)
SH( 37,)
500 W( 59, 60, 61)SH
33732 XM
(Modula-2 runtime)
SH( 116)500 W
11480 27776 MT
(Formatted input and output)
SH( 84,)
500 W( 85)SH
33732 XM
(modules 77,)
500 W( 115)SH
11480 28881 MT
(Formatting conventions)SH
33732 XM
(modules in import cycle)
SH( 77)500 W
12852 29986 MT
(capitalization 135)500 W
33732 XM
(Pascal runtime)
SH( 116)500 W
12852 31091 MT
(comments 138)500 W
33732 XM
(variables 39)500 W
12852 32196 MT
(definition modules)
SH( 138)500 W
32360 XM
(Inline procedures)
SH( 61,)
500 W( 125)SH
12852 33301 MT
(delimiters 135)500 W
33732 XM
(implementation restrictions)
SH( 61,)
500 W( 62)SH
12852 34406 MT
(indentation 136)500 W
32360 XM
(Input and output)
SH( 84)500 W
12852 35511 MT
(motivated 134)500 W
32360 XM
(Insertion \050of bit fields\051)
SH( 83)500 W
12852 36616 MT
(procedures 138)500 W
9 /Courier AF
32360 XM
(INTEGER)SH
10 /Times-Roman AF
36390 XM
(type 19)500 W
11480 37721 MT
(Forward reference)
SH( 10,)
500 W( 11)SH
9 /Courier AF
32360 XM
(INTEGER)SH
10 /Times-Roman AF
36390 XM
(type: representation)
SH( 98)500 W
9 /Courier AF
32360 38826 MT
(INTEGER)SH
10 /Times-Roman AF
36390 XM
(type: type-checking)
SH( 88,)
500 W( 90, 93)SH
9 /Courier AF
11480 39931 MT
(HALT)SH
10 /Times-Roman AF
13890 XM
(procedure 70)500 W
32360 XM
(Integers)SH
11480 41036 MT
(Headings)SH
33732 XM
(literal 4)500 W
12852 42141 MT
(procedures 59)500 W
32360 XM
(Interfaces)SH
11480 43246 MT
(Hexadecimal numbers)
SH( 4)500 W
34232 XM
(See instead)
SH( definition)
500 W( modules)SH
9 /Courier AF
11480 44351 MT
(HIGH)SH
10 /Times-Roman AF
13890 XM
(procedure 16,)
500 W( 25, 27, 29, 31, 72)SH
32360 XM
(Interfacing to other languages)SH
34232 45456 MT
(See instead)
SH( C)
500 W( language interfacing,)SH
11480 46561 MT
(Identifiers 3)500 W
36360 XM
(Pascal language interfacing)SH
12852 47666 MT
(case-sensitivity 3)500 W
32360 XM
(Intersection \050of sets\051)
SH( 46)500 W
12852 48771 MT
(formatting conventions)
SH( 135)500 W
9 /Courier AF
32360 XM
(IO)SH
10 /Times-Roman AF
33690 XM
(module 84)500 W
12852 49876 MT
(implementation restrictions)
SH( 128)500 W
9 /Courier AF
32360 XM
(IO.CLOSE)SH
10 /Times-Roman AF
36930 XM
(procedure 84)500 W
12852 50981 MT
(style notes)
SH( 131,)
500 W( 132)SH
9 /Courier AF
32360 XM
(IO.FILE)SH
10 /Times-Roman AF
36390 XM
(type 84)500 W
12852 52086 MT
(supplied 7)500 W
9 /Courier AF
32360 XM
(IO.INPUT)SH
10 /Times-Roman AF
36930 XM
(variable 84)500 W
9 /Courier AF
11480 53191 MT
(IF)SH
10 /Times-Roman AF
12810 XM
(statement 53,)
500 W( 125)SH
9 /Courier AF
32360 XM
(IO.OPEN)SH
10 /Times-Roman AF
36390 XM
(procedure 84)500 W
9 /Courier AF
11480 54296 MT
(IF)SH
10 /Times-Roman AF
12810 XM
(statement: formatting conventions)
SH( 136)500 W
9 /Courier AF
32360 XM
(IO.OUTPUT)SH
10 /Times-Roman AF
37470 XM
(variable 84)500 W
11480 55401 MT
(Implementation modules)
SH( 73)500 W
9 /Courier AF
32360 XM
(IO.READB)SH
10 /Times-Roman AF
36930 XM
(procedure 84)500 W
12852 56506 MT
(bodies 77)500 W
9 /Courier AF
32360 XM
(IO.READC)SH
10 /Times-Roman AF
36930 XM
(procedure 85)500 W
12852 57611 MT
(concrete types \050for opaques\051)
SH( 75)500 W
9 /Courier AF
32360 XM
(IO.READF)SH
10 /Times-Roman AF
36930 XM
(procedure 85)500 W
12852 58716 MT
(formatting conventions)
SH( 136)500 W
9 /Courier AF
32360 XM
(IO.READS)SH
10 /Times-Roman AF
36930 XM
(procedure 85)500 W
12852 59821 MT
(imports 74)500 W
9 /Courier AF
32360 XM
(IO.SREADF)SH
10 /Times-Roman AF
37470 XM
(procedure 85)500 W
12852 60926 MT
(missing 74)500 W
9 /Courier AF
32360 XM
(IO.SWRITEF)SH
10 /Times-Roman AF
38010 XM
(procedure 85)500 W
12852 62031 MT
(motivated 74)500 W
9 /Courier AF
32360 XM
(IO.TERMINAL)SH
10 /Times-Roman AF
38550 XM
(variable 84)500 W
12852 63136 MT
(scope 8,)
500 W( 74)SH
9 /Courier AF
32360 XM
(IO.WRITEB)SH
10 /Times-Roman AF
37470 XM
(procedure 84)500 W
11480 64241 MT
(Implementation restrictions)
SH( 61,)
500 W( 62, 128)SH
9 /Courier AF
32360 XM
(IO.WRITEC)SH
10 /Times-Roman AF
37470 XM
(procedure 85)500 W
11480 65346 MT
(Imports 11)500 W
9 /Courier AF
32360 XM
(IO.WRITEF)SH
10 /Times-Roman AF
37470 XM
(procedure 85)500 W
9 /Courier AF
12852 66451 MT
(FROM ... IMPORT *)SH
10 /Times-Roman AF
22782 XM
(11)SH
9 /Courier AF
32360 XM
(IO.WRITES)SH
10 /Times-Roman AF
37470 XM
(procedure 85)500 W
9 /Courier AF
12852 67556 MT
(FROM ... IMPORT ...)SH
10 /Times-Roman AF
23862 XM
(11)SH
9 /Courier AF
12852 68661 MT
(IMPORT)SH
10 /Times-Roman AF
16842 XM
(11)SH
32360 XM
(Keywords)SH
12852 69766 MT
(cyclic 73,)
500 W( 77)SH
33732 XM
(case-sensitivity 3)500 W
12852 70871 MT
(enumerations 12)500 W
33732 XM
(complete list)
SH( 3)500 W
12852 71976 MT
(from definition modules)
SH( 12)500 W
ES
%%Page: 159 160
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Index)SH
46380 XM
(159)SH
9 /Courier AF
13640 7886 MT
(LAST)SH
10 /Times-Roman AF
16050 XM
(procedure 16,)
500 W( 71)SH
34520 XM
(Name scope)SH
13640 8991 MT
(Lexemes \050of the language\051)SH
36392 XM
(See instead)
SH( scope)500 W
15512 10096 MT
(See instead)
SH( tokens)500 W
34520 XM
(Name-lookup context)SH
13640 11201 MT
(Lexicographic ordering)
SH( 46)500 W
36392 XM
(See instead)
SH( scope)500 W
13640 12306 MT
(Linker names)SH
34520 XM
(Names)SH
15512 13411 MT
(See instead)
SH( external)
500 W( names)SH
35892 XM
(external 111)500 W
13640 14516 MT
(Literals)SH
34520 XM
(Negation 44)500 W
15012 15621 MT
(characters 4)500 W
34520 XM
(Nested modules)
SH( 73,)
500 W( 76)SH
15012 16726 MT
(hexadecimal integers)
SH( 4)500 W
35892 XM
(defining exported procedures)
SH( 76)500 W
15012 17831 MT
(integers 4)500 W
35892 XM
(exports 76)500 W
15012 18936 MT
(octal integers)
SH( 4)500 W
35892 XM
(imports 76)500 W
15012 20041 MT
(reals 4)500 W
35892 XM
(scope 14)500 W
15012 21146 MT
(strings 5)500 W
34520 XM
(Nested procedures)
SH( 60)500 W
15512 22251 MT
(See also)
SH( constants)500 W
9 /Courier AF
34520 XM
(NEW)SH
10 /Times-Roman AF
36390 XM
(procedure 29,)
500 W( 35, 36, 39, 69, 75, 105,)SH
13640 23356 MT
(Local declarations)
SH( 60)500 W
38520 XM
(128)SH
13640 24461 MT
(Local modules)SH
34520 XM
(Newlines 3)500 W
15512 25566 MT
(See instead)
SH( nested)
500 W( modules)SH
35892 XM
(in literal strings)
SH( 5)500 W
9 /Courier AF
13640 26671 MT
(LOCAL)SH
10 /Times-Roman AF
16590 XM
(procedure 29,)
500 W( 69)SH
9 /Courier AF
34520 XM
(NIL)SH
10 /Times-Roman AF
36390 XM
(constant 15,)
500 W( 16, 29, 35, 37, 71)SH
13640 27776 MT
(Logical operators)
SH( 45)500 W
9 /Courier AF
34520 XM
(NIL)SH
10 /Times-Roman AF
36390 XM
(constant: type-checking)
SH( 89,)
500 W( 90)SH
9 /Courier AF
13640 28881 MT
(LONGFLOAT)SH
10 /Times-Roman AF
18750 XM
(procedure 16,)
500 W( 66)SH
34520 XM
(Non-numeric types)
SH( 20,)
500 W( 37, 89)SH
9 /Courier AF
13640 29986 MT
(LONGREAL)SH
10 /Times-Roman AF
18210 XM
(type 19)500 W
34520 XM
(Non-ordinal types)
SH( 20,)
500 W( 37, 89)SH
9 /Courier AF
13640 31091 MT
(LONGREAL)SH
10 /Times-Roman AF
18210 XM
(type: representation)
SH( 100)500 W
9 /Courier AF
34520 XM
(NOT)SH
10 /Times-Roman AF
36390 XM
(operator 45,)
500 W( 46)SH
9 /Courier AF
13640 32196 MT
(LONGREAL)SH
10 /Times-Roman AF
18210 XM
(type: type-checking)
SH( 89)500 W
34520 XM
(Null-terminated strings)
SH( 5)500 W
9 /Courier AF
13640 33301 MT
(LOOP)SH
10 /Times-Roman AF
16050 XM
(statement 54,)
500 W( 55)SH
9 /Courier AF
34520 XM
(NUMBER)SH
10 /Times-Roman AF
38010 XM
(procedure 16,)
500 W( 26, 27, 29, 31, 72)SH
9 /Courier AF
13640 34406 MT
(LOOP)SH
10 /Times-Roman AF
16050 XM
(statement: formatting conventions)
SH( 136)500 W
34520 XM
(Numbers)SH
13640 35511 MT
(Loophole)SH
35892 XM
(constants 15)500 W
15512 36616 MT
(See instead)SH
9 /Courier AF
20789 XM
(SYSTEM.BYTE)SH
10 /Times-Roman AF
(,)SH
35892 XM
(literal 4)500 W
9 /Courier AF
17640 37721 MT
(SYSTEM.WORD)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
24080 XM
(ORD)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
26200 XM
(CHR)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
28320 XM
(VAL)SH
10 /Times-Roman AF
(, type)SH
35892 XM
(type-checking 88,)
500 W( 89)SH
17640 38826 MT
(transfer, tagless variant records)SH
34520 XM
(Numeric types)
SH( 20,)
500 W( 37, 89)SH
9 /Courier AF
13640 39931 MT
(LOW)SH
10 /Times-Roman AF
15510 XM
(procedure 16,)
500 W( 25, 29, 31, 72)SH
35892 XM
(defined 20)500 W
35892 41036 MT
(operators 44)500 W
13640 42141 MT
(Machine-dependent declarations)
SH( 79)500 W
35892 XM
(relations 46)500 W
13640 43246 MT
(Main modules)
SH( 73,)
500 W( 76)SH
35892 XM
(type-checking relations)
SH( 91)500 W
15012 44351 MT
(bodies 77)500 W
13640 45456 MT
(Matching procedure types)
SH( 90)500 W
34520 XM
(Octal characters)
SH( 4)500 W
13640 46561 MT
(Matrix declarations)
SH( 24)500 W
34520 XM
(Octal numbers)
SH( 4)500 W
9 /Courier AF
13640 47666 MT
(MAX)SH
10 /Times-Roman AF
15510 XM
(procedure 16,)
500 W( 64)SH
35892 XM
(in literal strings)
SH( 5)500 W
13640 48771 MT
(Membership \050in set\051 relation)
SH( 46)500 W
9 /Courier AF
34520 XM
(ODD)SH
10 /Times-Roman AF
36390 XM
(procedure 16,)
500 W( 66)SH
9 /Courier AF
13640 49876 MT
(MIN)SH
10 /Times-Roman AF
15510 XM
(procedure 16,)
500 W( 65)SH
34520 XM
(Opaque types)
SH( 75)500 W
13640 50981 MT
(Mixing languages)SH
9 /Courier AF
35892 XM
(@SIZE)SH
10 /Times-Roman AF
38842 XM
(type constructor)
SH( 75)500 W
15512 52086 MT
(See instead)
SH( C)
500 W( language interfacing,)SH
35892 XM
(assignment 75)500 W
17640 53191 MT
(Pascal language interfacing)SH
35892 XM
(declaring variables)
SH( 75)500 W
9 /Courier AF
13640 54296 MT
(MOD)SH
10 /Times-Roman AF
15510 XM
(operator 44,)
500 W( 45)SH
35892 XM
(relations 47,)
500 W( 75)SH
13640 55401 MT
(Modula-2)SH
35892 XM
(type-checking relations)
SH( 91)500 W
15012 56506 MT
(defined 1)500 W
34520 XM
(Open arrays)
SH( 25,)
500 W( 27, 29)SH
15012 57611 MT
(extensions 139)500 W
9 /Courier AF
35892 XM
(@NOCOUNT)SH
10 /Times-Roman AF
40962 XM
(105, 106)SH
13640 58716 MT
(Modules)SH
9 /Courier AF
35892 XM
(HIGH)SH
10 /Times-Roman AF
38302 XM
(procedure 27)500 W
9 /Courier AF
15012 59821 MT
(ASCII)SH
10 /Times-Roman AF
18462 XM
(5)SH
9 /Courier AF
35892 XM
(NIL)SH
10 /Times-Roman AF
37762 XM
(constant 71)500 W
9 /Courier AF
15012 60926 MT
(BITOPERATIONS)SH
10 /Times-Roman AF
22782 XM
(83)SH
9 /Courier AF
35892 XM
(NUMBER)SH
10 /Times-Roman AF
39382 XM
(procedure 27)500 W
9 /Courier AF
15012 62031 MT
(IO)SH
10 /Times-Roman AF
16842 XM
(84)SH
9 /Courier AF
35892 XM
(SYSTEM.ADR)SH
10 /Times-Roman AF
41542 XM
(procedure 27)500 W
9 /Courier AF
15012 63136 MT
(SYSTEM)SH
10 /Times-Roman AF
19002 XM
(79)SH
9 /Courier AF
35892 XM
(SYSTEM.BYTESIZE)SH
10 /Times-Roman AF
44242 XM
(procedure 27)500 W
15012 64241 MT
(classified 73)500 W
9 /Courier AF
35892 XM
(SYSTEM.SIZE)SH
10 /Times-Roman AF
42082 XM
(procedure 27)500 W
15012 65346 MT
(declarations 9)500 W
35892 XM
(assignments 27)500 W
15012 66451 MT
(formatting conventions)
SH( 136)500 W
35892 XM
(creating with)SH
9 /Courier AF
41391 XM
(DESCRIPTOR)SH
10 /Times-Roman AF
47041 XM
(procedure 71)500 W
15012 67556 MT
(initialization 77)500 W
35892 XM
(formal parameters)
SH( 25)500 W
15012 68661 MT
(nested declarations)
SH( 62)500 W
35892 XM
(of)SH
9 /Courier AF
36975 XM
(CHAR)SH
10 /Times-Roman AF
39885 XM
(51)SH
15012 69766 MT
(pseudo-modules 79)500 W
35892 XM
(of)SH
9 /Courier AF
36975 XM
(SYSTEM.BYTE)SH
10 /Times-Roman AF
43665 XM
(27)SH
13640 70871 MT
(Multiplication 44)500 W
35892 XM
(of)SH
9 /Courier AF
36975 XM
(SYSTEM.WORD)SH
10 /Times-Roman AF
43665 XM
(27)SH
35892 71976 MT
(representation 101)500 W
ES
%%Page: 160 161
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(160)SH
43275 XM
(Index)SH
/Times-Roman SF
12852 7886 MT
(runtime checking)
SH( 26,)
500 W( 126)SH
32360 XM
(Pervasive identifiers)SH
12852 8991 MT
(subscripts 26,)
500 W( 27)SH
34232 XM
(See instead)
SH( supplied)500 W
12852 10096 MT
(type-checking 25,)
500 W( 93)SH
9 /Courier AF
32360 XM
(POINTER TO)SH
10 /Times-Roman AF
38010 XM
(type constructor)
SH( 35)500 W
11480 11201 MT
(Opening files)
SH( 84)500 W
32360 XM
(Pointers 35)500 W
11480 12306 MT
(Operands 43)500 W
9 /Courier AF
33732 XM
(@C)SH
10 /Times-Roman AF
35562 XM
(105)SH
11480 13411 MT
(Operators)SH
9 /Courier AF
33732 XM
(@NILCHECK)SH
10 /Times-Roman AF
39342 XM
(105)SH
12852 14516 MT
(applicability 47)500 W
9 /Courier AF
33732 XM
(@NOCHECK)SH
10 /Times-Roman AF
38802 XM
(105)SH
12852 15621 MT
(binary 44,)
500 W( 47)SH
9 /Courier AF
33732 XM
(@PASCAL)SH
10 /Times-Roman AF
38262 XM
(105)SH
12852 16726 MT
(complete list)
SH( 6)500 W
9 /Courier AF
33732 XM
(NIL)SH
10 /Times-Roman AF
35602 XM
(constant 35)500 W
12852 17831 MT
(constant expressions)
SH( 15)500 W
33732 XM
(constant 16)500 W
12852 18936 MT
(logical 45)500 W
33732 XM
(creating with)SH
9 /Courier AF
39231 XM
(NEW)SH
10 /Times-Roman AF
41101 XM
(procedure 35,)
500 W( 36, 69)SH
12852 20041 MT
(numeric 44)500 W
33732 XM
(creating with)SH
9 /Courier AF
39231 XM
(SYSTEM.ADR)SH
10 /Times-Roman AF
44881 XM
(procedure 35)500 W
12852 21146 MT
(precedence 44)500 W
33732 XM
(dereference 35,)
500 W( 41)SH
12852 22251 MT
(set 46)500 W
33732 XM
(destroying with)SH
9 /Courier AF
40232 XM
(DISPOSE)SH
10 /Times-Roman AF
44262 XM
(procedure 35,)500 W
12852 23356 MT
(type of returned value)
SH( 92)500 W
36360 XM
(36, 69)SH
12852 24461 MT
(type-checking 92)500 W
33732 XM
(forward reference)
SH( 10,)
500 W( 11)SH
12852 25566 MT
(unary 44,)
500 W( 47)SH
33732 XM
(relations 47)500 W
11480 26671 MT
(Optimizer 127)500 W
33732 XM
(representation 103)500 W
11480 27776 MT
(Or)SH
33732 XM
(runtime checking)
SH( 36,)
500 W( 103, 126)SH
12852 28881 MT
(words 83)500 W
33732 XM
(type-checking 90)500 W
9 /Courier AF
11480 29986 MT
(OR)SH
10 /Times-Roman AF
12810 XM
(operator 45)500 W
33732 XM
(type-checking relations)
SH( 91)500 W
9 /Courier AF
11480 31091 MT
(ORD)SH
10 /Times-Roman AF
13350 XM
(procedure 16,)
500 W( 23, 67)SH
32360 XM
(Precedence of operators)
SH( 44)500 W
9 /Courier AF
11480 32196 MT
(ORD)SH
10 /Times-Roman AF
13350 XM
(procedure: style notes)
SH( 133)500 W
32360 XM
(Predefined identifiers)SH
11480 33301 MT
(Ordinal standard procedures)SH
34232 XM
(See instead)
SH( supplied,)
500 W( pseudo-modules)SH
9 /Courier AF
12852 34406 MT
(ABS)SH
10 /Times-Roman AF
15222 XM
(64)SH
32360 XM
(Preprocessor 95)500 W
9 /Courier AF
12852 35511 MT
(CAP)SH
10 /Times-Roman AF
15222 XM
(64)SH
9 /Courier AF
32360 XM
(PROC)SH
10 /Times-Roman AF
34770 XM
(type 20)500 W
9 /Courier AF
12852 36616 MT
(DEC)SH
10 /Times-Roman AF
15222 XM
(64)SH
32360 XM
(Procedure call)SH
9 /Courier AF
12852 37721 MT
(INC)SH
10 /Times-Roman AF
15222 XM
(64)SH
9 /Courier AF
33732 XM
(CONST)SH
10 /Times-Roman AF
36682 XM
(parameters 61,)
500 W( 125)SH
9 /Courier AF
12852 38826 MT
(MAX)SH
10 /Times-Roman AF
15222 XM
(64)SH
9 /Courier AF
33732 XM
(VAR)SH
10 /Times-Roman AF
35602 XM
(parameters 61)500 W
9 /Courier AF
12852 39931 MT
(MIN)SH
10 /Times-Roman AF
15222 XM
(65)SH
33732 XM
(actual parameters)
SH( 61)500 W
11480 41036 MT
(Ordinal types)
SH( 20,)
500 W( 37, 89)SH
33732 XM
(classified 61)500 W
12852 42141 MT
(defined 20)500 W
33732 XM
(formal parameters)
SH( 61)500 W
12852 43246 MT
(relations 46)500 W
33732 XM
(in constant expressions)
SH( 16)500 W
12852 44351 MT
(supplied procedures)
SH( 64)500 W
33732 XM
(in designators)
SH( 41)500 W
12852 45456 MT
(type-checking relations)
SH( 91)500 W
33732 XM
(in expressions)
SH( 43)500 W
11480 46561 MT
(Overflow 45,)
500 W( 66, 67)SH
33732 XM
(type-checking 93,)
500 W( 94)SH
33732 47666 MT
(value parameters)
SH( 61)500 W
11480 48771 MT
(Parameters)SH
9 /Courier AF
32360 XM
(PROCEDURE)SH
10 /Times-Roman AF
37470 XM
(type constructor)
SH( 37)500 W
9 /Courier AF
12852 49876 MT
(CONST)SH
10 /Times-Roman AF
16302 XM
(59, 60, 61)SH
32360 XM
(Procedure types)
SH( 37)500 W
9 /Courier AF
12852 50981 MT
(VAR)SH
10 /Times-Roman AF
15222 XM
(59, 60, 61)SH
9 /Courier AF
33732 XM
(NIL)SH
10 /Times-Roman AF
35602 XM
(constant 37)500 W
12852 52086 MT
(actual 61)500 W
33732 XM
(assigning procedure variables)
SH( 37)500 W
12852 53191 MT
(formal 59,)
500 W( 60, 61)SH
33732 XM
(passing to procedure parameters)
SH( 37)500 W
12852 54296 MT
(procedure types)
SH( 37)500 W
33732 XM
(procedure variables in expressions)
SH( 43)500 W
12852 55401 MT
(type-checking 93,)
500 W( 94)SH
33732 XM
(type-checking 90)500 W
12852 56506 MT
(value 59,)
500 W( 60, 61)SH
33732 XM
(versus procedure declarations)
SH( 37)500 W
11480 57611 MT
(Parentheses)SH
32360 XM
(Procedures 57)500 W
12852 58716 MT
(grouping 43)500 W
9 /Courier AF
33732 XM
(CONST)SH
10 /Times-Roman AF
36682 XM
(parameters 59,)
500 W( 60)SH
12852 59821 MT
(procedure call)
SH( 43)500 W
9 /Courier AF
33732 XM
(RETURN)SH
10 /Times-Roman AF
37222 XM
(statement 53,)
500 W( 59)SH
11480 60926 MT
(Pascal language interfacing)
SH( 109)500 W
9 /Courier AF
33732 XM
(VAR)SH
10 /Times-Roman AF
35602 XM
(parameters 59,)
500 W( 60)SH
12852 62031 MT
(calling sequence)
SH( 113,)
500 W( 115)SH
33732 XM
(actual parameters)
SH( 61)500 W
12852 63136 MT
(data representation)
SH( 110)500 W
33732 XM
(bodies 59,)
500 W( 60)SH
12852 64241 MT
(external names)
SH( 112)500 W
33732 XM
(calling sequence)
SH( 113,)
500 W( 122)SH
12852 65346 MT
(pointers 105)500 W
33732 XM
(constants 15)500 W
12852 66451 MT
(runtime initialization)
SH( 116)500 W
33732 XM
(declarations 9,)
500 W( 59, 60)SH
11480 67556 MT
(Passable)SH
33732 XM
(defining in nested modules)
SH( 76)500 W
12852 68661 MT
(by)SH
9 /Courier AF
14102 XM
(CONST)SH
10 /Times-Roman AF
17552 XM
(93)SH
33732 XM
(external 111)500 W
12852 69766 MT
(by)SH
9 /Courier AF
14102 XM
(VAR)SH
10 /Times-Roman AF
16472 XM
(94)SH
33732 XM
(formal parameters)
SH( 28,)
500 W( 59, 60, 61)SH
12852 70871 MT
(by value)
SH( 93)500 W
33732 XM
(formatting conventions)
SH( 136,)
500 W( 138)SH
11480 71976 MT
(Performance 124)500 W
33732 XM
(forward reference)
SH( 10,)
500 W( 11)SH
ES
%%Page: 161 162
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Index)SH
46380 XM
(161)SH
/Times-Roman SF
15012 7886 MT
(headings 59)500 W
9 /Courier AF
35892 XM
(SYSTEM.WORD)SH
10 /Times-Roman AF
42582 XM
(47)SH
15012 8991 MT
(implementation restrictions)
SH( 61,)
500 W( 62)SH
35892 XM
(applicability 47)500 W
15012 10096 MT
(in constant expressions)
SH( 16)500 W
35892 XM
(arrays 47)500 W
15012 11201 MT
(inline 61,)
500 W( 125)SH
35892 XM
(dynamic arrays)
SH( 47)500 W
15012 12306 MT
(local declarations)
SH( 60)500 W
35892 XM
(numeric 46)500 W
15012 13411 MT
(nested declarations)
SH( 60,)
500 W( 62)SH
35892 XM
(opaque types)
SH( 47,)
500 W( 75)SH
15012 14516 MT
(open array formal parameters)
SH( 25)500 W
35892 XM
(ordinal 46)500 W
15012 15621 MT
(procedure types)
SH( 37)500 W
35892 XM
(pointers 47)500 W
15012 16726 MT
(recursive 60,)
500 W( 62)SH
35892 XM
(procedures 47)500 W
15012 17831 MT
(relations 47)500 W
35892 XM
(record 47)500 W
15012 18936 MT
(representation 103)500 W
35892 XM
(set 46)500 W
15012 20041 MT
(results 59)500 W
35892 XM
(string 46)500 W
15012 21146 MT
(scope 8)500 W
35892 XM
(type-checking 91)500 W
15012 22251 MT
(subarray formal parameters)
SH( 31)500 W
34520 XM
(Remainder)SH
15012 23356 MT
(type-checking procedure call)
SH( 25,)
500 W( 31)SH
36392 XM
(See instead)SH
9 /Courier AF
41669 XM
(MOD)SH
10 /Times-Roman AF
43539 XM
(operator)SH
15012 24461 MT
(type-checking relations)
SH( 91)500 W
34520 XM
(Renaming)SH
15012 25566 MT
(value parameters)
SH( 59,)
500 W( 60)SH
35892 XM
(imported constants)
SH( 12)500 W
15512 26671 MT
(See also)
SH( supplied)
500 W( procedures)SH
35892 XM
(imported types)
SH( 12)500 W
13640 27776 MT
(Processes)SH
35892 XM
(type-checking 87)500 W
15512 28881 MT
(See instead)
SH( coroutines)500 W
35892 XM
(types 21)500 W
13640 29986 MT
(Pseudo-modules)SH
9 /Courier AF
34520 XM
(REPEAT)SH
10 /Times-Roman AF
38010 XM
(statement 55,)
500 W( 57)SH
9 /Courier AF
15012 31091 MT
(BITOPERATIONS)SH
10 /Times-Roman AF
22782 XM
(83)SH
34520 XM
(Representation 97)500 W
9 /Courier AF
15012 32196 MT
(IO)SH
10 /Times-Roman AF
16842 XM
(84)SH
9 /Courier AF
35892 XM
(BITSET)SH
10 /Times-Roman AF
39882 XM
(102)SH
9 /Courier AF
15012 33301 MT
(SYSTEM)SH
10 /Times-Roman AF
19002 XM
(79)SH
9 /Courier AF
35892 XM
(BOOLEAN)SH
10 /Times-Roman AF
40422 XM
(99)SH
15012 34406 MT
(case-sensitivity 79)500 W
9 /Courier AF
35892 XM
(CARDINAL)SH
10 /Times-Roman AF
40962 XM
(98)SH
15012 35511 MT
(classified 79)500 W
9 /Courier AF
35892 XM
(CHAR)SH
10 /Times-Roman AF
38802 XM
(99)SH
9 /Courier AF
35892 36616 MT
(INTEGER)SH
10 /Times-Roman AF
40422 XM
(98)SH
13640 37721 MT
(Qualified exports)
SH( 73)500 W
9 /Courier AF
35892 XM
(LONGREAL)SH
10 /Times-Roman AF
40962 XM
(100)SH
13640 38826 MT
(Qualified names)
SH( 8,)
500 W( 132)SH
9 /Courier AF
35892 XM
(REAL)SH
10 /Times-Roman AF
38802 XM
(99)SH
9 /Courier AF
35892 39931 MT
(SYSTEM.ADDRESS)SH
10 /Times-Roman AF
44202 XM
(103)SH
13640 41036 MT
(Range-checking)SH
9 /Courier AF
35892 XM
(UNSIGNED)SH
10 /Times-Roman AF
40962 XM
(99)SH
15512 42141 MT
(See instead)
SH( runtime)
500 W( checking)SH
35892 XM
(arrays 100,)
500 W( 101)SH
13640 43246 MT
(Raw input and output)
SH( 84)500 W
35892 XM
(dynamic arrays)
SH( 101)500 W
13640 44351 MT
(Reading files)
SH( 84)500 W
35892 XM
(enumerations 100)500 W
9 /Courier AF
13640 45456 MT
(REAL)SH
10 /Times-Roman AF
16050 XM
(type 19)500 W
35892 XM
(fixed-size arrays)
SH( 100)500 W
9 /Courier AF
13640 46561 MT
(REAL)SH
10 /Times-Roman AF
16050 XM
(type: representation)
SH( 99)500 W
35892 XM
(motivated 97)500 W
9 /Courier AF
13640 47666 MT
(REAL)SH
10 /Times-Roman AF
16050 XM
(type: type-checking)
SH( 89)500 W
35892 XM
(open arrays)
SH( 101)500 W
13640 48771 MT
(Reals)SH
35892 XM
(pointers 103)500 W
15012 49876 MT
(literal 4)500 W
35892 XM
(procedures 103)500 W
13640 50981 MT
(Record fields)SH
35892 XM
(records 102)500 W
15512 52086 MT
(See instead)
SH( fields)500 W
35892 XM
(sets 102)500 W
9 /Courier AF
13640 53191 MT
(RECORD)SH
10 /Times-Roman AF
17130 XM
(type constructor)
SH( 32)500 W
35892 XM
(subarrays 101)500 W
13640 54296 MT
(Records 32)500 W
35892 XM
(subranges 100)500 W
9 /Courier AF
15012 55401 MT
(WITH)SH
10 /Times-Roman AF
17422 XM
(statement 13)500 W
34520 XM
(Restrictions)SH
15012 56506 MT
(constant 16)500 W
36392 XM
(See instead)
SH( implementation)
500 W( restrictions)SH
15012 57611 MT
(creating with)SH
9 /Courier AF
20511 XM
(NEW)SH
10 /Times-Roman AF
22381 XM
(procedure 69)500 W
9 /Courier AF
34520 XM
(RETURN)SH
10 /Times-Roman AF
38010 XM
(statement 53,)
500 W( 55, 59)SH
15012 58716 MT
(declarations 10)500 W
34520 XM
(Runtime checking)
SH( 126)500 W
15012 59821 MT
(fields 33)500 W
9 /Courier AF
35892 XM
(ASSERT)SH
10 /Times-Roman AF
39382 XM
(procedure 70)500 W
15012 60926 MT
(imports 12)500 W
9 /Courier AF
35892 XM
(CHR)SH
10 /Times-Roman AF
37762 XM
(procedure 66)500 W
15012 62031 MT
(relations 47)500 W
9 /Courier AF
35892 XM
(DEC)SH
10 /Times-Roman AF
37762 XM
(procedure 64)500 W
15012 63136 MT
(representation 102)500 W
9 /Courier AF
35892 XM
(FLOAT)SH
10 /Times-Roman AF
38842 XM
(procedure 66)500 W
15012 64241 MT
(tag field)
SH( 33,)
500 W( 34)SH
9 /Courier AF
35892 XM
(FOR)SH
10 /Times-Roman AF
37762 XM
(control variable)
SH( 56)500 W
15012 65346 MT
(tagless variants)
SH( 34,)
500 W( 106)SH
9 /Courier AF
35892 XM
(INC)SH
10 /Times-Roman AF
37762 XM
(procedure 64)500 W
15012 66451 MT
(variants 33,)
500 W( 34, 36)SH
9 /Courier AF
35892 XM
(LONGFLOAT)SH
10 /Times-Roman AF
41002 XM
(procedure 66)500 W
13640 67556 MT
(Redeclarations)SH
9 /Courier AF
35892 XM
(VAL)SH
10 /Times-Roman AF
37762 XM
(procedure 67)500 W
15012 68661 MT
(of identifiers)
SH( 9)500 W
35892 XM
(enabling and disabling)
SH( 126)500 W
15012 69766 MT
(of supplied identifiers)
SH( 7,)
500 W( 132)SH
35892 XM
(pointers 29,)
500 W( 36, 103)SH
13640 70871 MT
(Relations)SH
35892 XM
(slices 31)500 W
9 /Courier AF
15012 71976 MT
(SYSTEM.BYTE)SH
10 /Times-Roman AF
21702 XM
(47)SH
35892 XM
(subranges 22)500 W
ES
%%Page: 162 163
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(162)SH
43275 XM
(Index)SH
/Times-Roman SF
12852 7886 MT
(subscripts 24,)
500 W( 26, 29, 31)SH
33732 XM
(defined 25)500 W
12852 8991 MT
(variant records)
SH( 34)500 W
33732 XM
(escape sequences)
SH( 5)500 W
11480 10096 MT
(Runtime initialization)
SH( 116)500 W
33732 XM
(implementation restrictions)
SH( 128)500 W
33732 11201 MT
(input and output)
SH( 85)500 W
11480 12306 MT
(Scope)SH
33732 XM
(literal 5)500 W
12852 13411 MT
(declarations 9)500 W
33732 XM
(multi-line 5)500 W
12852 14516 MT
(defined 7)500 W
33732 XM
(null termination)
SH( 5)500 W
12852 15621 MT
(enumerations 10,)
500 W( 12)SH
33732 XM
(relations 46)500 W
12852 16726 MT
(fields 8)500 W
33732 XM
(type-checking 89,)
500 W( 90, 93)SH
12852 17831 MT
(forward reference)
SH( 10,)
500 W( 11)SH
33732 XM
(type-checking relations)
SH( 91)500 W
12852 18936 MT
(implementation modules)
SH( 8,)
500 W( 74)SH
32360 XM
(Style notes)
SH( 129)500 W
12852 20041 MT
(imports 8,)
500 W( 11)SH
9 /Courier AF
32360 XM
(SUBARRAY)SH
10 /Times-Roman AF
36930 XM
(type constructor)
SH( 31)500 W
12852 21146 MT
(nested modules)
SH( 14)500 W
32360 XM
(Subarrays 31)500 W
12852 22251 MT
(procedures 8)500 W
33732 XM
(assignments 31)500 W
12852 23356 MT
(qualified names)
SH( 8)500 W
33732 XM
(formal parameters)
SH( 31)500 W
12852 24461 MT
(records 10,)
500 W( 12)SH
33732 XM
(representation 101)500 W
12852 25566 MT
(redeclarations 9)500 W
33732 XM
(runtime checking)
SH( 31,)
500 W( 126)SH
11480 26671 MT
(Selection of fields)
SH( 8,)
500 W( 33)SH
33732 XM
(subscripts 31)500 W
9 /Courier AF
11480 27776 MT
(SET)SH
10 /Times-Roman AF
13350 XM
(type constructor)
SH( 34)500 W
33732 XM
(type-checking 31)500 W
11480 28881 MT
(Sets)SH
32360 XM
(Subranges)SH
9 /Courier AF
12852 29986 MT
(EXCL)SH
10 /Times-Roman AF
15262 XM
(procedure 68)500 W
33732 XM
(basetype 22)500 W
9 /Courier AF
12852 31091 MT
(INCL)SH
10 /Times-Roman AF
15262 XM
(procedure 68)500 W
33732 XM
(representation 100)500 W
12852 32196 MT
(constants 15)500 W
33732 XM
(runtime checking)
SH( 22,)
500 W( 126)SH
12852 33301 MT
(constructors 15,)
500 W( 35, 43)SH
33732 XM
(style notes)
SH( 133)500 W
12852 34406 MT
(implementation restrictions)
SH( 128)500 W
33732 XM
(type constructor)
SH( 22)500 W
12852 35511 MT
(larger than one word)
SH( 35)500 W
32360 XM
(Subscripts 24,)
500 W( 29, 31)SH
12852 36616 MT
(operators 46)500 W
33732 XM
(in designators)
SH( 41)500 W
12852 37721 MT
(relations 46)500 W
33732 XM
(open array formal vs. actual parameters)SH
12852 38826 MT
(representation 102)500 W
36360 XM
(26, 27)SH
12852 39931 MT
(supplied procedures)
SH( 68)500 W
33732 XM
(runtime checking)
SH( 24,)
500 W( 26, 29, 31, 126)SH
12852 41036 MT
(type constructor)
SH( 34)500 W
33732 XM
(type-checking 24)500 W
12852 42141 MT
(type-checking relations)
SH( 91)500 W
32360 XM
(Subset relation)
SH( 46)500 W
11480 43246 MT
(Shifts 83)500 W
32360 XM
(Subtraction 44)500 W
11480 44351 MT
(SIZE procedure)SH
32360 XM
(Superset relation)
SH( 46)500 W
13352 45456 MT
(See instead)SH
9 /Courier AF
18629 XM
(SYSTEM.SIZE)SH
10 /Times-Roman AF
32360 XM
(Supplied identifiers)SH
11480 46561 MT
(Slices \050of arrays\051)
SH( 31)500 W
33732 XM
(automatic import)
SH( 7)500 W
12852 47666 MT
(runtime checking)
SH( 31,)
500 W( 126)SH
33732 XM
(case-sensitivity 7)500 W
11480 48771 MT
(Standard identifiers)SH
33732 XM
(complete list)
SH( 7)500 W
13352 49876 MT
(See instead)
SH( supplied,)
500 W( pseudo-modules)SH
33732 XM
(defined 1)500 W
11480 50981 MT
(Statements)SH
33732 XM
(redeclarations 7,)
500 W( 132)SH
12852 52086 MT
(classified 49)500 W
32360 XM
(Supplied modules)SH
12852 53191 MT
(formatting conventions)
SH( 136)500 W
34232 XM
(See instead)
SH( pseudo-modules)500 W
12852 54296 MT
(procedure call)
SH( 61)500 W
32360 XM
(Supplied procedures)SH
12852 55401 MT
(sequence 49)500 W
9 /Courier AF
33732 XM
(ABS)SH
10 /Times-Roman AF
36102 XM
(64)SH
12852 56506 MT
(versus expressions)
SH( 49)500 W
9 /Courier AF
33732 XM
(ASSERT)SH
10 /Times-Roman AF
37722 XM
(70)SH
11480 57611 MT
(Step value)SH
9 /Courier AF
33732 XM
(CAP)SH
10 /Times-Roman AF
36102 XM
(64)SH
13352 58716 MT
(See instead)SH
9 /Courier AF
18629 XM
(BY)SH
10 /Times-Roman AF
(-value)SH
9 /Courier AF
33732 XM
(CHR)SH
10 /Times-Roman AF
36102 XM
(66)SH
11480 59821 MT
(Storage allocation and deallocation)SH
9 /Courier AF
33732 XM
(DEC)SH
10 /Times-Roman AF
36102 XM
(64)SH
9 /Courier AF
12852 60926 MT
(DISPOSE)SH
10 /Times-Roman AF
16882 XM
(procedure 29,)
500 W( 35, 36, 69, 105,)SH
9 /Courier AF
33732 XM
(DESCRIPTOR)SH
10 /Times-Roman AF
39882 XM
(71)SH
15480 62031 MT
(128)SH
9 /Courier AF
33732 XM
(DISPOSE)SH
10 /Times-Roman AF
38262 XM
(69)SH
9 /Courier AF
12852 63136 MT
(LOCAL)SH
10 /Times-Roman AF
15802 XM
(procedure 29,)
500 W( 69)SH
9 /Courier AF
33732 XM
(EXCL)SH
10 /Times-Roman AF
36642 XM
(68)SH
9 /Courier AF
12852 64241 MT
(NEW)SH
10 /Times-Roman AF
14722 XM
(procedure 28,)
500 W( 35, 36, 69, 105, 128)SH
9 /Courier AF
33732 XM
(FIRST)SH
10 /Times-Roman AF
37182 XM
(71)SH
12852 65346 MT
(supplied procedures)
SH( 69)500 W
9 /Courier AF
33732 XM
(FLOAT)SH
10 /Times-Roman AF
37182 XM
(66)SH
9 /Courier AF
11480 66451 MT
(Storage.ALLOCATE)SH
10 /Times-Roman AF
20370 XM
(procedure 128)500 W
9 /Courier AF
33732 XM
(HALT)SH
10 /Times-Roman AF
36642 XM
(70)SH
9 /Courier AF
11480 67556 MT
(Storage.DEALLOCATE)SH
10 /Times-Roman AF
21450 XM
(procedure 128)500 W
9 /Courier AF
33732 XM
(HIGH)SH
10 /Times-Roman AF
36642 XM
(72)SH
11480 68661 MT
(Strings)SH
9 /Courier AF
33732 XM
(INCL)SH
10 /Times-Roman AF
36642 XM
(68)SH
12852 69766 MT
(assignment 51)500 W
9 /Courier AF
33732 XM
(INC)SH
10 /Times-Roman AF
36102 XM
(64)SH
12852 70871 MT
(constants 15)500 W
9 /Courier AF
33732 XM
(LAST)SH
10 /Times-Roman AF
36642 XM
(71)SH
12852 71976 MT
(conversion 85)500 W
9 /Courier AF
33732 XM
(LOCAL)SH
10 /Times-Roman AF
37182 XM
(69)SH
ES
%%Page: 163 164
BS
0 SI
10 /Times-Bold AF
13680 4270 MT
(Index)SH
46380 XM
(163)SH
9 /Courier AF
15012 7886 MT
(LONGFLOAT)SH
10 /Times-Roman AF
20622 XM
(66)SH
9 /Courier AF
34520 XM
(SYSTEM.TSIZE)SH
10 /Times-Roman AF
41250 XM
(procedure 16,)
500 W( 81)SH
9 /Courier AF
15012 8991 MT
(LOW)SH
10 /Times-Roman AF
17382 XM
(72)SH
9 /Courier AF
34520 XM
(SYSTEM.TWORDSIZE)SH
10 /Times-Roman AF
43410 XM
(procedure 16,)
500 W( 81)SH
9 /Courier AF
15012 10096 MT
(MAX)SH
10 /Times-Roman AF
17382 XM
(64)SH
9 /Courier AF
34520 XM
(SYSTEM.UNIT)SH
10 /Times-Roman AF
40710 XM
(type 81)500 W
9 /Courier AF
15012 11201 MT
(MIN)SH
10 /Times-Roman AF
17382 XM
(65)SH
9 /Courier AF
34520 XM
(SYSTEM.WORD)SH
10 /Times-Roman AF
40710 XM
(type 27,)
500 W( 80)SH
9 /Courier AF
15012 12306 MT
(NEW)SH
10 /Times-Roman AF
17382 XM
(69)SH
9 /Courier AF
34520 XM
(SYSTEM.WORD)SH
10 /Times-Roman AF
40710 XM
(type: relations)
SH( 47)500 W
9 /Courier AF
15012 13411 MT
(NUMBER)SH
10 /Times-Roman AF
19002 XM
(72)SH
9 /Courier AF
34520 XM
(SYSTEM.WORD)SH
10 /Times-Roman AF
(: type-checking relations)
SH( 91)500 W
9 /Courier AF
15012 14516 MT
(ODD)SH
10 /Times-Roman AF
17382 XM
(66)SH
9 /Courier AF
34520 XM
(SYSTEM.WORDSIZE)SH
10 /Times-Roman AF
42870 XM
(procedure 16,)
500 W( 81)SH
9 /Courier AF
15012 15621 MT
(ORD)SH
10 /Times-Roman AF
17382 XM
(67)SH
9 /Courier AF
15012 16726 MT
(TRUNC)SH
10 /Times-Roman AF
18462 XM
(67)SH
34520 XM
(Tabs 3)500 W
9 /Courier AF
15012 17831 MT
(VAL)SH
10 /Times-Roman AF
17382 XM
(67)SH
34520 XM
(Tag field)
SH( 33,)
500 W( 36)SH
15012 18936 MT
(array constructors)
SH( 71)500 W
34520 XM
(Tagless variant records)
SH( 106)500 W
15012 20041 MT
(classified 63)500 W
34520 XM
(Termination of program)
SH( 70)500 W
15012 21146 MT
(control structures)
SH( 70)500 W
34520 XM
(Threads)SH
15012 22251 MT
(conversions 66)500 W
36392 XM
(See instead)
SH( coroutines)500 W
15012 23356 MT
(ordinal types)
SH( 64)500 W
34520 XM
(Time used by program)
SH( 82)500 W
15012 24461 MT
(sets 68)500 W
34520 XM
(Tokens of the language)
SH( 3)500 W
15012 25566 MT
(storage allocation and deallocation)
SH( 69)500 W
9 /Courier AF
34520 XM
(TRUE)SH
10 /Times-Roman AF
36930 XM
(constant 20)500 W
15012 26671 MT
(type deconstructors)
SH( 71)500 W
9 /Courier AF
34520 XM
(TRUNC)SH
10 /Times-Roman AF
37470 XM
(procedure 16,)
500 W( 67)SH
13640 27776 MT
(Supplied types)SH
34520 XM
(TSIZE procedure)SH
15012 28881 MT
(classified 20)500 W
36392 XM
(See instead)SH
9 /Courier AF
41669 XM
(SYSTEM.TSIZE)SH
10 /Times-Roman AF
15012 29986 MT
(complete list)
SH( 19)500 W
34520 XM
(Type cast)SH
13640 31091 MT
(Symbols \050of the language\051)SH
36392 XM
(See instead)SH
9 /Courier AF
41669 XM
(SYSTEM.BYTE)SH
10 /Times-Roman AF
(,)SH
15512 32196 MT
(See instead)
SH( tokens)500 W
9 /Courier AF
38520 XM
(SYSTEM.WORD)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
44960 XM
(ORD)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
47080 XM
(CHR)SH
10 /Times-Roman AF
(,)SH
9 /Courier AF
49200 XM
(VAL)SH
10 /Times-Roman AF
(, type)SH
13640 33301 MT
(Symmetric set difference)
SH( 46)500 W
38520 XM
(transfer, tagless variant records)SH
9 /Courier AF
13640 34406 MT
(SYSTEM)SH
10 /Times-Roman AF
17130 XM
(module 79)500 W
34520 XM
(Type constructors)SH
9 /Courier AF
13640 35511 MT
(SYSTEM.ADDRESS)SH
10 /Times-Roman AF
21450 XM
(type 81)500 W
9 /Courier AF
35892 XM
(@ALIGN)SH
10 /Times-Roman AF
39882 XM
(103)SH
9 /Courier AF
13640 36616 MT
(SYSTEM.ADDRESS)SH
10 /Times-Roman AF
21450 XM
(type: representation)
SH( 103)500 W
9 /Courier AF
35892 XM
(@SIZE)SH
10 /Times-Roman AF
39342 XM
(103)SH
9 /Courier AF
13640 37721 MT
(SYSTEM.ADDRESS)SH
10 /Times-Roman AF
21450 XM
(type: type-checking)
SH( 90,)
500 W( 93)SH
9 /Courier AF
35892 XM
(ARRAY OF T)SH
10 /Times-Roman AF
42042 XM
(25)SH
9 /Courier AF
13640 38826 MT
(SYSTEM.ADR)SH
10 /Times-Roman AF
19290 XM
(procedure 27,)
500 W( 35, 81)SH
9 /Courier AF
35892 XM
(ARRAY T1 OF T2)SH
10 /Times-Roman AF
44202 XM
(24)SH
9 /Courier AF
13640 39931 MT
(SYSTEM.BITSIZE)SH
10 /Times-Roman AF
21450 XM
(procedure 16,)
500 W( 81)SH
9 /Courier AF
35892 XM
(DYNARRAY OF T)SH
10 /Times-Roman AF
43662 XM
(28)SH
9 /Courier AF
13640 41036 MT
(SYSTEM.BITSPERBYTE)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(POINTER TO)SH
10 /Times-Roman AF
42042 XM
(35)SH
9 /Courier AF
13640 42141 MT
(SYSTEM.BITSPERUNIT)SH
10 /Times-Roman AF
23610 XM
(constant 81)500 W
9 /Courier AF
35892 XM
(PROCEDURE)SH
10 /Times-Roman AF
41502 XM
(37)SH
9 /Courier AF
13640 43246 MT
(SYSTEM.BITSPERWORD)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(RECORD)SH
10 /Times-Roman AF
39882 XM
(32)SH
9 /Courier AF
13640 44351 MT
(SYSTEM.BYTE)SH
10 /Times-Roman AF
19830 XM
(type 27,)
500 W( 80)SH
9 /Courier AF
35892 XM
(SET)SH
10 /Times-Roman AF
38262 XM
(34)SH
9 /Courier AF
13640 45456 MT
(SYSTEM.BYTE)SH
10 /Times-Roman AF
19830 XM
(type: relations)
SH( 47)500 W
9 /Courier AF
35892 XM
(SUBARRAY OF T)SH
10 /Times-Roman AF
43662 XM
(31)SH
9 /Courier AF
13640 46561 MT
(SYSTEM.BYTE)SH
10 /Times-Roman AF
(: type-checking relations)
SH( 91)500 W
35892 XM
(complete list)
SH( 21)500 W
9 /Courier AF
13640 47666 MT
(SYSTEM.BYTEPERWORD)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
35892 XM
(enumeration 23)500 W
9 /Courier AF
13640 48771 MT
(SYSTEM.BYTESIZE)SH
10 /Times-Roman AF
21990 XM
(procedure 16,)
500 W( 27, 81)SH
35892 XM
(formal parameters)
SH( 28)500 W
9 /Courier AF
13640 49876 MT
(SYSTEM.CPUTIME)SH
10 /Times-Roman AF
21450 XM
(procedure 82)500 W
35892 XM
(subrange 22)500 W
9 /Courier AF
13640 50981 MT
(SYSTEM.LEASTSIGBIT)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
35892 XM
(supplied procedures)
SH( 71)500 W
9 /Courier AF
13640 52086 MT
(SYSTEM.MAXCARD)SH
10 /Times-Roman AF
21450 XM
(constant 80)500 W
34520 XM
(Type deconstructors)SH
9 /Courier AF
13640 53191 MT
(SYSTEM.MAXINT)SH
10 /Times-Roman AF
20910 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(FIRST)SH
10 /Times-Roman AF
38842 XM
(procedure 71)500 W
9 /Courier AF
13640 54296 MT
(SYSTEM.MAXLONGREAL)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(HIGH)SH
10 /Times-Roman AF
38302 XM
(procedure 72)500 W
9 /Courier AF
13640 55401 MT
(SYSTEM.MAXREAL)SH
10 /Times-Roman AF
21450 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(LAST)SH
10 /Times-Roman AF
38302 XM
(procedure 71)500 W
9 /Courier AF
13640 56506 MT
(SYSTEM.MAXUNSIGNED)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(LOW)SH
10 /Times-Roman AF
37762 XM
(procedure 72)500 W
9 /Courier AF
13640 57611 MT
(SYSTEM.MINCARD)SH
10 /Times-Roman AF
21450 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(NUMBER)SH
10 /Times-Roman AF
39382 XM
(procedure 72)500 W
9 /Courier AF
13640 58716 MT
(SYSTEM.MININT)SH
10 /Times-Roman AF
20910 XM
(constant 80)500 W
34520 XM
(Type transfer)
SH( 38)500 W
9 /Courier AF
13640 59821 MT
(SYSTEM.MINLONGREAL)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
35892 XM
(constant expressions)
SH( 16)500 W
9 /Courier AF
13640 60926 MT
(SYSTEM.MINPOSLONGREAL)SH
10 /Times-Roman AF
25230 XM
(constant 80)500 W
35892 XM
(in designators)
SH( 41)500 W
9 /Courier AF
13640 62031 MT
(SYSTEM.MINPOSREAL)SH
10 /Times-Roman AF
23070 XM
(constant 80)500 W
35892 XM
(style notes)
SH( 133)500 W
9 /Courier AF
13640 63136 MT
(SYSTEM.MINREAL)SH
10 /Times-Roman AF
21450 XM
(constant 80)500 W
34520 XM
(Type-checking 87)500 W
9 /Courier AF
13640 64241 MT
(SYSTEM.MINUNSIGNED)SH
10 /Times-Roman AF
23610 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(@ALIGN)SH
10 /Times-Roman AF
39382 XM
(type constructor)
SH( 104)500 W
9 /Courier AF
13640 65346 MT
(SYSTEM.MOSTSIGBIT)SH
10 /Times-Roman AF
23070 XM
(constant 80)500 W
9 /Courier AF
35892 XM
(@SIZE)SH
10 /Times-Roman AF
38842 XM
(type constructor)
SH( 104)500 W
9 /Courier AF
13640 66451 MT
(SYSTEM.NEWPROCESS)SH
10 /Times-Roman AF
23070 XM
(procedure 82)500 W
9 /Courier AF
35892 XM
(CARDINAL)SH
10 /Times-Roman AF
40462 XM
(type 88)500 W
9 /Courier AF
13640 67556 MT
(SYSTEM.PROCESS)SH
10 /Times-Roman AF
21450 XM
(type 82)500 W
9 /Courier AF
35892 XM
(FOR)SH
10 /Times-Roman AF
37762 XM
(control variable)
SH( 56)500 W
9 /Courier AF
13640 68661 MT
(SYSTEM.SIZE)SH
10 /Times-Roman AF
19830 XM
(procedure 16,)
500 W( 27, 81)SH
9 /Courier AF
35892 XM
(NIL)SH
10 /Times-Roman AF
37762 XM
(constant 37,)
500 W( 89, 90)SH
9 /Courier AF
13640 69766 MT
(SYSTEM.TBITSIZE)SH
10 /Times-Roman AF
21990 XM
(procedure 16,)
500 W( 81)SH
35892 XM
(assignments 93)500 W
9 /Courier AF
13640 70871 MT
(SYSTEM.TBYTESIZE)SH
10 /Times-Roman AF
22530 XM
(procedure 16,)
500 W( 81)SH
35892 XM
(basetype 87)500 W
9 /Courier AF
13640 71976 MT
(SYSTEM.TRANSFER)SH
10 /Times-Roman AF
21990 XM
(procedure 82)500 W
35892 XM
(case labels)
SH( 54)500 W
ES
%%Page: 164 165
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(164)SH
/Times-Roman SF
12852 7886 MT
(compatibility 90)500 W
34232 XM
(See instead)
SH( scope)500 W
12852 8991 MT
(constants 88,)
500 W( 89, 90)SH
12852 10096 MT
(expressions 90)500 W
9 /Courier AF
32360 XM
(WHILE)SH
10 /Times-Roman AF
35310 XM
(statement 55,)
500 W( 57, 125)SH
12852 11201 MT
(open array formal parameters)
SH( 25)500 W
9 /Courier AF
32360 XM
(WHILE)SH
10 /Times-Roman AF
35310 XM
(statement: formatting conventions)
SH( 136)500 W
12852 12306 MT
(operators 92)500 W
9 /Courier AF
32360 XM
(WITH)SH
10 /Times-Roman AF
34770 XM
(statement 13)500 W
12852 13411 MT
(procedure calls)
SH( 93,)
500 W( 94)SH
9 /Courier AF
32360 XM
(WITH)SH
10 /Times-Roman AF
34770 XM
(statement: formatting conventions)
SH( 136)500 W
12852 14516 MT
(procedure types)
SH( 37,)
500 W( 90)SH
9 /Courier AF
32360 XM
(WITH)SH
10 /Times-Roman AF
34770 XM
(statement: style notes)
SH( 132)500 W
12852 15621 MT
(relations 91)500 W
32360 XM
(WORD type)SH
12852 16726 MT
(renaming 87)500 W
34232 XM
(See instead)SH
9 /Courier AF
39509 XM
(SYSTEM.WORD)SH
10 /Times-Roman AF
12852 17831 MT
(same type)
SH( 21,)
500 W( 87)SH
32360 XM
(Writing files)
SH( 84)500 W
12852 18936 MT
(strings 89)500 W
12852 20041 MT
(subarray formal parameters)
SH( 31)500 W
32360 XM
(Xor)SH
12852 21146 MT
(subscripts 24)500 W
33732 XM
(sets 46)500 W
12852 22251 MT
(types returned from operators)
SH( 92)500 W
33732 XM
(words 83)500 W
11480 23356 MT
(Types)SH
12852 24461 MT
(classified 37,)
500 W( 89)SH
32360 XM
(Zero divide)
SH( 45)500 W
12852 25566 MT
(concrete 75)500 W
12852 26671 MT
(declarations 9,)
500 W( 21)SH
9 /Courier AF
32360 XM
(\134)SH
10 /Times-Roman AF
33150 XM
(\050in literal strings\051)
SH( 5)500 W
12852 27776 MT
(declarations motivated)
SH( 21)500 W
12852 28881 MT
(formatting conventions)
SH( 136)500 W
9 /Courier AF
32360 XM
(^)SH
10 /Times-Roman AF
33150 XM
(operator 29,)
500 W( 36, 41)SH
12852 29986 MT
(motivated 19)500 W
12852 31091 MT
(non-numeric 37,)
500 W( 89)SH
9 /Courier AF
32360 XM
(~)SH
10 /Times-Roman AF
33150 XM
(operator 44)500 W
12852 32196 MT
(non-ordinal 37,)
500 W( 89)SH
12852 33301 MT
(numeric 20,)
500 W( 37, 89)SH
12852 34406 MT
(opaque 75)500 W
12852 35511 MT
(ordinal 20,)
500 W( 37, 89)SH
12852 36616 MT
(renaming 12)500 W
13352 37721 MT
(See also)
SH( supplied)
500 W( types, type constructors)SH
11480 39931 MT
(Unary operators)
SH( 44)500 W
11480 41036 MT
(Underflow 45)500 W
11480 42141 MT
(Union \050of sets\051)
SH( 46)500 W
9 /Courier AF
11480 43246 MT
(UNSIGNED)SH
10 /Times-Roman AF
16050 XM
(type 19)500 W
9 /Courier AF
11480 44351 MT
(UNSIGNED)SH
10 /Times-Roman AF
16050 XM
(type: representation)
SH( 99)500 W
9 /Courier AF
11480 45456 MT
(UNSIGNED)SH
10 /Times-Roman AF
16050 XM
(type: type-checking)
SH( 88,)
500 W( 89, 90, 93)SH
9 /Courier AF
11480 47666 MT
(VAL)SH
10 /Times-Roman AF
13350 XM
(procedure 16,)
500 W( 24, 67)SH
9 /Courier AF
11480 48771 MT
(VAL)SH
10 /Times-Roman AF
13350 XM
(procedure: style notes)
SH( 133)500 W
11480 49876 MT
(Value parameters)
SH( 59,)
500 W( 60, 61)SH
12852 50981 MT
(type-checking 93)500 W
9 /Courier AF
11480 52086 MT
(VAR)SH
10 /Times-Roman AF
13350 XM
(parameters 60,)
500 W( 61)SH
9 /Courier AF
11480 53191 MT
(VAR)SH
10 /Times-Roman AF
13350 XM
(parameters: style notes)
SH( 131)500 W
9 /Courier AF
11480 54296 MT
(VAR)SH
10 /Times-Roman AF
13350 XM
(parameters: type-checking)
SH( 94)500 W
11480 55401 MT
(Variables)SH
12852 56506 MT
(creating with)SH
9 /Courier AF
18351 XM
(NEW)SH
10 /Times-Roman AF
20221 XM
(procedure 69)500 W
12852 57611 MT
(declarations 9,)
500 W( 39)SH
12852 58716 MT
(defined 39)500 W
12852 59821 MT
(designators 41,)
500 W( 51)SH
12852 60926 MT
(destroying with)SH
9 /Courier AF
19352 XM
(DISPOSE)SH
10 /Times-Roman AF
23382 XM
(procedure 69)500 W
12852 62031 MT
(export 131)500 W
12852 63136 MT
(expressions 43)500 W
12852 64241 MT
(external 111)500 W
12852 65346 MT
(formatting conventions)
SH( 136)500 W
12852 66451 MT
(initialization 39)500 W
11480 67556 MT
(Variant records)
SH( 33,)
500 W( 34, 36)SH
12852 68661 MT
(creating with)SH
9 /Courier AF
18351 XM
(NEW)SH
10 /Times-Roman AF
20221 XM
(procedure 69)500 W
12852 69766 MT
(runtime checking)
SH( 34)500 W
12852 70871 MT
(tagless 34,)
500 W( 106)SH
11480 71976 MT
(Visibility)SH
ES
%%Page: i 166
BS
0 SI
10 /Times-Bold AF
47602 4270 MT
(i)SH
14 /Times-Roman AF
25763 11760 MT
(Table of Contents)SH
11 SS 
13680 15249 MT
(1. Tokens and Comments)SH
47330 XM
(3)SH
15330 16724 MT
(1.1. Keywords)SH
47330 XM
(3)SH
15330 17920 MT
(1.2. Identifiers)SH
47330 XM
(3)SH
15330 19116 MT
(1.3. Literal Numbers)SH
47330 XM
(4)SH
15330 20312 MT
(1.4. Literal Characters)SH
47330 XM
(4)SH
15330 21508 MT
(1.5. Literal Strings)SH
47330 XM
(5)SH
15330 22704 MT
(1.6. Operators and Delimiters)SH
47330 XM
(6)SH
15330 23900 MT
(1.7. Comments)SH
47330 XM
(6)SH
13680 25375 MT
(2. Names and Name Scope)SH
47330 XM
(7)SH
15330 26850 MT
(2.1. Supplied Identifiers)SH
47330 XM
(7)SH
15330 28046 MT
(2.2. Name Scope)SH
47330 XM
(7)SH
15330 29242 MT
(2.3. Qualified Names)SH
47330 XM
(8)SH
15330 30438 MT
(2.4. Declaration)SH
47330 XM
(9)SH
15330 31634 MT
(2.5. Forward Reference)SH
46780 XM
(10)SH
15330 32830 MT
(2.6. Import)SH
46780 XM
(11)SH
15330 34026 MT
(2.7. Declaration versus Import)SH
46780 XM
(12)SH
15330 35222 MT
(2.8.)SH
10 /Courier AF
17255 XM
(WITH)SH
11 /Times-Roman AF
19930 XM
(Statements)SH
46780 XM
(13)SH
15330 36418 MT
(2.9. Nested Modules)SH
46780 XM
(14)SH
13680 37893 MT
(3. Constants and Constant Expressions)SH
46780 XM
(15)SH
15330 39368 MT
(3.1. Constant Expressions)SH
46780 XM
(15)SH
15330 40564 MT
(3.2. Declaring Constants)SH
46780 XM
(17)SH
13680 42039 MT
(4. Supplied Types)SH
46780 XM
(19)SH
15330 43514 MT
(4.1. Supplied Numeric Types)SH
46780 XM
(19)SH
15330 44710 MT
(4.2. Other Supplied Types)SH
46780 XM
(20)SH
15330 45906 MT
(4.3. Kinds of Supplied Types)SH
46780 XM
(20)SH
13680 47381 MT
(5. Constructing Types)SH
46780 XM
(21)SH
15330 48856 MT
(5.1. The Type Constructors)SH
46780 XM
(21)SH
15330 50052 MT
(5.2. Declaring Types)SH
46780 XM
(21)SH
15330 51248 MT
(5.3. Subranges)SH
46780 XM
(22)SH
15330 52444 MT
(5.4. Enumerations)SH
46780 XM
(23)SH
15330 53640 MT
(5.5. Fixed-Size Arrays)SH
46780 XM
(24)SH
15330 54836 MT
(5.6. Open Arrays)SH
46780 XM
(25)SH
15330 56032 MT
(5.7. Dynamic Arrays)SH
46780 XM
(28)SH
15330 57228 MT
(5.8. Subarrays)SH
46780 XM
(31)SH
15330 58424 MT
(5.9. Records)SH
46780 XM
(32)SH
15330 59620 MT
(5.10. Sets)SH
46780 XM
(34)SH
15330 60816 MT
(5.11. Pointers)SH
46780 XM
(35)SH
15330 62012 MT
(5.12. Procedure Types)SH
46780 XM
(37)SH
15330 63208 MT
(5.13. Kinds of Types)SH
46780 XM
(38)SH
15330 64404 MT
(5.14. Type Transfer)SH
46780 XM
(38)SH
ES
%%Page: ii 167
BS
0 SI
10 /Times-Bold AF
11520 4270 MT
(ii)SH
11 /Times-Roman AF
11520 7955 MT
(6. Variables)SH
44620 XM
(39)SH
11520 9430 MT
(7. Designators)SH
44620 XM
(41)SH
11520 10905 MT
(8. Expressions)SH
44620 XM
(43)SH
13170 12380 MT
(8.1. Operands)SH
44620 XM
(43)SH
13170 13576 MT
(8.2. Operators)SH
44620 XM
(44)SH
13170 14772 MT
(8.3. Applicability Charts)SH
44620 XM
(48)SH
11520 16247 MT
(9. The Syntax of Statements)SH
44620 XM
(49)SH
13170 17722 MT
(9.1. What Is a Statement?)SH
44620 XM
(49)SH
13170 18918 MT
(9.2. A Statement Is Not an Expression)SH
44620 XM
(49)SH
11520 20393 MT
(10. Assignments)SH
44620 XM
(51)SH
11520 21868 MT
(11. Control Structures)SH
44620 XM
(53)SH
13170 23343 MT
(11.1.)SH
10 /Courier AF
15645 XM
(RETURN)SH
11 /Times-Roman AF
44620 XM
(53)SH
13170 24539 MT
(11.2.)SH
10 /Courier AF
15645 XM
(IF)SH
11 /Times-Roman AF
44620 XM
(53)SH
13170 25735 MT
(11.3.)SH
10 /Courier AF
15645 XM
(CASE)SH
11 /Times-Roman AF
44620 XM
(54)SH
13170 26931 MT
(11.4.)SH
10 /Courier AF
15645 XM
(LOOP)SH
11 /Times-Roman AF
18320 XM
(and)SH
10 /Courier AF
20183 XM
(EXIT)SH
11 /Times-Roman AF
44620 XM
(55)SH
13170 28127 MT
(11.5.)SH
10 /Courier AF
15645 XM
(FOR)SH
11 /Times-Roman AF
44620 XM
(55)SH
13170 29323 MT
(11.6.)SH
10 /Courier AF
15645 XM
(WHILE)SH
11 /Times-Roman AF
44620 XM
(57)SH
13170 30519 MT
(11.7.)SH
10 /Courier AF
15645 XM
(REPEAT)SH
11 /Times-Roman AF
44620 XM
(57)SH
11520 31994 MT
(12. Procedures)SH
44620 XM
(59)SH
13170 33469 MT
(12.1. Procedure Declarations)SH
44620 XM
(59)SH
13170 34665 MT
(12.2. Procedure Calls)SH
44620 XM
(61)SH
13170 35861 MT
(12.3. Inline Procedures)SH
44620 XM
(61)SH
11520 37336 MT
(13. Supplied Procedures)SH
44620 XM
(63)SH
13170 38811 MT
(13.1. Ordinal Arithmetic)SH
44620 XM
(64)SH
13170 40007 MT
(13.2. Conversions)SH
44620 XM
(66)SH
13170 41203 MT
(13.3. Sets)SH
44620 XM
(68)SH
13170 42399 MT
(13.4. Storage Allocation and Deallocation)SH
44620 XM
(69)SH
13170 43595 MT
(13.5. Control)SH
44620 XM
(70)SH
13170 44791 MT
(13.6. Constructors and Deconstructors)SH
44620 XM
(71)SH
11520 46266 MT
(14. Modules)SH
44620 XM
(73)SH
13170 47741 MT
(14.1. Definition Modules)SH
44620 XM
(73)SH
13170 48937 MT
(14.2. Implementation Modules)SH
44620 XM
(74)SH
13170 50133 MT
(14.3. Opaque Types)SH
44620 XM
(75)SH
13170 51329 MT
(14.4. Main Modules)SH
44620 XM
(76)SH
13170 52525 MT
(14.5. Nested Modules)SH
44620 XM
(76)SH
13170 53721 MT
(14.6. Initialization)SH
44620 XM
(77)SH
11520 55196 MT
(15. Pseudo-Modules)SH
44620 XM
(79)SH
13170 56671 MT
(15.1. Module)SH
10 /Courier AF
19342 XM
(SYSTEM)SH
11 /Times-Roman AF
44620 XM
(79)SH
13170 57867 MT
(15.2. Module)SH
10 /Courier AF
19342 XM
(BITOPERATIONS)SH
11 /Times-Roman AF
44620 XM
(83)SH
13170 59063 MT
(15.3. Module)SH
10 /Courier AF
19342 XM
(IO)SH
11 /Times-Roman AF
44620 XM
(84)SH
11520 60538 MT
(16. Type-Checking)SH
44620 XM
(87)SH
13170 62013 MT
(16.1. Same Type)SH
44620 XM
(87)SH
13170 63209 MT
(16.2. Basetype)SH
44620 XM
(87)SH
13170 64405 MT
(16.3. Types for Constants)SH
44620 XM
(88)SH
13170 65601 MT
(16.4. Kinds of Types)SH
44620 XM
(89)SH
13170 66797 MT
(16.5. Type-Checking Expressions)SH
44620 XM
(90)SH
13170 67993 MT
(16.6. Type-Checking Assignments)SH
44620 XM
(93)SH
ES
%%Page: iii 168
BS
0 SI
10 /Times-Bold AF
47046 4270 MT
(iii)SH
11 /Times-Roman AF
15330 7955 MT
(16.7. Type-Checking Procedure Call)SH
46780 XM
(93)SH
13680 9430 MT
(17. Conditional Compilation)SH
46780 XM
(95)SH
15330 10905 MT
(17.1. Vocabulary)SH
46780 XM
(95)SH
15330 12101 MT
(17.2. Constant Definitions)SH
46780 XM
(95)SH
15330 13297 MT
(17.3. Constant Expressions)SH
46780 XM
(96)SH
15330 14493 MT
(17.4. Practical Notes)SH
46780 XM
(96)SH
13680 15968 MT
(18. Representation Issues)SH
46780 XM
(97)SH
15330 17443 MT
(18.1. The Underlying Machine Architectures)SH
46780 XM
(97)SH
15330 18639 MT
(18.2. Data Representation)SH
46780 XM
(98)SH
15330 19835 MT
(18.3.)SH
10 /Courier AF
17805 XM
(@SIZE)SH
11 /Times-Roman AF
21080 XM
(and)SH
10 /Courier AF
22943 XM
(@ALIGN)SH
11 /Times-Roman AF
46230 XM
(104)SH
15330 21031 MT
(18.4. Controlling the Representation of Pointers and Arrays)SH
46230 XM
(105)SH
15330 22227 MT
(18.5. Tagless Variant Records)SH
46230 XM
(107)SH
13680 23702 MT
(19. Mixing Modula-2 with Other Languages)SH
46230 XM
(109)SH
15330 25177 MT
(19.1. C Data Representation)SH
46230 XM
(109)SH
15330 26373 MT
(19.2. Pascal Data Representation)SH
46230 XM
(110)SH
15330 27569 MT
(19.3. External Names)SH
46230 XM
(111)SH
15330 28765 MT
(19.4. Calling Sequences)SH
46230 XM
(113)SH
15330 29961 MT
(19.5. Module Initialization)SH
46230 XM
(115)SH
15330 31157 MT
(19.6. Runtime Initialization)SH
46230 XM
(116)SH
15330 32353 MT
(19.7. Example Modula-2 Interfaces to C)SH
46230 XM
(116)SH
15330 33549 MT
(19.8. Example Modula-2 Interfaces to Pascal)SH
46230 XM
(122)SH
15330 34745 MT
(19.9. How Procedure Call Is Implemented)SH
46230 XM
(122)SH
13680 36220 MT
(20. Performance and Other Pragmatic Issues)SH
46230 XM
(125)SH
15330 37695 MT
(20.1. Code Generation for Control Structures)SH
46230 XM
(125)SH
15330 38891 MT
(20.2. Runtime Checking)SH
46230 XM
(126)SH
15330 40087 MT
(20.3. The Optimizer)SH
46230 XM
(127)SH
15330 41283 MT
(20.4. Storage Management for Pointers)SH
46230 XM
(128)SH
15330 42479 MT
(20.5. Implementation Restrictions)SH
46230 XM
(128)SH
13680 43954 MT
(21. Programming Style)SH
46230 XM
(131)SH
15330 45429 MT
(21.1. The)SH
10 /Courier AF
19790 XM
(.T)SH
11 /Times-Roman AF
21265 XM
(Convention)SH
46230 XM
(131)SH
15330 46625 MT
(21.2. Don't Export Variables)SH
46230 XM
(131)SH
15330 47821 MT
(21.3. Returning Multiple Values)SH
46230 XM
(131)SH
15330 49017 MT
(21.4. Choosing Identifiers)SH
46230 XM
(132)SH
15330 50213 MT
(21.5. Qualified Names)SH
46230 XM
(132)SH
15330 51409 MT
(21.6.)SH
10 /Courier AF
17805 XM
(WITH)SH
11 /Times-Roman AF
20480 XM
(Statements)SH
46230 XM
(133)SH
15330 52605 MT
(21.7. Declaring Constants)SH
46230 XM
(133)SH
15330 53801 MT
(21.8.)SH
10 /Courier AF
17805 XM
(ORD)SH
11 /Times-Roman AF
19880 XM
(and)SH
10 /Courier AF
21743 XM
(VAL)SH
11 /Times-Roman AF
23818 XM
(and Type Transfers)SH
46230 XM
(133)SH
15330 54997 MT
(21.9. Subranges)SH
46230 XM
(134)SH
13680 56472 MT
(22. Formatting Conventions)SH
46230 XM
(135)SH
15330 57947 MT
(22.1. Spelling and Capitalization)SH
46230 XM
(135)SH
15330 59143 MT
(22.2. Delimiters)SH
46230 XM
(135)SH
15330 60339 MT
(22.3. Indentation)SH
46230 XM
(136)SH
15330 61535 MT
(22.4. Comments)SH
46230 XM
(138)SH
15330 62731 MT
(22.5. Definition Modules)SH
46230 XM
(138)SH
13680 64206 MT
(23. Compatibility with Ordinary Modula-2)SH
46230 XM
(139)SH
15330 65681 MT
(23.1. Semantic Changes)SH
46230 XM
(139)SH
15330 66877 MT
(23.2. Semantic Extensions)SH
46230 XM
(140)SH
15330 68073 MT
(23.3. Syntactic Extensions)SH
46230 XM
(141)SH
ES
%%Page: i 169
BS
0 SI
10 /Times-Bold AF
47602 4270 MT
(i)SH
11 /Times-Roman AF
13680 7955 MT
(Appendix I. Railroad Diagrams)SH
46230 XM
(143)SH
13680 9430 MT
(Appendix II. Wirth's EBNF)SH
46230 XM
(145)SH
15330 10905 MT
(II.1. Notation)SH
46230 XM
(145)SH
15330 12101 MT
(II.2. Syntax in Wirth's EBNF)SH
46230 XM
(145)SH
15330 13297 MT
(II.3. Alphabetically Ordered EBNF)SH
46230 XM
(149)SH
13680 14772 MT
(References)SH
46230 XM
(153)SH
13680 16247 MT
(Index)SH
46230 XM
(155)SH
ES
%%Trailer
%%Pages: 169
%%DocumentFonts: Times-Roman Symbol Times-Bold Times-Italic Courier
