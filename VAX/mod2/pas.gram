/*****************************************************************************
 *									     *
 *             Copyright 1984-1990 Digital Equipment Corporation             *
 *                         All Rights Reserved				     *
 *								             *
 * Permission to use, copy, and modify this software and its documentation   *
 * is hereby granted only under the following terms and conditions.  Both    *
 * the above copyright notice and this permission notice must appear in all  *
 * copies of the software, derivative works or modified versions, and any    *
 * portions thereof, and both notices must appear in supporting              *
 * documentation.							     *
 *									     *
 * Users of this software agree to the terms and conditions set forth        *
 * herein, and hereby grant back to Digital a non-exclusive, unrestricted,   *
 * royalty-free right and license under any changes, enhancements or         *
 * extensions made to the core functions of the software, including but not  *
 * limited to those affording compatibility with other hardware or software  *
 * environments, but excluding applications which incorporate this software. *
 * Users further agree to use their best efforts to return to Digital any    *
 * such changes, enhancements or extensions that they make and inform        *
 * Digital of noteworthy uses of this software.  Correspondence should be    *
 * provided to Digital at:						     *
 * 									     *
 *                       Director of Licensing				     *
 *                       Western Research Laboratory			     *
 *                       Digital Equipment Corporation			     *
 *                       100 Hamilton Avenue				     *
 *                       Palo Alto, California  94301  			     *
 * 									     *
 * This software may be distributed (but not offered for sale or transferred *
 * for compensation) to third parties, provided such third parties agree to  *
 * abide by the terms and conditions of this notice.  			     *
 * 									     *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS    *
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED        *
 * WARRANTIES OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL    *
 * EQUIPMENT CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR     *
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF    *
 * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR    *
 * PERFORMANCE OF THIS SOFTWARE.				    	     *
 *									     *
 *****************************************************************************/

/* grammar for Pascal for input to yacc */

/* basic tokens */

%token ENDOFFILE	0
%token PLUS		1	
%token MINUS		2	
%token ASTERISK		3	
%token SLASH		4	
%token ASSIGN		5	
%token AMPERSAND	6	
%token DOT		7	
%token COMMA		8	
%token SEMICOLON	9	
%token LPAREN		10	
%token LBRACKET		11	
%token LBRACE		12	
%token UPARROW		13	
%token EQUALS		14	
%token SHARP		15	
%token LESS		16	
%token GREATER		17	
%token NOTEQUAL		18	
%token LSEQUAL		19	
%token GREQUAL		20	
%token DOTDOT		21	
%token COLON		22	
%token RPAREN		23	
%token RBRACKET		24	
%token RBRACE		25	
%token BAR		26	
%token IDENT		27	
%token CARDCONST	28	
%token REALCONST	29	
%token CHARCONST	30	
%token STRCONST		31	
%token UNUSEDXXX1	32	

/* reserved words */

%token AND		33	
%token ARRAY		34	
%token BEGIN		35	
%token BY		36	
%token CASE		37	
%token CONST		38	
%token DEFINITION	39	
%token DIV		40	
%token DO		41	
%token ELSE		42	
%token ELSIF		43	
%token END		44	
%token EXIT		45	
%token EXPORT		46	
%token FOR		47	
%token FROM		48	
%token IF		49	
%token IMPLEMENTATION	50	
%token IMPORT		51	
%token IN		52	
%token LOOP		53	
%token MOD		54	
%token MODULE		55	
%token NOT		56	
%token OF		57	
%token OR		58	
%token POINTER		59	
%token PROCEDURE	60	
%token QUALIFIED	61	
%token RECORD		62	
%token REPEAT		63	
%token RETURN		64	
%token SET		65	
%token THEN		66	
%token TO		67	
%token TYPE		68	
%token UNTIL		69	
%token VAR		70	
%token WHILE		71	
%token WITH		72	

/* special tokens for non-standard extensions */
%token ATSIZE		73
%token ATALIGN		74
%token ATPASCAL		75
%token ATC		76
%token ATNOCHECK	77
%token ATNILCHECK	78
%token ATUNUSEDxxx3	79
%token ATNOCOUNT	80
%token ATEXTERNAL	81
%token ATGLOBAL		82
%token ATASM		83
%token ATDYNARRAY	84
%token ATSUBARRAY	85
%token ATLOCAL		86
%token ATLEFTTORIGHT	87
%token ATRIGHTTOLEFT	88
%token ATUNUSEDxxx4	89
%token ATINLINE		90
%token ATSHARED		91
%token ATNOINIT		92


%token DOWNTO		93
%token TKFILE		94
%token FORWARD		95
%token FUNCTION		96
%token GOTO		97
%token LABEL		98
%token PACKED		99
%token PROGRAM		100
%token OCT		101
%token HEX		102

%token ENDOFLINE	103
%token TKSMALLIDENT	104
%token TKSMALLSTRCONST	105
%token NADA		106

/* establish operator associativity and precedence 		*/
/* lower precedence are listed first (equal on same line) 	*/
/* logical operators at wrong precedence, but all misbindings	*/
/*     violate type-checking in CheckExpr			*/
%left	EQUALS SHARP NOTEQUAL LESS LSEQUAL GREATER GREQUAL IN
%left	PLUS MINUS
%left	ASTERISK SLASH DIV MOD
%right	OR
%right	AND

%{
#include <stdio.h>
#define YYMAXDEPTH	500
/* standard type pointers, globally defined in symtab */
#ifdef vms
globalref int anyTypeNode;
#endif
#ifdef unix
int anyTypeNode;
#endif
int temp;

#define	EXPROCT	0	/* For creating ExprNode's */
#define EXPRHEX	1

extern Errors_Error();
yyerror(s) char *s; {
    Errors_Error((int *) s, 1023);
}

%}

%start CompilationUnit

%%

/************************************************************************/
/* Note:								*/
/* 	An action of 							*/
		     /**/
/* 			  means nothing needs to be done.		*/
/* 	An action of							*/
		     /*=*/
/* 			   means the default is used, i.e., $$ = $1	*/
/************************************************************************/


CompilationUnit:
		ProgramDefinition
	|	SeparateCompilationFile
	|	error
				{ printf("Fatal error, cannot proceed\n");
				    exit(1); }
	;

ProgramDefinition:
		PROGRAM IDENT { $$ = DefineModule($2,MODULE); } 
		    ProgramFileList
		    semicolon block END
		    programDOT { EndModule($3,$6,$2); } EndOfFile
	|	PROGRAM IDENT { $$ = DefineModule($2,MODULE); }
		    error END programDOT { EndModule($3,0,$2); } EndOfFile;
	;
		
ProgramFileList:
		/* empty */
				/**/
	|	LPAREN RPAREN
				{ yyerror("Program header cannot be empty"); } 
	|	LPAREN IdentList RPAREN
				{ ProcessFileList($2); }
	;

SeparateCompilationFile:
		{ $$ = DefineModule(0,IMPLEMENTATION); } 
		seqDeclaration EndOfFile { EndModule($1,0,0); }
	;

EndOfFile:
		ENDOFFILE
	|	/* everything else */
		{ yyerror("Junk after end of program");
		  EndFile(); 
		  yychar = ENDOFFILE; }
	;

FPSection:
		IdentList COLON qualident
				{ temp = TypeOf($3);
				  $$ = MakeParamList(0,$1,temp); }
	|	VAR IdentList COLON qualident
				{ temp = TypeOf($4);
				  $$ = MakeParamList(VAR,$2,temp); }
	|	error
				{ $$ = MakeParamList(0,0,anyTypeNode); }
	;

FormalParameters:
		/* empty */
				{ $$ = 0; }
	|	LPAREN seqFPSection RPAREN
				{ $$ = $2; }
	;

ReturnType:
		/*empty*/
				{ $$ = 0; }
	|	COLON qualident
				{ $$ = TypeOf($2); }
	;


seqFPSection:
		FPSection
				/*=*/
	|	seqFPSection semicolon FPSection
				{ $$ = AppendParamList($1,$3); }
	;

declaration:
		LABEL seqLabelDeclaration semicolon
				/**/
	|	CONST seqConstantDeclaration
				/**/
	|	TYPE seqTypeDeclaration
				/**/
	|	VAR seqVariableDeclaration
				/**/
	|	ProcedureDeclaration
				/**/
	;

seqDeclaration:
		/* empty */
				/**/
	|	seqDeclaration declaration
				/**/
	;

block:
		seqDeclaration BEGIN StatementSequence
				{ $$ = $3; }
	;


ProcedureHeading:
		PROCEDURE IDENT { $$ = DefineProc($2,PROCEDURE); }
 		FormalParameters SEMICOLON
				{ temp = ProcType($4,0);
				    $$ = AddTypeToProc($3,temp); }
	|	FUNCTION IDENT	{ $$ = DefineProc($2,PROCEDURE); }
		FormalParameters ReturnType SEMICOLON
				{ temp = ProcType($4,$5);
				  $$ = AddTypeToProc($3,temp); } 
	;

ProcedureDeclaration:
		ProcedureHeading block END semicolon
				{ EndProc($1,$2,0); }
	|	ProcedureHeading FORWARD semicolon
				{ EndProc($1,0,0); }
	|	ProcedureHeading ATEXTERNAL semicolon
				{ MakeExternal($1); EndProc($1,0,0); }
	|	ProcedureHeading error 
				{ EndProc($1,0,0); }
	;

do:
		DO
				/**/
	|	THEN
				{ yyerror("Use DO instead of THEN"); }
	;

WithStatement:
		WITH designator WithEnd
				{ $$ = BuildStmtWith($2,$3); }
	;

WithEnd:
		do statement
				{ $$ = $2; }
	|	COMMA designator WithEnd
				{ temp = BuildStmtWith($2,$3);
				  $$ = AddToStmtList(0,temp); }
	;

assign:
		ASSIGN
			/**/
	|	EQUALS
			{ yyerror("Use ':=' instead of '=' for assignment"); }
	;

ForStatement:
	    	FOR IDENT assign expressionError TO expressionError
		do statement
				{ $$ = BuildStmtFor($2,$4,$6,0,$8); }
	|	FOR IDENT assign expressionError DOWNTO expressionError
		do statement
				{ temp = MakeExprConst(0,-1.0);
				  $$ = BuildStmtFor($2,$4,$6,temp,$8); }
	;

RepeatStatement:
		REPEAT { $$ = StartStmtRepeat(); }
		StatementSequence UNTIL expressionError
				{ $$ = BuildStmtRepeat($2,$3,$5); }
	;

expressionError:
		expression
				/**/
	|	error
				{ $$ = 0; }
	;

WhileStatement:
		WHILE expression do statement
				{ $$ = BuildStmtWhile($2,$4); }
	|	WHILE error do statement
				{ $$ = BuildStmtWhile(0,$4); }
	;

seqCase:
		/* empty */
				{ $$ = 0; }
	|	seqCase SEMICOLON ElementList COLON statement
				{ $$ = AddCase($1,$3,$5); }
	|	seqCase SEMICOLON error COLON statement
				{ $$ = AddCase($1,0,$5); }
	|	seqCase SEMICOLON
				{ $$ = $1; }
	|	ElementList COLON statement
				{ $$ = AddCase(0,$1,$3); }
	|	error COLON statement
				{ $$ = AddCase(0,0,$3); }
	;

CaseStatement:
		CASE expressionError OF seqCase END
				{ $$ = BuildStmtCase($2,$4,0); }
	;


then:
		THEN
			/**/
	|	DO
			{ yyerror("Use THEN instead of DO"); }
	;


/* Following will shift/reduce - the great "dangling else" ambiguity */
IfStatement:
		IF expressionError then statement
				{ temp = AddToStmtList(0,0);
				  $$ = BuildStmtIf($2,$4,temp); }
	|	IF expressionError then statement ELSE statement
				{ $$ = BuildStmtIf($2,$4,$6); }
	;

StatementSequence:
		statement
				/*=*/
	|	StatementSequence SEMICOLON statement
				{ $$ = AppendStmtList($1,$3); }
	;

ProcedureCall:
		designator
				{ temp = AddToExprList(0,0); 
				  $$ = BuildStmtProc($1,temp); }
	|	designator ActualParameters
				{ $$ = BuildStmtProc($1,$2); }
	;

assignment:
		designator assign expressionError
				{ $$ = BuildStmtAssign($1,$3); }
	;

LabelStatement:
		CARDCONST COLON
				{ $$ = BuildStmtLabel($1); }
	;

GotoStatement:
		GOTO CARDCONST
				{ $$ = BuildStmtGoto($2); }
	;

CompoundStatement:
		BEGIN StatementSequence END
				{ $$ = BuildStmtStmts($2); }
	;

statement:
		/* empty */
				{ $$ = AddToStmtList(0,0); }
	|	NonemptyStatement
				/*=*/
	;

NonemptyStatement:
		LabelStatement
				{ $$ = AddToStmtList(0,$1); }
	|	LabelStatement NonemptyStatement
				{ temp = AddToStmtList(0,$1);
				  $$ = AppendStmtList(temp,$2); }
	|	CompoundStatement
				{ $$ = AddToStmtList(0,$1); }
	|	assignment
				{ $$ = AddToStmtList(0,$1); }
	|	GotoStatement
				{ $$ = AddToStmtList(0,$1); }
	|	ProcedureCall
				{ $$ = AddToStmtList(0,$1); }
	|	IfStatement
				{ $$ = AddToStmtList(0,$1); }
	|	CaseStatement
				{ $$ = AddToStmtList(0,$1); }
	|	WhileStatement
				{ $$ = AddToStmtList(0,$1); }
	|	RepeatStatement
				{ $$ = AddToStmtList(0,$1); }
	|	ForStatement
				{ $$ = AddToStmtList(0,$1); }
	|	WithStatement
				{ $$ = AddToStmtList(0,$1); }
	;

ActualParameters:
		LPAREN ArgExpList RPAREN
				{ $$ = $2; }
	;

factor:
		CARDCONST
				{ $$ = BuildExprConst($1); }
	|	REALCONST
				{ $$ = BuildExprConst($1); }
	|	CHARCONST
				{ $$ = BuildExprConst($1); }
	|	STRCONST
				{ $$ = BuildExprConst($1); }
	|	setexpr
				/*=*/
	|	designator
				/*=*/
	|	designator ActualParameters
				{ $$ = BuildExprFunc($1,$2); }
	|	LPAREN expression RPAREN
				{ $$ = $2; }
	|	NOT factor
				{ $$ = BuildExprUnOp(NOT,$2); }
	;

term:
		factor
				/*=*/
	|	term ASTERISK factor
				{ $$ = BuildExprBinOp(ASTERISK,$1,$3); }
	|	term SLASH factor
				{ $$ = BuildExprBinOp(SLASH,$1,$3); }
	|	term DIV factor
				{ $$ = BuildExprBinOp(DIV,$1,$3); }
	|	term MOD factor
				{ $$ = BuildExprBinOp(MOD,$1,$3); }
	|	factor AND term
				{ $$ = BuildExprBinOp(AND,$1,$3); }
	;

TermList:
		term
				/*=*/
	|	TermList PLUS term
				{ $$ = BuildExprBinOp(PLUS,$1,$3); }
	|	TermList MINUS term
				{ $$ = BuildExprBinOp(MINUS,$1,$3); }
	|	term OR TermList
				{ $$ = BuildExprBinOp(OR,$1,$3); }
	;

PlusTermList:
		term
				{ $$ = BuildExprUnOp(PLUS,$1); }
	|	PlusTermList PLUS term
				{ $$ = BuildExprBinOp(PLUS,$1,$3); }
	|	PlusTermList MINUS term
				{ $$ = BuildExprBinOp(MINUS,$1,$3); }
	|	term OR TermList
				{ temp = BuildExprUnOp(PLUS,$1);
				  $$ = BuildExprBinOp(OR,temp,$3); }
	;

MinusTermList:
		term
				{ $$ = BuildExprUnOp(MINUS,$1); }
	|	MinusTermList PLUS term
				{ $$ = BuildExprBinOp(PLUS,$1,$3); }
	|	MinusTermList MINUS term
				{ $$ = BuildExprBinOp(MINUS,$1,$3); }
	|	term OR TermList
				{ temp = BuildExprUnOp(MINUS,$1);
				  $$ = BuildExprBinOp(OR,temp,$3); }
	;

SimpleExpression:
		TermList
				/*=*/
	|	PLUS PlusTermList
				{ $$ = $2; }
	|	MINUS MinusTermList
				{ $$ = $2; }
	;

expression:
		SimpleExpression
				/*=*/
	|	SimpleExpression EQUALS SimpleExpression
				{ $$ = BuildExprBinOp(EQUALS,$1,$3); }
	|	SimpleExpression NOTEQUAL SimpleExpression
				{ $$ = BuildExprBinOp(NOTEQUAL,$1,$3); }
	|	SimpleExpression LESS SimpleExpression
				{ $$ = BuildExprBinOp(LESS,$1,$3); }
	|	SimpleExpression LSEQUAL SimpleExpression
				{ $$ = BuildExprBinOp(LSEQUAL,$1,$3); }
	|	SimpleExpression GREATER SimpleExpression
				{ $$ = BuildExprBinOp(GREATER,$1,$3); }
	|	SimpleExpression GREQUAL SimpleExpression
				{ $$ = BuildExprBinOp(GREQUAL,$1,$3); }
	|	SimpleExpression IN SimpleExpression
				{ $$ = BuildExprBinOp(IN,$1,$3); }
	;

ExpList:
		expression
				{ $$ = AddToExprList(0,$1); }
	|	ExpList COMMA expression
				{ $$ = AddToExprList($1,$3); }
	;

HexOct:
		HEX
				{ $$ = NewExprNode(EXPRHEX); }
	|	OCT
				{ $$ = NewExprNode(EXPROCT); }
	;

ArgExpression:
		expression
				/*=*/
	|	expression HexOct
				{ $$ = AddSubExpr($1, 0, $2); }
	|	expression COLON expression
				{ $$ = AddSubExpr($1, $3, 0); }
	|	expression COLON expression HexOct
				{ $$ = AddSubExpr($1, $3, $4); }
	|	expression COLON expression COLON expression
				{ $$ = AddSubExpr($1, $3, $5); }
	;

ArgExpList:
		ArgExpression
				{ $$ = AddToExprList(0,$1); }
	|	ArgExpList COMMA ArgExpression
				{ $$ = AddToExprList($1,$3); }
	;

designator:
		qualident
				{ $$ = BuildExprSym($1); }
	|	designator LBRACKET ExpList RBRACKET 
				{ $$ = BuildExprSubscript($1,$3); }
	|	designator UPARROW
				{ $$ = BuildExprDeref($1); }
	|	designator DOT IDENT
				{ $$ = BuildExprDot($1,$3); }
	;



VariableDeclaration:
		IdentList COLON type semicolon
				{ DefineVarList($1,$3,VAR,0,0,0); }
	|	error SEMICOLON;
				/**/
	;

seqVariableDeclaration:
		/* empty */
				/**/
	|	seqVariableDeclaration VariableDeclaration
				/**/
	;

PointerType:
		UPARROW IDENT
				{ $$ = PointerForwardType($2,ATPASCAL); }
	;

SetType:
		SET OF SimpleType
				{ $$ = SetType($3,0); }
	|	PACKED SET OF SimpleType
				{ $$ = SetType($4,0); }

	;

ConstElement:
		Constant
				{ $$ = MakeConstSet($1,0); }
	;

ConstElementList:
		ConstElement
				{ $$ = AddToConstSetList(0,$1); }
	|	ConstElementList COMMA ConstElement
				{ $$ = AddToConstSetList($1,$3); }
	;

Element:
		expression
				{ $$ = MakeExprSet($1,0); }
	|	expression DOTDOT expression
				{ $$ = MakeExprSet($1,$3); }
	;

ElementList:
		Element
				{ $$ = AddToExprSetList(0,$1); }
	|	ElementList COMMA Element
				{ $$ = AddToExprSetList($1,$3); }
	;

variant:
		/* empty */
				{ $$ = 0; }
	|	ConstElementList COLON LPAREN FieldListSequence RPAREN
				{ $$ = MakeVariant($1,$4); }
	|	error COLON LPAREN FieldListSequence RPAREN
				{ $$ = MakeVariant(0,$4); }
	;

FieldList:
		/* empty */
				{ $$ = EmptyFieldList(); }
	|	IdentList COLON type
				{ $$ = MakeFieldList($1,$3); }
	;

seqVariant:
		variant
				{ $$ = AddToVariantList(0,$1); }
	|	seqVariant SEMICOLON variant
				{ $$ = AddToVariantList($1,$3); }
	;

opFormELSE:
		/* empty */
				{ temp = EmptyFieldList();
				  $$ = MakeVariant(0,temp); }
	;

VariantPart:
		CASE qualident OF seqVariant opFormELSE
				{ temp = TypeOf($2);
				    $$ = MakeTagField(0,temp,$4,$5); }
	|	CASE IDENT COLON qualident OF seqVariant opFormELSE
				{ temp = TypeOf($4);
				    $$ = MakeTagField($2,temp,$6,$7); }
	;

FieldListSequence:
		FixedFields VariantPart
				{ $$ = AppendFieldList($1,$2); }
	|	FixedFields
				/*=*/
	;

FixedFields:
		FieldList
				/*=*/
	|	FixedFields SEMICOLON FieldList
				{ $$ = AppendFieldList($1,$3); }
	;

RecordType:
		RECORD FieldListSequence END
				{ $$ = RecordType($2,0); }
	|	PACKED RECORD FieldListSequence END
				{ $$ = RecordType($3,0); }
	;

FileType:
		TKFILE OF type
				{ $$ = FileType($3); }
	|	PACKED TKFILE OF type
				{ $$ = FileType($4); }
	;

ArrayType:
		ARRAY LBRACKET SimpleType ArrayElementPart
				{ $$ = ArrayType($3,$4,ARRAY,0); }
	|	PACKED ARRAY LBRACKET SimpleType ArrayElementPart
				{ $$ = ArrayType($4,$5,ARRAY,0); }

	;

ArrayElementPart:
		RBRACKET OF type
				{ $$ = $3; }
	|	COMMA SimpleType ArrayElementPart
		/* Right recursion is important for multidimensional arrays */
				{ $$ = ArrayType($2,$3,ARRAY,0); }
	;

SubrangeType:
		Constant DOTDOT Constant
				{ $$ = SubrangeType($1,$3,0); }
	;

IdentList:
		IDENT
				{ temp = MakeIdent($1);
				    $$ = AddToIdentList(0,temp); }
/* Following will shift/reduce conflict */
	|	IdentList COMMA IDENT
				{ temp = MakeIdent($3);
				    $$ = AddToIdentList($1,temp); }
	|	IdentList COMMA
				{ $$ = $1;
				  yyerror("Identifier expected"); }
	|	IdentList IDENT
				{ temp = MakeIdent($2);
				    $$ = AddToIdentList($1,temp);
				    yyerror("Comma expected"); }
	;

EnumConst:
		IDENT
				{ $$ = MakeEnumNode($1,0); }
	;

EnumConstList:
		EnumConst
				{ $$ = AddToEnumList(0,$1); }
/* Following will shift/reduce conflict */
	|	EnumConstList COMMA EnumConst
				{ $$ = AddToEnumList($1,$3); }
	|	EnumConstList COMMA
				{ $$ = $1;
				  yyerror("Identifier expected"); }
	|	EnumConstList EnumConst
				{ $$ = AddToEnumList($1,$2);
				  yyerror("Comma expected"); }
	;

enumeration:
		LPAREN EnumConstList RPAREN
				{ $$ =  EnumerationType($2); }
	;

SimpleType:
		qualident
				{ $$ = TypeOf($1); }
	|	enumeration
				/*=*/
	|	SubrangeType
				/*=*/
	;

type:
		SimpleType
				/*=*/
	|	ArrayType
				/*=*/
	|	RecordType
				/*=*/
	|	FileType
				/*=*/
	|	SetType
				/*=*/
	|	PointerType
				/*=*/
	;

TypeDeclaration:
		IDENT EQUALS type SEMICOLON
				{ DefineType($1,$3); }
	|	IDENT COLON
		    { yyerror("Use '=' instead of ':' for type declarations"); }
		    type SEMICOLON
		    		{DefineType($1,$4); }
	|	error SEMICOLON
				/**/
	;

seqTypeDeclaration:
		/* empty */
				/**/
	|	seqTypeDeclaration TypeDeclaration
				/**/
	;


setexpr:
		LBRACKET oplsElement RBRACKET
				{ $$ = BuildExprSet($2,0); }
	|	LBRACKET error RBRACKET
				{ $$ = BuildExprSet(0,0); }
	;

oplsElement:
		/* empty */
				{ $$ = 0; }
	|	ElementList
				/*=*/
	;


Constant:
		unsignedConstant
				/*=*/
	|	PLUS unsignedConstant
				{ $$ = ConstUnOp(PLUS,$2); }
	|	MINUS unsignedConstant
				{ $$ = ConstUnOp(MINUS,$2); }
	|	STRCONST
				/*=*/
	;

unsignedConstant:
		qualident
				{ $$ = ConstSym($1); }
	|	CARDCONST
				/*=*/
	|	REALCONST
				/*=*/
	|	CHARCONST
				/*=*/
	;

ConstantDeclaration:
		IDENT EQUALS Constant SEMICOLON
				{ DefineConst($1,$3); }
	|	error SEMICOLON
				/**/
	;

seqLabelDeclaration:
		seqLabelDeclaration COMMA CARDCONST
				{ DefineLabel($3); }
	|	seqLabelDeclaration CARDCONST
				{ yyerror("Comma expected");
				  DefineLabel($2); }
	|	CARDCONST
				{ DefineLabel($1); }
	;
			
seqConstantDeclaration:
		/* empty */
				/**/
	|	seqConstantDeclaration ConstantDeclaration
				/**/
	;

/*Symbol*/
qualident:
		IDENT
				{ temp = MakeIdent($1);
				    $$ = AddToIdentList(0,temp); }
	;

programDOT:
	{ ScanEofOK() ; } programDOT1
	;

programDOT1:
		DOT
	|
		/* empty */
			{ yyerror("Program must end with a period."); }
	|
		SEMICOLON
			{ yyerror("Program must end with a period."); }
	;

semicolon:
		SEMICOLON
	|
		/*empty*/
			{ yyerror("Missing semi-colon"); } 
	;
