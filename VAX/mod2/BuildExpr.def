definition module BuildExpr;

(*****************************************************************************
 *									     *
 *             Copyright 1984-1990 Digital Equipment Corporation             *
 *                         All Rights Reserved				     *
 *								             *
 * Permission to use, copy, and modify this software and its documentation   *
 * is hereby granted only under the following terms and conditions.  Both    *
 * the above copyright notice and this permission notice must appear in all  *
 * copies of the software, derivative works or modified versions, and any    *
 * portions thereof, and both notices must appear in supporting              *
 * documentation.							     *
 *									     *
 * Users of this software agree to the terms and conditions set forth        *
 * herein, and hereby grant back to Digital a non-exclusive, unrestricted,   *
 * royalty-free right and license under any changes, enhancements or         *
 * extensions made to the core functions of the software, including but not  *
 * limited to those affording compatibility with other hardware or software  *
 * environments, but excluding applications which incorporate this software. *
 * Users further agree to use their best efforts to return to Digital any    *
 * such changes, enhancements or extensions that they make and inform        *
 * Digital of noteworthy uses of this software.  Correspondence should be    *
 * provided to Digital at:						     *
 * 									     *
 *                       Director of Licensing				     *
 *                       Western Research Laboratory			     *
 *                       Digital Equipment Corporation			     *
 *                       100 Hamilton Avenue				     *
 *                       Palo Alto, California  94301  			     *
 * 									     *
 * This software may be distributed (but not offered for sale or transferred *
 * for compensation) to third parties, provided such third parties agree to  *
 * abide by the terms and conditions of this notice.  			     *
 * 									     *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS    *
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED        *
 * WARRANTIES OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL    *
 * EQUIPMENT CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR     *
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF    *
 * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR    *
 * PERFORMANCE OF THIS SOFTWARE.				    	     *
 *									     *
 *****************************************************************************)

from IO import
    File;

from Tokens import
    Token;

from Strings import
    String;

from Symbols import
    ExprKind, ExprNode, ConstNode, ExprList, ExprSetList, ExprSetNode,
    IdentList;

(* grammar+ *) procedure @external NewExprNode(const kind : ExprKind) 
		: ExprNode;

procedure SameExprLine(const newOne, oldOne : ExprNode); 

(* grammar  *) procedure @external BuildExprBad() : ExprNode;

(* grammar+ *) procedure @external BuildExprConst(const cn : ConstNode) 
		: ExprNode; 

(* grammar  *) procedure @external BuildExprSym(const names : IdentList) 
		: ExprNode;

(* grammar  *) procedure @external BuildExprDeref(const ptr : ExprNode) 
		: ExprNode; 

(* grammar  *) procedure @external BuildExprDot(const rec   : ExprNode; 
					        const field : String) 
		: ExprNode; 

(* grammar *) procedure @external BuildExprSubscript(const arr      : ExprNode;
						     const subsList : ExprList)
		: ExprNode;

(* grammar  *) procedure @external BuildExprRange(const index, 
						        count : ExprNode) 
		: ExprNode;

(* grammar+ *) procedure @external BuildExprFunc(const func   : ExprNode; 
					         const params : ExprList) 
		: ExprNode;

(* grammar  *) procedure @external MakeExprSet (const lower, upper : ExprNode) 
		: ExprSetNode;

(* grammar+ *) procedure @external AddToExprSetList (     list   : ExprSetList;
						    const newOne : ExprSetNode)
		: ExprSetList; 

(* grammar *) procedure @external BuildExprSet(const elementList : ExprSetList;
					       const setTypeName : IdentList)
		: ExprNode;

(* grammar+ *) procedure @external BuildExprUnOp(const oper : Token; 
						 const opnd : ExprNode) 
		: ExprNode; 

(* grammar *) procedure @external BuildExprBinOp(const oper	     : Token; 
						 const opnd1, opnd2 : ExprNode)
		: ExprNode;

(* grammar+ *) procedure @external AddToExprList(      list   : ExprList; 
						 const newOne : ExprNode) 
		: ExprList;
	 
procedure AppendExprList(const some, more : ExprList) : ExprList; 

$if pascal then
procedure PrependExprList(list : ExprList; const newOne : ExprNode) : ExprList;

(* grammar  *) procedure @external AddSubExpr(const expr, 
						    widthExpr,
						    decimalExpr : ExprNode) 
		: ExprNode;
$end

(* debug *) procedure Indent(f : File; const indent : integer); 

(* debug *) procedure PrintExpr(const en : ExprNode; const indent : integer); 

(* debug *) procedure WriteExpr(const en : ExprNode); 

end BuildExpr.
