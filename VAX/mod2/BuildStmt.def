definition module BuildStmt;

(*****************************************************************************
 *									     *
 *             Copyright 1984-1990 Digital Equipment Corporation             *
 *                         All Rights Reserved				     *
 *								             *
 * Permission to use, copy, and modify this software and its documentation   *
 * is hereby granted only under the following terms and conditions.  Both    *
 * the above copyright notice and this permission notice must appear in all  *
 * copies of the software, derivative works or modified versions, and any    *
 * portions thereof, and both notices must appear in supporting              *
 * documentation.							     *
 *									     *
 * Users of this software agree to the terms and conditions set forth        *
 * herein, and hereby grant back to Digital a non-exclusive, unrestricted,   *
 * royalty-free right and license under any changes, enhancements or         *
 * extensions made to the core functions of the software, including but not  *
 * limited to those affording compatibility with other hardware or software  *
 * environments, but excluding applications which incorporate this software. *
 * Users further agree to use their best efforts to return to Digital any    *
 * such changes, enhancements or extensions that they make and inform        *
 * Digital of noteworthy uses of this software.  Correspondence should be    *
 * provided to Digital at:						     *
 * 									     *
 *                       Director of Licensing				     *
 *                       Western Research Laboratory			     *
 *                       Digital Equipment Corporation			     *
 *                       100 Hamilton Avenue				     *
 *                       Palo Alto, California  94301  			     *
 * 									     *
 * This software may be distributed (but not offered for sale or transferred *
 * for compensation) to third parties, provided such third parties agree to  *
 * abide by the terms and conditions of this notice.  			     *
 * 									     *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS    *
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED        *
 * WARRANTIES OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL    *
 * EQUIPMENT CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR     *
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF    *
 * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR    *
 * PERFORMANCE OF THIS SOFTWARE.				    	     *
 *									     *
 *****************************************************************************)

from Strings import
    String;

from Tokens import
    Token;

from Symbols import
    ExprNode, ExprList, StmtKind, StmtNode, StmtList, ExprSetList, 
    CaseList;
$if pascal then
from Symbols import ConstNode;
$end

procedure NewStmtNode(const kind : StmtKind) : StmtNode;

procedure SameStmtLine(const stn : StmtNode; const en : ExprNode);

(* grammar+ *) procedure @external BuildStmtAssign(const lhs, rhs : ExprNode) 
		: StmtNode;

(* grammar+ *) procedure @external BuildStmtProc(const proc   : ExprNode; 
						 const params : ExprList) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtIf(const cond     : ExprNode; 
					       const thenList : StmtList; 
					       const elseList : StmtList) 
		: StmtNode;

(* grammar  *) procedure @external AddCase(      list   : CaseList;
					   const labels : ExprSetList; 
					   const stmts  : StmtList) : CaseList;

(* grammar  *) procedure @external BuildStmtCase(const caseSel  : ExprNode; 
					         const caseList : CaseList;
						 const caseElse : StmtList) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtWhile(const cond      : ExprNode; 
						  const whileBody : StmtList) 
		: StmtNode;

(* grammar  *) procedure @external StartStmtRepeat (): StmtNode;

(* grammar  *) procedure @external BuildStmtRepeat(const stn        : StmtNode; 
                                                   const repeatBody : StmtList; 
						   const cond       : ExprNode) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtFor(const index   : String; 
						const forFrom : ExprNode;
						const forTo   : ExprNode;
						const forBy   : ExprNode; 
						const forBody : StmtList) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtWith(const withQual : ExprNode; 
						 const withBody : StmtList) 
		: StmtNode;

$if modula2 then
(* grammar  *) procedure @external StartStmtLoop (): StmtNode;

(* grammar  *) procedure @external BuildStmtLoop(const stn      : StmtNode; 
						 const loopBody : StmtList) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtExit(const exitKind : Token) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtReturn(const returnVal : ExprNode) 
		: StmtNode;

$else (* pascal *)

(* grammar  *) procedure @external BuildStmtLabel(const labelNumber : ConstNode) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtGoto(const labelNumber : ConstNode) 
		: StmtNode;

(* grammar  *) procedure @external BuildStmtStmts(const stmts : StmtList) 
		: StmtNode;

(* grammar  *) procedure @external AppendStmtList(const some, more : StmtList)
		: StmtList;
$end

(* grammar+ *) procedure @external AddToStmtList (      list   : StmtList; 
						  const newOne : StmtNode) 
		: StmtList;

(* debug *) procedure PrintStmtList(const stl    : StmtList;
				    const indent : integer); 

end BuildStmt.

