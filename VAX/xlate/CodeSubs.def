definition module CodeSubs;

(*****************************************************************************
 *									     *
 *             Copyright 1984-1990 Digital Equipment Corporation             *
 *                         All Rights Reserved				     *
 *								             *
 * Permission to use, copy, and modify this software and its documentation   *
 * is hereby granted only under the following terms and conditions.  Both    *
 * the above copyright notice and this permission notice must appear in all  *
 * copies of the software, derivative works or modified versions, and any    *
 * portions thereof, and both notices must appear in supporting              *
 * documentation.							     *
 *									     *
 * Users of this software agree to the terms and conditions set forth        *
 * herein, and hereby grant back to Digital a non-exclusive, unrestricted,   *
 * royalty-free right and license under any changes, enhancements or         *
 * extensions made to the core functions of the software, including but not  *
 * limited to those affording compatibility with other hardware or software  *
 * environments, but excluding applications which incorporate this software. *
 * Users further agree to use their best efforts to return to Digital any    *
 * such changes, enhancements or extensions that they make and inform        *
 * Digital of noteworthy uses of this software.  Correspondence should be    *
 * provided to Digital at:						     *
 * 									     *
 *                       Director of Licensing				     *
 *                       Western Research Laboratory			     *
 *                       Digital Equipment Corporation			     *
 *                       100 Hamilton Avenue				     *
 *                       Palo Alto, California  94301  			     *
 * 									     *
 * This software may be distributed (but not offered for sale or transferred *
 * for compensation) to third parties, provided such third parties agree to  *
 * abide by the terms and conditions of this notice.  			     *
 * 									     *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS    *
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED        *
 * WARRANTIES OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL    *
 * EQUIPMENT CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR     *
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF    *
 * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR     *
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR    *
 * PERFORMANCE OF THIS SOFTWARE.				    	     *
 *									     *
 *****************************************************************************)


from EES import Reg, EESElement;

from PCodeOps import
    PCodeOp;

from Types import 
    operandstring, pcodetype, sizerange, LabelNumber;

export qualified
    associatedType, currentConstant, 
    NewLabel, MultiWordBinOp, Compare, 
    CallProc, Increment, SetConst, TwoOrThree, PushConst,
    PushReg, MakeBaseAddress, MakeVariable;

var
    (* map from characters to pcode types *)
    associatedType :array char of pcodetype;

    (* counter to generate constant labels (block numbers) *)
    currentConstant : integer;


procedure NewLabel(): LabelNumber; 

procedure MultiWordBinOp(const opl, opq    : array of char;
			       left, right : EESElement); 
procedure Compare(ptype : pcodetype; size : sizerange); 

$if unix then
procedure CallProc(op : PCodeOp; ctype : char; size : sizerange;
	numParamWords : integer; const procName : operandstring;
	procNameSize : integer); 
$else
(* CED added this extra parameter on 3/23/87 *)
(* It is much quicker to use the already known length of the string rather
than calling Length when we try HashSymbol. Also, we know all of
the predefined routine names are ok - so we use 0 length as a flag. *)
procedure CallProc(op : PCodeOp; ctype : char; size : sizerange;
	numParamWords : integer; const longProcName : operandstring;
	procNameSize : integer);
$end

procedure Increment(value : integer); 
procedure SetConst(size : sizerange; e : EESElement); 
procedure TwoOrThree(op : array of char; source, dest : EESElement;
	ptype : pcodetype; size : sizerange; dostore : boolean); 
procedure PushConst(ptype:pcodetype; size:sizerange;value:integer); 
procedure PushReg(ptype:pcodetype; size:sizerange;dreg:Reg); 
procedure MakeBaseAddress(e:EESElement); 
procedure MakeVariable(e:EESElement); 
end CodeSubs.
